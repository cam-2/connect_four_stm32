/*
 * GameLogic.C
 *
 *  Created on: Apr 17, 2025
 *      Author: Cameron Thomas
 */

#include "GameLogic.h"

static uint8_t sessionGameMode = NO_MODE_SELECTED;
static uint8_t playerTurn = YELLOW;
static uint8_t gameOver = FALSE;
static uint8_t coinDropped = FALSE;
static uint8_t gameBoard[CONNECT_FOUR_ROW_COUNT][CONNECT_FOUR_COLUMN_COUNT];

static STMPE811_TouchData StaticTouchData;

extern TIM_HandleTypeDef htim2;

uint8_t yellowWinCount = 0;
uint8_t redWinCount = 0;
uint32_t numSecondsElapsedInGame = 0;
coin_t gameCoin;


void setGameMode(uint8_t mode) {
	sessionGameMode = mode;
}


void resetBoard(void) {
	memset(gameBoard, 0, sizeof(gameBoard));
}


void incrementWinCount(void) {

	if(playerTurn == YELLOW) {
		yellowWinCount++;
	}
	else {
		redWinCount++;
	}
	gameOver = TRUE;
}


void placeCoin(void) {

	if(gameBoard[gameCoin.row][gameCoin.col]) {
		return;
	}

	gameBoard[gameCoin.row][gameCoin.col] = playerTurn;
	coinDropped = TRUE;

	if(playerTurn == YELLOW) {
		LCD_Display_Coin((gameCoin.col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, LCD_PIXEL_HEIGHT - BORDER_Y_OFFSET - (gameCoin.row + COIN_GAME_LOGIC_OFFSET) * BOARD_Y_OFFSET, LCD_COLOR_YELLOW);
	}
	else if(sessionGameMode == TWO_PLAYER_SELECT){
		LCD_Display_Coin((gameCoin.col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, LCD_PIXEL_HEIGHT - BORDER_Y_OFFSET - (gameCoin.row + COIN_GAME_LOGIC_OFFSET) * BOARD_Y_OFFSET, LCD_COLOR_RED);
	}

	return;
}


uint8_t canPlaceCoin(uint8_t col) {

	for(int row = 0; row < CONNECT_FOUR_ROW_COUNT; row++) {
		if(!gameBoard[row][col]) {
			gameCoin.row = row;
			return TRUE;
		}
	}
	return FALSE;
}


void moveCoin(uint8_t col) {
	clearFloatingCoin((gameCoin.col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, gameCoin.yPos);
	gameCoin.col = col;

	if(playerTurn == YELLOW) {
		LCD_Display_Coin((gameCoin.col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_YELLOW);
	}
	else {
		LCD_Display_Coin((gameCoin.col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_RED);
	}
}


/* Checks which side of the screen is pressed, as well as if we are still
 * within the bounds of the board.
 * */
void checkIfUserMovedCoin(void) {
	if(returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
		HAL_Delay(200);
		if(StaticTouchData.x > LCD_PIXEL_WIDTH / 2 && gameCoin.col > 0) {
			moveCoin(gameCoin.col - 1);
		}
		else if(StaticTouchData.x < LCD_PIXEL_WIDTH / 2 && gameCoin.col < 6) {
			moveCoin(gameCoin.col + 1);
		}
	}
}


void resetCoinPos(void) {
	gameCoin.col = COIN_DEFAULT_X;
	gameCoin.row = 0;
	gameCoin.yPos = COIN_DEFAULT_Y;
	coinDropped = FALSE;
}


void startNewGame(void) {
	resetBoard();
	gameOver = FALSE;
    numSecondsElapsedInGame = 0;
	playGame();
}


uint8_t getScoreByDirection(uint8_t row, uint8_t col, uint8_t rowDelta, uint8_t colDelta, uint8_t player) {
	uint8_t score = 0;

    for (uint8_t count = 0; count < 4; count++) {
        if (row < CONNECT_FOUR_ROW_COUNT && row >= 0 && col < CONNECT_FOUR_COLUMN_COUNT && col >= 0) {
            if (gameBoard[row][col] == player) {
                score++;
            }
        }
        else {
        	return score;
        }
        row += rowDelta;
        col += colDelta;
    };
    return score;
}


/* First check if theres a win condition by checking the last piece placed.
 * If no win condition, check for the case that a draw has occured,
 * (all pieces in column are full).
 * Otherwise, return false.
 */
uint8_t checkWinner(uint8_t row, uint8_t column, uint8_t player) {

	/* Horizontal check, left and right of coin placement. */
	if(getScoreByDirection(row, column, 0, 1, player) == 4 || getScoreByDirection(row, column, 0, -1, player) == 4) return TRUE;

	/* Vertical check */
	if(getScoreByDirection(row, column, -1, 0, player) == 4) return TRUE;

	/* Descending Diagonal check, from bottom and top of diagonal. */
	if(getScoreByDirection(row, column, 1, -1, player) == 4 || getScoreByDirection(row, column, -1, 1, player) == 4) return TRUE;

	/* Ascending Diagonal check, from bottom and top of diagonal. */
	if(getScoreByDirection(row, column, 1, 1, player) == 4 || getScoreByDirection(row, column, -1, -1, player) == 4) return TRUE;

	/* Tie condition check */
	for(uint8_t col = 0; col < CONNECT_FOUR_COLUMN_COUNT; col++) {
		if(!gameBoard[CONNECT_FOUR_ROW_COUNT - COIN_GAME_LOGIC_OFFSET][col]) {
			return FALSE;
		}
	}
	gameOver = TRUE;
	return FALSE;
}


/* During human player turn, wait for touch screen input to select
 * where coin will drop. Between each input, redraw coin in position.
 * When button is pressed, coin will drop. This means we enable interrupts
 * for the button in this loop, then disable them if a coin can be placed.
 * */
void playTurn(void) {
	resetCoinPos();

	if(playerTurn == YELLOW) {
		LCD_Display_Coin((gameCoin.col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_YELLOW);
		__NVIC_EnableIRQ(BUTTON_IRQ_NUM);
		while(!coinDropped) {
			checkIfUserMovedCoin();
		}
	}

	else {
		LCD_Display_Coin((gameCoin.col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_RED);
		if(sessionGameMode == AI_MODE_SELECT) {
			; // To be determined if AI will use alpha-beta search or RNG.
		}
		else if(sessionGameMode == TWO_PLAYER_SELECT){
			__NVIC_EnableIRQ(BUTTON_IRQ_NUM);
			while(!coinDropped) {
				checkIfUserMovedCoin();
			}
		}
	}

	if(checkWinner(gameCoin.row, gameCoin.col, playerTurn)) {
		incrementWinCount();
	}

	playerTurn = (playerTurn % 2) + 1;
}


void playGame(void) {

	LCD_Draw_Board_Structure();
    HAL_TIM_Base_Start_IT(&htim2);
	while(!gameOver) {
		playTurn();
	}
    HAL_TIM_Base_Stop_IT(&htim2);
}

/* AI FUNCTIONS START */

uint8_t getScoreOfPosition(uint8_t row, uint8_t col, uint8_t player) {
	uint8_t score = 0;

	/* Horizontal Scores */
	score += getScoreByDirection(row, column, 0, 1, player);
	if(score - 4 == score) {
		return 0xFF;
	}
	score += getScoreByDirection(row, column, 0, -1, player);
	if(score - 4 == score) {
		return 0xFF;
	}
}

uint8_t checkWinByScore(uint8_t prevScore, uint8_t score) {

	if(score - 4 == prevScore) {
		return TRUE;
	}
	return FALSE;
}
