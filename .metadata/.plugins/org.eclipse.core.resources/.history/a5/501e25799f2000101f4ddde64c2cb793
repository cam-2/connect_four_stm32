/*
 * GameLogic.C
 *
 *  Created on: Apr 17, 2025
 *      Author: Cameron Thomas
 */

#include "GameLogic.h"

static uint8_t sessionGameMode = 0;
static uint8_t playerTurn = 0;
static uint8_t gameOver = 0;

static uint16_t yellowWinCount = 0;
static uint16_t redWinCount = 0;

static uint8_t gameBoard[CONNECT_FOUR_ROW_COUNT][CONNECT_FOUR_COLUMN_COUNT];
static coin_t gameCoin;

static STMPE811_TouchData StaticTouchData;


void setGameMode(uint8_t mode) {
	sessionGameMode = mode;
}


void resetBoard(void) {
	memset(gameBoard, 0, sizeof(gameBoard));
}


void incrementWinCount(void) {

	if(playerTurn == 1) {
		yellowWinCount++;
	}
	else {
		redWinCount++;
	}
	gameOver = 1;
}


void placeCoin(uint8_t row, uint8_t column, uint8_t player, uint16_t color) {
	gameBoard[row][column] = player;
	LCD_Display_Coin((column + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, LCD_PIXEL_HEIGHT - BORDER_Y_OFFSET - (row + COIN_GAME_LOGIC_OFFSET) * BOARD_Y_OFFSET, color);
	checkWinner(row, column, player);
	playerTurn = (playerTurn + 1) % 2;
}


uint8_t checkIfCanPlaceCoin(uint8_t col) {

	for(int row = 0; row < CONNECT_FOUR_ROW_COUNT; row++) {
		if(!gameBoard[row][col]) {
			clearFloatingCoin(gameCoin.xPos * BOARD_X_OFFSET, gameCoin.yPos);
			if(playerTurn == 0) {
				placeCoin(row, col, 'Y', LCD_COLOR_YELLOW);
			}
			else {
				placeCoin(row, col, 'R', LCD_COLOR_RED);
			}
			return 1;
		}
	}
	return 0;
}


void moveCoin(uint8_t col) {
	clearFloatingCoin(gameCoin.xPos * BOARD_X_OFFSET, gameCoin.yPos);
	gameCoin.xPos = col;

	if(playerTurn == 0) {
		LCD_Display_Coin(gameCoin.xPos * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_YELLOW);
	}
	else {
		LCD_Display_Coin(gameCoin.xPos * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_RED);
	}
}


void checkIfUserMovedCoin(void) {
	if(returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
		HAL_Delay(200);
		/* Checks which side of the screen is pressed, as well as if we are still
		 * within the bounds of the board.
		 * */
		if(StaticTouchData.x > LCD_PIXEL_WIDTH / 2 && gameCoin.xPos > 1) {
			moveCoin(gameCoin.xPos - 1);
		}
		else if(StaticTouchData.x < LCD_PIXEL_WIDTH / 2 && gameCoin.xPos < 7) {
			moveCoin(gameCoin.xPos + 1);
		}
	}
}



void resetCoinPos(void) {
	gameCoin.xPos = COIN_DEFAULT_X;
	gameCoin.yPos = COIN_DEFAULT_Y;
}


void startNewGame(void) {
	resetBoard();
	gameOver = 0;
	playGame();
}


void playTurn(void) {
	resetCoinPos();
	if(playerTurn == 0) {
		/* Blueprint:
		 * Wait for touch screen input to select where coin will drop.
		 * Between each input, redraw coin in position.
		 * When button is pressed, coin will drop. This means we enable interrupts
		 * for the button in this loop, then disable them if a coin can be placed.
		 * */
		LCD_Display_Coin(gameCoin.xPos * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_YELLOW);
		__NVIC_EnableIRQ(EXTI0_IRQn);
		while(playerTurn == 0) {
			checkIfUserMovedCoin();
		}
	}

	else {
		if(sessionGameMode == AI_MODE_SELECT) {
			; // To be determined if AI will use alpha-beta search or RNG.
		}
		else if(sessionGameMode == TWO_PLAYER_SELECT){
			LCD_Display_Coin(gameCoin.xPos * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_RED);
			__NVIC_EnableIRQ(EXTI0_IRQn);
			while(playerTurn == 1) {
				checkIfUserMovedCoin();
			}
		}
	}
}

/* First check if theres a win condition by checking the last piece placed.
 * If no win condition, check for the case that a draw has occured,
 * (all pieces in column are full).
 * Otherwise, return false.
 */
void checkWinner(uint8_t row, uint8_t column, uint8_t player) {

	/* Horizontal check */
	if(checkWinnerByDirection(row, column, 1, 0, player)) return;
//
//	/* Vertical check */
//	if(checkWinnerByDirection(row, column, 0, 1, player)) return;
//
//	/* Descending Diagonal check */
//	if(checkWinnerByDirection(row, column, -1, -1, player)) return;
//
//	/* Ascending Diagonal check */
//	if(checkWinnerByDirection(row, column, 1, 1, player)) return;
//
	/* Tie condition check */
	for(uint8_t col = 0; col < CONNECT_FOUR_COLUMN_COUNT; col++) {
		if(!gameBoard[CONNECT_FOUR_ROW_COUNT - COIN_GAME_LOGIC_OFFSET][col]) {
			return;
		}
	}
	gameOver = 1;
	return;
}


uint8_t checkWinnerByDirection(uint8_t row, uint8_t col, uint8_t rowDelta, uint8_t colDelta, uint8_t player) {

    for (uint8_t count = 0; count < 4; count++) {
        if (row < CONNECT_FOUR_ROW_COUNT && row >= 0 && col < CONNECT_FOUR_COLUMN_COUNT && col >= 0) {
            if (gameBoard[row][col] != player) {
                return 0;
            }
        }
        row += rowDelta;
        col += colDelta;
    }
    incrementWinCount();
    return 1;
}


void playGame(void) {
	LCD_Draw_Board_Structure();
	while(!gameOver) {
		playTurn();
	}
}


void EXTI0_IRQHandler(void) {
	__NVIC_DisableIRQ(EXTI0_IRQn);
	/* Drop Coin. The offset accounts for the logic used to draw the coin on the LCD display, which does not match
	 * the indices of the matrix that holds the data for the game board. */
	if(checkIfCanPlaceCoin(gameCoin.xPos - COIN_GAME_LOGIC_OFFSET)) {
		__NVIC_ClearPendingIRQ(EXTI0_IRQn);
		clearPendingEXTI(BUTTON_PIN_NUM);
	}
	else {
		__NVIC_ClearPendingIRQ(EXTI0_IRQn);
		clearPendingEXTI(BUTTON_PIN_NUM);
		__NVIC_EnableIRQ(EXTI0_IRQn);
	}
}
