/*
 * GameLogic.h
 *
 *  Created on: Apr 17, 2025
 *      Author: Cameron Thomas
 */

#ifndef INC_GAMELOGIC_H_
#define INC_GAMELOGIC_H_

#include "LCD_Driver.h"
#include "InterruptControl.h"
#include "Button_Driver.h"
#include <string.h>

#define AI_MODE_SELECT 1
#define TWO_PLAYER_SELECT 2
#define NO_MODE_SELECTED 0

#define NUM_ROWS 6
#define NUM_COLS 7

#define COIN_DEFAULT_COL 3
#define COIN_DEFAULT_ROW 0
#define COIN_DEFAULT_Y 40
#define COIN_GAME_LOGIC_OFFSET 1

#define MAX_SCORE 0x7F
#define TIE_SCORE 0x80
#define MIN_SCORE 0x80

#define YELLOW 1
#define RED 2

#define FALSE 0
#define TRUE 1

#define MAX_DEPTH_SEARCH 2

typedef struct {
	uint8_t col;
	uint8_t row;
	uint16_t yPos;
} coin_t;

typedef struct {
	int8_t score;
	uint8_t col;
} utilityScore_t;

void setGameMode(uint8_t mode);

void resetBoard(void);

void startNewGame(void);

void playGame(void);

void playTurn(void);

void incrementWinCount(void);

void checkTie(void);

uint8_t checkWinner(uint8_t board[NUM_ROWS][NUM_COLS], uint8_t row, uint8_t col, uint8_t player);

uint8_t getScoreByDirection(uint8_t board[NUM_ROWS][NUM_COLS], uint8_t row, uint8_t col, uint8_t rowDelta, uint8_t colDelta, uint8_t player);

void resetCoinPos(void);

void checkIfUserMovedCoin(void);

void moveCoin(uint8_t col);

void placeCoin(uint8_t board[NUM_ROWS][NUM_COLS], uint8_t row, uint8_t col);

uint8_t canPlaceCoin(uint8_t board[NUM_ROWS][NUM_COLS], uint8_t col);


/* Utility function used for alpha-beta search algorithm for AI play.
 * Calculates the score of the current position, which is passed in as a row and column of
 * the last coin placed. Utilizes the getScoreByDirection function to add up the number of
 * matching coins of the player for each horizontal direction, each diagonal direction, and
 * the vertical direction.
 */
int8_t getScoreOfPosition(uint8_t board[NUM_ROWS][NUM_COLS], uint8_t row, uint8_t col, uint8_t player);

/* Mini-Max search algorithm with alpha-beta pruning. Player RED (or player 2) is always considered the player
 * maximizing in the current version of the game, declared in the PlayTurn() function. However, this can be modified
 * dependant upon who is passed in as playerToMove and prevPlayer in the initial funciton call.
 */
utilityScore_t alphaBeta(uint8_t board[NUM_ROWS][NUM_COLS], uint8_t depth, int8_t alpha, int8_t beta, uint8_t row, uint8_t col, uint8_t playerToMove, uint8_t prevPlayer);

#endif /* INC_GAMELOGIC_H_ */
