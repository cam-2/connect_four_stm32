
ECEN2370_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073a4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001220  08007554  08007554  00008554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008774  08008774  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008774  08008774  00009774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800877c  0800877c  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800877c  0800877c  0000977c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008780  08008780  00009780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008784  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a06c  2**0
                  CONTENTS
 10 .bss          00025d00  2000006c  2000006c  0000a06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025d6c  20025d6c  0000a06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000150a8  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000363c  00000000  00000000  0001f144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  00022780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001041  00000000  00000000  00023c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027754  00000000  00000000  00024cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001900f  00000000  00000000  0004c42d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e317d  00000000  00000000  0006543c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001485b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ca4  00000000  00000000  001485fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  0014e2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800753c 	.word	0x0800753c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	0800753c 	.word	0x0800753c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	db0b      	blt.n	80005e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f003 021f 	and.w	r2, r3, #31
 80005d4:	4907      	ldr	r1, [pc, #28]	@ (80005f4 <__NVIC_EnableIRQ+0x38>)
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	095b      	lsrs	r3, r3, #5
 80005dc:	2001      	movs	r0, #1
 80005de:	fa00 f202 	lsl.w	r2, r0, r2
 80005e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000e100 	.word	0xe000e100

080005f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	2b00      	cmp	r3, #0
 8000608:	db12      	blt.n	8000630 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f003 021f 	and.w	r2, r3, #31
 8000610:	490a      	ldr	r1, [pc, #40]	@ (800063c <__NVIC_DisableIRQ+0x44>)
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	095b      	lsrs	r3, r3, #5
 8000618:	2001      	movs	r0, #1
 800061a:	fa00 f202 	lsl.w	r2, r0, r2
 800061e:	3320      	adds	r3, #32
 8000620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000624:	f3bf 8f4f 	dsb	sy
}
 8000628:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800062a:	f3bf 8f6f 	isb	sy
}
 800062e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000e100 	.word	0xe000e100

08000640 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	2b00      	cmp	r3, #0
 8000650:	db0c      	blt.n	800066c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	f003 021f 	and.w	r2, r3, #31
 8000658:	4907      	ldr	r1, [pc, #28]	@ (8000678 <__NVIC_ClearPendingIRQ+0x38>)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	095b      	lsrs	r3, r3, #5
 8000660:	2001      	movs	r0, #1
 8000662:	fa00 f202 	lsl.w	r2, r0, r2
 8000666:	3360      	adds	r3, #96	@ 0x60
 8000668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000e100 	.word	0xe000e100

0800067c <ApplicationInit>:

#if COMPILE_TOUCH_FUNCTIONS == 1
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000680:	f002 fde8 	bl	8003254 <initialise_monitor_handles>
    buttonInit();
 8000684:	f000 f816 	bl	80006b4 <buttonInit>

    LTCD__Init();
 8000688:	f000 fd10 	bl	80010ac <LTCD__Init>
    LTCD_Layer_Init(0);
 800068c:	2000      	movs	r0, #0
 800068e:	f000 fccd 	bl	800102c <LTCD_Layer_Init>
    LCD_Clear(0, LCD_COLOR_WHITE);
 8000692:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000696:	2000      	movs	r0, #0
 8000698:	f000 feb6 	bl	8001408 <LCD_Clear>
    LCD_Connect_Four_Init();
 800069c:	f000 ff14 	bl	80014c8 <LCD_Connect_Four_Init>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80006a0:	f000 fefa 	bl	8001498 <InitializeLCDTouch>

	// This is the orientation for the board to be directly up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80006a4:	4b02      	ldr	r3, [pc, #8]	@ (80006b0 <ApplicationInit+0x34>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000008c 	.word	0x2000008c

080006b4 <buttonInit>:

void buttonInit(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

	#if COMPILE_BUTTON_INTERRUPTS == 1
	button_Interrupt_Init();
 80006b8:	f000 f8f4 	bl	80008a4 <button_Interrupt_Init>
	#else
	button_Init();
	#endif
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <checkIfTouchScreenPressed>:

#if COMPILE_TOUCH_FUNCTIONS == 1

uint8_t checkIfTouchScreenPressed(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

	if(returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80006c4:	480f      	ldr	r0, [pc, #60]	@ (8000704 <checkIfTouchScreenPressed+0x44>)
 80006c6:	f000 fef2 	bl	80014ae <returnTouchStateAndLocation>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d116      	bne.n	80006fe <checkIfTouchScreenPressed+0x3e>
		/* The coordinates are inverted from the StaticTouchData struct,
		 * So we need to un-invert them when we pass it into our function to check which game button
		 * is pressed. In this case, the buttons are fairly centered so I ignored inverting the x-coordinate.
		 * */
		gameSelect = returnGameButtonPressed(StaticTouchData.x, LCD_PIXEL_HEIGHT - StaticTouchData.y);
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <checkIfTouchScreenPressed+0x44>)
 80006d2:	881a      	ldrh	r2, [r3, #0]
 80006d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <checkIfTouchScreenPressed+0x44>)
 80006d6:	885b      	ldrh	r3, [r3, #2]
 80006d8:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80006dc:	b29b      	uxth	r3, r3
 80006de:	4619      	mov	r1, r3
 80006e0:	4610      	mov	r0, r2
 80006e2:	f000 f813 	bl	800070c <returnGameButtonPressed>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <checkIfTouchScreenPressed+0x48>)
 80006ec:	701a      	strb	r2, [r3, #0]
		if(gameSelect) {
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <checkIfTouchScreenPressed+0x48>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d003      	beq.n	80006fe <checkIfTouchScreenPressed+0x3e>
			triggerGameButtonResponse();
 80006f6:	f000 f84f 	bl	8000798 <triggerGameButtonResponse>
			return TRUE;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e000      	b.n	8000700 <checkIfTouchScreenPressed+0x40>
		}
	}
	return FALSE;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	bd80      	pop	{r7, pc}
 8000704:	2000008c 	.word	0x2000008c
 8000708:	20000088 	.word	0x20000088

0800070c <returnGameButtonPressed>:

uint8_t returnGameButtonPressed(uint16_t xInput, uint16_t yInput) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af02      	add	r7, sp, #8
 8000712:	4603      	mov	r3, r0
 8000714:	460a      	mov	r2, r1
 8000716:	80fb      	strh	r3, [r7, #6]
 8000718:	4613      	mov	r3, r2
 800071a:	80bb      	strh	r3, [r7, #4]

	if((xInput >= BUTTON_ONE_X_LOWER && xInput <= BUTTON_ONE_X_UPPER) && (yInput >= BUTTON_ONE_Y_LOWER && yInput <= BUTTON_ONE_Y_UPPER)) {
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	2b40      	cmp	r3, #64	@ 0x40
 8000720:	d913      	bls.n	800074a <returnGameButtonPressed+0x3e>
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	2baf      	cmp	r3, #175	@ 0xaf
 8000726:	d810      	bhi.n	800074a <returnGameButtonPressed+0x3e>
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	2b77      	cmp	r3, #119	@ 0x77
 800072c:	d90d      	bls.n	800074a <returnGameButtonPressed+0x3e>
 800072e:	88bb      	ldrh	r3, [r7, #4]
 8000730:	2baa      	cmp	r3, #170	@ 0xaa
 8000732:	d80a      	bhi.n	800074a <returnGameButtonPressed+0x3e>
		LCD_Draw_Game_Button(BUTTON_ONE_X_LOWER, BUTTON_ONE_X_UPPER - BUTTON_ONE_X_LOWER, BUTTON_ONE_Y_LOWER, BUTTON_ONE_Y_UPPER - BUTTON_ONE_Y_LOWER, LCD_COLOR_GREEN);
 8000734:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2332      	movs	r3, #50	@ 0x32
 800073c:	2278      	movs	r2, #120	@ 0x78
 800073e:	216e      	movs	r1, #110	@ 0x6e
 8000740:	2041      	movs	r0, #65	@ 0x41
 8000742:	f000 fecd 	bl	80014e0 <LCD_Draw_Game_Button>
		return AI_MODE_SELECT;
 8000746:	2301      	movs	r3, #1
 8000748:	e01f      	b.n	800078a <returnGameButtonPressed+0x7e>
	}

	/* Handles both selecting "Two Player Mode" and the "Play Again" button */
	else if((xInput >= BUTTON_TWO_X_LOWER && xInput <= BUTTON_TWO_X_UPPER) && (yInput >= BUTTON_TWO_Y_LOWER && yInput <= BUTTON_TWO_Y_UPPER)) {
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	2b40      	cmp	r3, #64	@ 0x40
 800074e:	d91b      	bls.n	8000788 <returnGameButtonPressed+0x7c>
 8000750:	88fb      	ldrh	r3, [r7, #6]
 8000752:	2baf      	cmp	r3, #175	@ 0xaf
 8000754:	d818      	bhi.n	8000788 <returnGameButtonPressed+0x7c>
 8000756:	88bb      	ldrh	r3, [r7, #4]
 8000758:	2bd1      	cmp	r3, #209	@ 0xd1
 800075a:	d915      	bls.n	8000788 <returnGameButtonPressed+0x7c>
 800075c:	88bb      	ldrh	r3, [r7, #4]
 800075e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8000762:	d811      	bhi.n	8000788 <returnGameButtonPressed+0x7c>
		LCD_Draw_Game_Button(BUTTON_TWO_X_LOWER, BUTTON_TWO_X_UPPER - BUTTON_TWO_X_LOWER, BUTTON_TWO_Y_LOWER, BUTTON_TWO_Y_UPPER - BUTTON_TWO_Y_LOWER, LCD_COLOR_GREEN);
 8000764:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2332      	movs	r3, #50	@ 0x32
 800076c:	22d2      	movs	r2, #210	@ 0xd2
 800076e:	216e      	movs	r1, #110	@ 0x6e
 8000770:	2041      	movs	r0, #65	@ 0x41
 8000772:	f000 feb5 	bl	80014e0 <LCD_Draw_Game_Button>
		if(!gameSelect) {
 8000776:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <returnGameButtonPressed+0x88>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <returnGameButtonPressed+0x76>
			return TWO_PLAYER_SELECT;
 800077e:	2302      	movs	r3, #2
 8000780:	e003      	b.n	800078a <returnGameButtonPressed+0x7e>
		}
		else {
			return gameSelect;
 8000782:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <returnGameButtonPressed+0x88>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	e000      	b.n	800078a <returnGameButtonPressed+0x7e>
		}
	}

	return NO_MODE_SELECTED;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000088 	.word	0x20000088

08000798 <triggerGameButtonResponse>:

void triggerGameButtonResponse() {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

	setGameMode(gameSelect);
 800079c:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <triggerGameButtonResponse+0x28>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f8d1 	bl	8000948 <setGameMode>
	HAL_Delay(750);
 80007a6:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80007aa:	f002 fe3f 	bl	800342c <HAL_Delay>
    LCD_Clear(0, LCD_COLOR_WHITE);
 80007ae:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 fe28 	bl	8001408 <LCD_Clear>
	startNewGame();
 80007b8:	f000 fa1a 	bl	8000bf0 <startNewGame>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000088 	.word	0x20000088

080007c4 <waitForUserResponse>:

#endif // COMPILE_TOUCH_FUNCTIONS

/* Game Functions */

void waitForUserResponse(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	#if COMPILE_TOUCH_FUNCTIONS == 1
	while(!checkIfTouchScreenPressed()) {
 80007c8:	bf00      	nop
 80007ca:	f7ff ff79 	bl	80006c0 <checkIfTouchScreenPressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d0fa      	beq.n	80007ca <waitForUserResponse+0x6>
		;
	}
	#endif
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}

080007da <LCD_Display_Start_Screen>:

void LCD_Display_Start_Screen(void) {
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_WHITE);
 80007de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80007e2:	2000      	movs	r0, #0
 80007e4:	f000 fe10 	bl	8001408 <LCD_Clear>
	displayStartScreen();
 80007e8:	f000 ff03 	bl	80015f2 <displayStartScreen>
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <LCD_Display_Stats_Screen>:

void LCD_Display_Stats_Screen(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

    HAL_Delay(750);
 80007f4:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80007f8:	f002 fe18 	bl	800342c <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 80007fc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000800:	2000      	movs	r0, #0
 8000802:	f000 fe01 	bl	8001408 <LCD_Clear>
	displayStatsScreen();
 8000806:	f000 ff9b 	bl	8001740 <displayStatsScreen>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <displayMenu>:

void displayMenu(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

	if(!gameSelect) {
 8000814:	4b05      	ldr	r3, [pc, #20]	@ (800082c <displayMenu+0x1c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d102      	bne.n	8000822 <displayMenu+0x12>
		LCD_Display_Start_Screen();
 800081c:	f7ff ffdd 	bl	80007da <LCD_Display_Start_Screen>
	}
	else {
		LCD_Display_Stats_Screen();
	}
}
 8000820:	e001      	b.n	8000826 <displayMenu+0x16>
		LCD_Display_Stats_Screen();
 8000822:	f7ff ffe5 	bl	80007f0 <LCD_Display_Stats_Screen>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000088 	.word	0x20000088

08000830 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	__NVIC_DisableIRQ(BUTTON_IRQ_NUM);
 8000834:	2006      	movs	r0, #6
 8000836:	f7ff fedf 	bl	80005f8 <__NVIC_DisableIRQ>
	/* Drop Coin. The offset accounts for the logic used to draw the coin on the LCD display, which does not match
	 * the indices of the matrix that holds the data for the game board. */
	if(checkIfCanPlaceCoin(gameCoin.xPos - COIN_GAME_LOGIC_OFFSET)) {
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <EXTI0_IRQHandler+0x44>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	3b01      	subs	r3, #1
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f000 f909 	bl	8000a5c <checkIfCanPlaceCoin>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d006      	beq.n	800085e <EXTI0_IRQHandler+0x2e>
		__NVIC_ClearPendingIRQ(BUTTON_IRQ_NUM);
 8000850:	2006      	movs	r0, #6
 8000852:	f7ff fef5 	bl	8000640 <__NVIC_ClearPendingIRQ>
		clearPendingEXTI(BUTTON_PIN_NUM);
 8000856:	2001      	movs	r0, #1
 8000858:	f000 faf8 	bl	8000e4c <clearPendingEXTI>
	else {
		__NVIC_ClearPendingIRQ(BUTTON_IRQ_NUM);
		clearPendingEXTI(BUTTON_PIN_NUM);
		__NVIC_EnableIRQ(BUTTON_IRQ_NUM);
	}
}
 800085c:	e008      	b.n	8000870 <EXTI0_IRQHandler+0x40>
		__NVIC_ClearPendingIRQ(BUTTON_IRQ_NUM);
 800085e:	2006      	movs	r0, #6
 8000860:	f7ff feee 	bl	8000640 <__NVIC_ClearPendingIRQ>
		clearPendingEXTI(BUTTON_PIN_NUM);
 8000864:	2001      	movs	r0, #1
 8000866:	f000 faf1 	bl	8000e4c <clearPendingEXTI>
		__NVIC_EnableIRQ(BUTTON_IRQ_NUM);
 800086a:	2006      	movs	r0, #6
 800086c:	f7ff fea6 	bl	80005bc <__NVIC_EnableIRQ>
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000d4 	.word	0x200000d4

08000878 <TIM2_IRQHandler>:

void TIM2_IRQHandler (void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

	__NVIC_DisableIRQ(TIM2_IRQ_NUM);
 800087c:	201c      	movs	r0, #28
 800087e:	f7ff febb 	bl	80005f8 <__NVIC_DisableIRQ>
	numSecondsElapsedInGame++;
 8000882:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <TIM2_IRQHandler+0x28>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	4a05      	ldr	r2, [pc, #20]	@ (80008a0 <TIM2_IRQHandler+0x28>)
 800088a:	6013      	str	r3, [r2, #0]
	__NVIC_ClearPendingIRQ(TIM2_IRQ_NUM);
 800088c:	201c      	movs	r0, #28
 800088e:	f7ff fed7 	bl	8000640 <__NVIC_ClearPendingIRQ>
	clearPendingTIM2();
 8000892:	f000 faf3 	bl	8000e7c <clearPendingTIM2>
	__NVIC_EnableIRQ(TIM2_IRQ_NUM);
 8000896:	201c      	movs	r0, #28
 8000898:	f7ff fe90 	bl	80005bc <__NVIC_EnableIRQ>
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000d0 	.word	0x200000d0

080008a4 <button_Interrupt_Init>:
#include "Button_Driver.h"

#if COMPILE_BUTTON_INTERRUPTS == 1
void button_Interrupt_Init() {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef buttonConfig;
	buttonConfig.Mode = GPIO_MODE_IT_RISING;
 80008aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ae:	613b      	str	r3, [r7, #16]
	buttonConfig.Pin = BUTTON_PIN_NUM;
 80008b0:	2301      	movs	r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
	buttonConfig.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <button_Interrupt_Init+0x60>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c0:	4a10      	ldr	r2, [pc, #64]	@ (8000904 <button_Interrupt_Init+0x60>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <button_Interrupt_Init+0x60>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000904 <button_Interrupt_Init+0x60>)
 80008da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008dc:	4a09      	ldr	r2, [pc, #36]	@ (8000904 <button_Interrupt_Init+0x60>)
 80008de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e4:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <button_Interrupt_Init+0x60>)
 80008e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &buttonConfig);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	4804      	ldr	r0, [pc, #16]	@ (8000908 <button_Interrupt_Init+0x64>)
 80008f8:	f002 fea2 	bl	8003640 <HAL_GPIO_Init>

}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	40020000 	.word	0x40020000

0800090c <__NVIC_EnableIRQ>:
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db0b      	blt.n	8000936 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 021f 	and.w	r2, r3, #31
 8000924:	4907      	ldr	r1, [pc, #28]	@ (8000944 <__NVIC_EnableIRQ+0x38>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	2001      	movs	r0, #1
 800092e:	fa00 f202 	lsl.w	r2, r0, r2
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000e100 	.word	0xe000e100

08000948 <setGameMode>:
uint8_t redWinCount = 0;
uint32_t numSecondsElapsedInGame = 0;
coin_t gameCoin;


void setGameMode(uint8_t mode) {
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
	sessionGameMode = mode;
 8000952:	4a04      	ldr	r2, [pc, #16]	@ (8000964 <setGameMode+0x1c>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	7013      	strb	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	20000094 	.word	0x20000094

08000968 <resetBoard>:


void resetBoard(void) {
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	memset(gameBoard, 0, sizeof(gameBoard));
 800096c:	222a      	movs	r2, #42	@ 0x2a
 800096e:	2100      	movs	r1, #0
 8000970:	4802      	ldr	r0, [pc, #8]	@ (800097c <resetBoard+0x14>)
 8000972:	f006 f965 	bl	8006c40 <memset>
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000098 	.word	0x20000098

08000980 <incrementWinCount>:


void incrementWinCount(void) {
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

	if(playerTurn == YELLOW) {
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <incrementWinCount+0x38>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d106      	bne.n	800099a <incrementWinCount+0x1a>
		yellowWinCount++;
 800098c:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <incrementWinCount+0x3c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <incrementWinCount+0x3c>)
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	e005      	b.n	80009a6 <incrementWinCount+0x26>
	}
	else {
		redWinCount++;
 800099a:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <incrementWinCount+0x40>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	3301      	adds	r3, #1
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <incrementWinCount+0x40>)
 80009a4:	701a      	strb	r2, [r3, #0]
	}
	gameOver = TRUE;
 80009a6:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <incrementWinCount+0x44>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000095 	.word	0x20000095
 80009bc:	200000cc 	.word	0x200000cc
 80009c0:	200000cd 	.word	0x200000cd
 80009c4:	20000096 	.word	0x20000096

080009c8 <placeCoin>:


void placeCoin(uint8_t row, uint8_t column, uint8_t player, uint16_t color) {
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4604      	mov	r4, r0
 80009d0:	4608      	mov	r0, r1
 80009d2:	4611      	mov	r1, r2
 80009d4:	461a      	mov	r2, r3
 80009d6:	4623      	mov	r3, r4
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	4603      	mov	r3, r0
 80009dc:	71bb      	strb	r3, [r7, #6]
 80009de:	460b      	mov	r3, r1
 80009e0:	717b      	strb	r3, [r7, #5]
 80009e2:	4613      	mov	r3, r2
 80009e4:	807b      	strh	r3, [r7, #2]
	gameBoard[row][column] = player;
 80009e6:	79fa      	ldrb	r2, [r7, #7]
 80009e8:	79b9      	ldrb	r1, [r7, #6]
 80009ea:	481a      	ldr	r0, [pc, #104]	@ (8000a54 <placeCoin+0x8c>)
 80009ec:	4613      	mov	r3, r2
 80009ee:	00db      	lsls	r3, r3, #3
 80009f0:	1a9b      	subs	r3, r3, r2
 80009f2:	4403      	add	r3, r0
 80009f4:	440b      	add	r3, r1
 80009f6:	797a      	ldrb	r2, [r7, #5]
 80009f8:	701a      	strb	r2, [r3, #0]
	LCD_Display_Coin((column + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, LCD_PIXEL_HEIGHT - BORDER_Y_OFFSET - (row + COIN_GAME_LOGIC_OFFSET) * BOARD_Y_OFFSET, color);
 80009fa:	79bb      	ldrb	r3, [r7, #6]
 80009fc:	3301      	adds	r3, #1
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	461a      	mov	r2, r3
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	b298      	uxth	r0, r3
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	011b      	lsls	r3, r3, #4
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	f203 133b 	addw	r3, r3, #315	@ 0x13b
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	887a      	ldrh	r2, [r7, #2]
 8000a22:	4619      	mov	r1, r3
 8000a24:	f000 fdd2 	bl	80015cc <LCD_Display_Coin>
	checkWinner(row, column, player);
 8000a28:	797a      	ldrb	r2, [r7, #5]
 8000a2a:	79b9      	ldrb	r1, [r7, #6]
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f93a 	bl	8000ca8 <checkWinner>
	playerTurn = (playerTurn + 1) % 2;
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <placeCoin+0x90>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	bfb8      	it	lt
 8000a42:	425b      	neglt	r3, r3
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b04      	ldr	r3, [pc, #16]	@ (8000a58 <placeCoin+0x90>)
 8000a48:	701a      	strb	r2, [r3, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd90      	pop	{r4, r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000098 	.word	0x20000098
 8000a58:	20000095 	.word	0x20000095

08000a5c <checkIfCanPlaceCoin>:


uint8_t checkIfCanPlaceCoin(uint8_t col) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]

	for(int row = 0; row < CONNECT_FOUR_ROW_COUNT; row++) {
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	e031      	b.n	8000ad0 <checkIfCanPlaceCoin+0x74>
		if(!gameBoard[row][col]) {
 8000a6c:	79f9      	ldrb	r1, [r7, #7]
 8000a6e:	481c      	ldr	r0, [pc, #112]	@ (8000ae0 <checkIfCanPlaceCoin+0x84>)
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	4613      	mov	r3, r2
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	1a9b      	subs	r3, r3, r2
 8000a78:	4403      	add	r3, r0
 8000a7a:	440b      	add	r3, r1
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d123      	bne.n	8000aca <checkIfCanPlaceCoin+0x6e>
			clearFloatingCoin(gameCoin.xPos * BOARD_X_OFFSET, gameCoin.yPos);
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <checkIfCanPlaceCoin+0x88>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	4a14      	ldr	r2, [pc, #80]	@ (8000ae4 <checkIfCanPlaceCoin+0x88>)
 8000a92:	8852      	ldrh	r2, [r2, #2]
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fe3f 	bl	800171a <clearFloatingCoin>
			if(playerTurn == 0) {
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <checkIfCanPlaceCoin+0x8c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d108      	bne.n	8000ab6 <checkIfCanPlaceCoin+0x5a>
				placeCoin(row, col, 'Y', LCD_COLOR_YELLOW);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	b2d8      	uxtb	r0, r3
 8000aa8:	79f9      	ldrb	r1, [r7, #7]
 8000aaa:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000aae:	2259      	movs	r2, #89	@ 0x59
 8000ab0:	f7ff ff8a 	bl	80009c8 <placeCoin>
 8000ab4:	e007      	b.n	8000ac6 <checkIfCanPlaceCoin+0x6a>
			}
			else {
				placeCoin(row, col, 'R', LCD_COLOR_RED);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	b2d8      	uxtb	r0, r3
 8000aba:	79f9      	ldrb	r1, [r7, #7]
 8000abc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ac0:	2252      	movs	r2, #82	@ 0x52
 8000ac2:	f7ff ff81 	bl	80009c8 <placeCoin>
			}
			return TRUE;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e006      	b.n	8000ad8 <checkIfCanPlaceCoin+0x7c>
	for(int row = 0; row < CONNECT_FOUR_ROW_COUNT; row++) {
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	3301      	adds	r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2b05      	cmp	r3, #5
 8000ad4:	ddca      	ble.n	8000a6c <checkIfCanPlaceCoin+0x10>
		}
	}
	return FALSE;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000098 	.word	0x20000098
 8000ae4:	200000d4 	.word	0x200000d4
 8000ae8:	20000095 	.word	0x20000095

08000aec <moveCoin>:


void moveCoin(uint8_t col) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	clearFloatingCoin(gameCoin.xPos * BOARD_X_OFFSET, gameCoin.yPos);
 8000af6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b64 <moveCoin+0x78>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	4a17      	ldr	r2, [pc, #92]	@ (8000b64 <moveCoin+0x78>)
 8000b06:	8852      	ldrh	r2, [r2, #2]
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 fe05 	bl	800171a <clearFloatingCoin>
	gameCoin.xPos = col;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <moveCoin+0x78>)
 8000b16:	801a      	strh	r2, [r3, #0]

	if(playerTurn == YELLOW) {
 8000b18:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <moveCoin+0x7c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10e      	bne.n	8000b3e <moveCoin+0x52>
		LCD_Display_Coin(gameCoin.xPos * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_YELLOW);
 8000b20:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <moveCoin+0x78>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000b64 <moveCoin+0x78>)
 8000b30:	8851      	ldrh	r1, [r2, #2]
 8000b32:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 fd48 	bl	80015cc <LCD_Display_Coin>
	}
	else {
		LCD_Display_Coin(gameCoin.xPos * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_RED);
	}
}
 8000b3c:	e00d      	b.n	8000b5a <moveCoin+0x6e>
		LCD_Display_Coin(gameCoin.xPos * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_RED);
 8000b3e:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <moveCoin+0x78>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	0112      	lsls	r2, r2, #4
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <moveCoin+0x78>)
 8000b4e:	8851      	ldrh	r1, [r2, #2]
 8000b50:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 fd39 	bl	80015cc <LCD_Display_Coin>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000d4 	.word	0x200000d4
 8000b68:	20000095 	.word	0x20000095

08000b6c <checkIfUserMovedCoin>:


void checkIfUserMovedCoin(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	if(returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000b70:	4815      	ldr	r0, [pc, #84]	@ (8000bc8 <checkIfUserMovedCoin+0x5c>)
 8000b72:	f000 fc9c 	bl	80014ae <returnTouchStateAndLocation>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d123      	bne.n	8000bc4 <checkIfUserMovedCoin+0x58>
		HAL_Delay(200);
 8000b7c:	20c8      	movs	r0, #200	@ 0xc8
 8000b7e:	f002 fc55 	bl	800342c <HAL_Delay>
		/* Checks which side of the screen is pressed, as well as if we are still
		 * within the bounds of the board.
		 * */
		if(StaticTouchData.x > LCD_PIXEL_WIDTH / 2 && gameCoin.xPos > 1) {
 8000b82:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <checkIfUserMovedCoin+0x5c>)
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	2b78      	cmp	r3, #120	@ 0x78
 8000b88:	d90c      	bls.n	8000ba4 <checkIfUserMovedCoin+0x38>
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <checkIfUserMovedCoin+0x60>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d908      	bls.n	8000ba4 <checkIfUserMovedCoin+0x38>
			moveCoin(gameCoin.xPos - 1);
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <checkIfUserMovedCoin+0x60>)
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ffa5 	bl	8000aec <moveCoin>
		}
		else if(StaticTouchData.x < LCD_PIXEL_WIDTH / 2 && gameCoin.xPos < 7) {
			moveCoin(gameCoin.xPos + 1);
		}
	}
}
 8000ba2:	e00f      	b.n	8000bc4 <checkIfUserMovedCoin+0x58>
		else if(StaticTouchData.x < LCD_PIXEL_WIDTH / 2 && gameCoin.xPos < 7) {
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <checkIfUserMovedCoin+0x5c>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	2b77      	cmp	r3, #119	@ 0x77
 8000baa:	d80b      	bhi.n	8000bc4 <checkIfUserMovedCoin+0x58>
 8000bac:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <checkIfUserMovedCoin+0x60>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	2b06      	cmp	r3, #6
 8000bb2:	d807      	bhi.n	8000bc4 <checkIfUserMovedCoin+0x58>
			moveCoin(gameCoin.xPos + 1);
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <checkIfUserMovedCoin+0x60>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	3301      	adds	r3, #1
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ff94 	bl	8000aec <moveCoin>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200000c4 	.word	0x200000c4
 8000bcc:	200000d4 	.word	0x200000d4

08000bd0 <resetCoinPos>:



void resetCoinPos(void) {
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
	gameCoin.xPos = COIN_DEFAULT_X;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <resetCoinPos+0x1c>)
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	801a      	strh	r2, [r3, #0]
	gameCoin.yPos = COIN_DEFAULT_Y;
 8000bda:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <resetCoinPos+0x1c>)
 8000bdc:	2228      	movs	r2, #40	@ 0x28
 8000bde:	805a      	strh	r2, [r3, #2]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	200000d4 	.word	0x200000d4

08000bf0 <startNewGame>:


void startNewGame(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	resetBoard();
 8000bf4:	f7ff feb8 	bl	8000968 <resetBoard>
	gameOver = FALSE;
 8000bf8:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <startNewGame+0x1c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
    numSecondsElapsedInGame = 0;
 8000bfe:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <startNewGame+0x20>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
	playGame();
 8000c04:	f000 f90a 	bl	8000e1c <playGame>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000096 	.word	0x20000096
 8000c10:	200000d0 	.word	0x200000d0

08000c14 <playTurn>:


void playTurn(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	resetCoinPos();
 8000c18:	f7ff ffda 	bl	8000bd0 <resetCoinPos>
	if(playerTurn == YELLOW) {
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c9c <playTurn+0x88>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d118      	bne.n	8000c56 <playTurn+0x42>
		/* Wait for touch screen input to select where coin will drop.
		 * Between each input, redraw coin in position.
		 * When button is pressed, coin will drop. This means we enable interrupts
		 * for the button in this loop, then disable them if a coin can be placed.
		 * */
		LCD_Display_Coin(gameCoin.xPos * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_YELLOW);
 8000c24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <playTurn+0x8c>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca0 <playTurn+0x8c>)
 8000c34:	8851      	ldrh	r1, [r2, #2]
 8000c36:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fcc6 	bl	80015cc <LCD_Display_Coin>
		__NVIC_EnableIRQ(EXTI0_IRQn);
 8000c40:	2006      	movs	r0, #6
 8000c42:	f7ff fe63 	bl	800090c <__NVIC_EnableIRQ>
		while(playerTurn == YELLOW) {
 8000c46:	e001      	b.n	8000c4c <playTurn+0x38>
			checkIfUserMovedCoin();
 8000c48:	f7ff ff90 	bl	8000b6c <checkIfUserMovedCoin>
		while(playerTurn == YELLOW) {
 8000c4c:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <playTurn+0x88>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0f9      	beq.n	8000c48 <playTurn+0x34>
			while(playerTurn == RED) {
				checkIfUserMovedCoin();
			}
		}
	}
}
 8000c54:	e01f      	b.n	8000c96 <playTurn+0x82>
		if(sessionGameMode == AI_MODE_SELECT) {
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <playTurn+0x90>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d01b      	beq.n	8000c96 <playTurn+0x82>
		else if(sessionGameMode == TWO_PLAYER_SELECT){
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <playTurn+0x90>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d117      	bne.n	8000c96 <playTurn+0x82>
			LCD_Display_Coin(gameCoin.xPos * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_RED);
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <playTurn+0x8c>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <playTurn+0x8c>)
 8000c76:	8851      	ldrh	r1, [r2, #2]
 8000c78:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fca5 	bl	80015cc <LCD_Display_Coin>
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8000c82:	2006      	movs	r0, #6
 8000c84:	f7ff fe42 	bl	800090c <__NVIC_EnableIRQ>
			while(playerTurn == RED) {
 8000c88:	e001      	b.n	8000c8e <playTurn+0x7a>
				checkIfUserMovedCoin();
 8000c8a:	f7ff ff6f 	bl	8000b6c <checkIfUserMovedCoin>
			while(playerTurn == RED) {
 8000c8e:	4b03      	ldr	r3, [pc, #12]	@ (8000c9c <playTurn+0x88>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <playTurn+0x76>
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000095 	.word	0x20000095
 8000ca0:	200000d4 	.word	0x200000d4
 8000ca4:	20000094 	.word	0x20000094

08000ca8 <checkWinner>:
/* First check if theres a win condition by checking the last piece placed.
 * If no win condition, check for the case that a draw has occured,
 * (all pieces in column are full).
 * Otherwise, return false.
 */
void checkWinner(uint8_t row, uint8_t column, uint8_t player) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	71bb      	strb	r3, [r7, #6]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	717b      	strb	r3, [r7, #5]

	/* Horizontal check, left and right of coin placement. */
	if(checkWinnerByDirection(row, column, 0, 1, player) || checkWinnerByDirection(row, column, 0, -1, player)) return;
 8000cba:	79b9      	ldrb	r1, [r7, #6]
 8000cbc:	79f8      	ldrb	r0, [r7, #7]
 8000cbe:	797b      	ldrb	r3, [r7, #5]
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f000 f869 	bl	8000d9c <checkWinnerByDirection>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d155      	bne.n	8000d7c <checkWinner+0xd4>
 8000cd0:	79b9      	ldrb	r1, [r7, #6]
 8000cd2:	79f8      	ldrb	r0, [r7, #7]
 8000cd4:	797b      	ldrb	r3, [r7, #5]
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	23ff      	movs	r3, #255	@ 0xff
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f000 f85e 	bl	8000d9c <checkWinnerByDirection>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14a      	bne.n	8000d7c <checkWinner+0xd4>

	/* Vertical check */
	if(checkWinnerByDirection(row, column, -1, 0, player)) return;
 8000ce6:	79b9      	ldrb	r1, [r7, #6]
 8000ce8:	79f8      	ldrb	r0, [r7, #7]
 8000cea:	797b      	ldrb	r3, [r7, #5]
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	22ff      	movs	r2, #255	@ 0xff
 8000cf2:	f000 f853 	bl	8000d9c <checkWinnerByDirection>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d141      	bne.n	8000d80 <checkWinner+0xd8>

	/* Descending Diagonal check, from bottom and top of diagonal. */
	if(checkWinnerByDirection(row, column, 1, -1, player) || checkWinnerByDirection(row, column, -1, 1, player)) return;
 8000cfc:	79b9      	ldrb	r1, [r7, #6]
 8000cfe:	79f8      	ldrb	r0, [r7, #7]
 8000d00:	797b      	ldrb	r3, [r7, #5]
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	23ff      	movs	r3, #255	@ 0xff
 8000d06:	2201      	movs	r2, #1
 8000d08:	f000 f848 	bl	8000d9c <checkWinnerByDirection>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d138      	bne.n	8000d84 <checkWinner+0xdc>
 8000d12:	79b9      	ldrb	r1, [r7, #6]
 8000d14:	79f8      	ldrb	r0, [r7, #7]
 8000d16:	797b      	ldrb	r3, [r7, #5]
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	22ff      	movs	r2, #255	@ 0xff
 8000d1e:	f000 f83d 	bl	8000d9c <checkWinnerByDirection>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d12d      	bne.n	8000d84 <checkWinner+0xdc>

	/* Ascending Diagonal check, from bottom and top of diagonal. */
	if(checkWinnerByDirection(row, column, 1, 1, player) || checkWinnerByDirection(row, column, -1, -1, player)) return;
 8000d28:	79b9      	ldrb	r1, [r7, #6]
 8000d2a:	79f8      	ldrb	r0, [r7, #7]
 8000d2c:	797b      	ldrb	r3, [r7, #5]
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	2301      	movs	r3, #1
 8000d32:	2201      	movs	r2, #1
 8000d34:	f000 f832 	bl	8000d9c <checkWinnerByDirection>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d124      	bne.n	8000d88 <checkWinner+0xe0>
 8000d3e:	79b9      	ldrb	r1, [r7, #6]
 8000d40:	79f8      	ldrb	r0, [r7, #7]
 8000d42:	797b      	ldrb	r3, [r7, #5]
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	23ff      	movs	r3, #255	@ 0xff
 8000d48:	22ff      	movs	r2, #255	@ 0xff
 8000d4a:	f000 f827 	bl	8000d9c <checkWinnerByDirection>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d119      	bne.n	8000d88 <checkWinner+0xe0>

	/* Tie condition check */
	for(uint8_t col = 0; col < CONNECT_FOUR_COLUMN_COUNT; col++) {
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e009      	b.n	8000d6e <checkWinner+0xc6>
		if(!gameBoard[CONNECT_FOUR_ROW_COUNT - COIN_GAME_LOGIC_OFFSET][col]) {
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d94 <checkWinner+0xec>)
 8000d5e:	4413      	add	r3, r2
 8000d60:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d011      	beq.n	8000d8c <checkWinner+0xe4>
	for(uint8_t col = 0; col < CONNECT_FOUR_COLUMN_COUNT; col++) {
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	73fb      	strb	r3, [r7, #15]
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	2b06      	cmp	r3, #6
 8000d72:	d9f2      	bls.n	8000d5a <checkWinner+0xb2>
			return;
		}
	}
	gameOver = TRUE;
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <checkWinner+0xf0>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
	return;
 8000d7a:	e008      	b.n	8000d8e <checkWinner+0xe6>
	if(checkWinnerByDirection(row, column, 0, 1, player) || checkWinnerByDirection(row, column, 0, -1, player)) return;
 8000d7c:	bf00      	nop
 8000d7e:	e006      	b.n	8000d8e <checkWinner+0xe6>
	if(checkWinnerByDirection(row, column, -1, 0, player)) return;
 8000d80:	bf00      	nop
 8000d82:	e004      	b.n	8000d8e <checkWinner+0xe6>
	if(checkWinnerByDirection(row, column, 1, -1, player) || checkWinnerByDirection(row, column, -1, 1, player)) return;
 8000d84:	bf00      	nop
 8000d86:	e002      	b.n	8000d8e <checkWinner+0xe6>
	if(checkWinnerByDirection(row, column, 1, 1, player) || checkWinnerByDirection(row, column, -1, -1, player)) return;
 8000d88:	bf00      	nop
 8000d8a:	e000      	b.n	8000d8e <checkWinner+0xe6>
			return;
 8000d8c:	bf00      	nop
}
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000098 	.word	0x20000098
 8000d98:	20000096 	.word	0x20000096

08000d9c <checkWinnerByDirection>:


uint8_t checkWinnerByDirection(uint8_t row, uint8_t col, uint8_t rowDelta, uint8_t colDelta, uint8_t player) {
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4604      	mov	r4, r0
 8000da4:	4608      	mov	r0, r1
 8000da6:	4611      	mov	r1, r2
 8000da8:	461a      	mov	r2, r3
 8000daa:	4623      	mov	r3, r4
 8000dac:	71fb      	strb	r3, [r7, #7]
 8000dae:	4603      	mov	r3, r0
 8000db0:	71bb      	strb	r3, [r7, #6]
 8000db2:	460b      	mov	r3, r1
 8000db4:	717b      	strb	r3, [r7, #5]
 8000db6:	4613      	mov	r3, r2
 8000db8:	713b      	strb	r3, [r7, #4]

    for (uint8_t count = 0; count < 4; count++) {
 8000dba:	2300      	movs	r3, #0
 8000dbc:	73fb      	strb	r3, [r7, #15]
 8000dbe:	e021      	b.n	8000e04 <checkWinnerByDirection+0x68>
        if (row < CONNECT_FOUR_ROW_COUNT && row >= 0 && col < CONNECT_FOUR_COLUMN_COUNT && col >= 0) {
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	2b05      	cmp	r3, #5
 8000dc4:	d811      	bhi.n	8000dea <checkWinnerByDirection+0x4e>
 8000dc6:	79bb      	ldrb	r3, [r7, #6]
 8000dc8:	2b06      	cmp	r3, #6
 8000dca:	d80e      	bhi.n	8000dea <checkWinnerByDirection+0x4e>
            if (gameBoard[row][col] != player) {
 8000dcc:	79fa      	ldrb	r2, [r7, #7]
 8000dce:	79b9      	ldrb	r1, [r7, #6]
 8000dd0:	4811      	ldr	r0, [pc, #68]	@ (8000e18 <checkWinnerByDirection+0x7c>)
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	4403      	add	r3, r0
 8000dda:	440b      	add	r3, r1
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d003      	beq.n	8000dee <checkWinnerByDirection+0x52>
                return FALSE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e012      	b.n	8000e10 <checkWinnerByDirection+0x74>
            }
        }
        else {
        	return FALSE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e010      	b.n	8000e10 <checkWinnerByDirection+0x74>
        }
        row += rowDelta;
 8000dee:	79fa      	ldrb	r2, [r7, #7]
 8000df0:	797b      	ldrb	r3, [r7, #5]
 8000df2:	4413      	add	r3, r2
 8000df4:	71fb      	strb	r3, [r7, #7]
        col += colDelta;
 8000df6:	79ba      	ldrb	r2, [r7, #6]
 8000df8:	793b      	ldrb	r3, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	71bb      	strb	r3, [r7, #6]
    for (uint8_t count = 0; count < 4; count++) {
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	3301      	adds	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d9da      	bls.n	8000dc0 <checkWinnerByDirection+0x24>
    }
    incrementWinCount();
 8000e0a:	f7ff fdb9 	bl	8000980 <incrementWinCount>
    return TRUE;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd90      	pop	{r4, r7, pc}
 8000e18:	20000098 	.word	0x20000098

08000e1c <playGame>:


void playGame(void) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	LCD_Draw_Board_Structure();
 8000e20:	f000 fb9d 	bl	800155e <LCD_Draw_Board_Structure>
    HAL_TIM_Base_Start_IT(&htim2);
 8000e24:	4807      	ldr	r0, [pc, #28]	@ (8000e44 <playGame+0x28>)
 8000e26:	f005 fbc1 	bl	80065ac <HAL_TIM_Base_Start_IT>
	while(!gameOver) {
 8000e2a:	e001      	b.n	8000e30 <playGame+0x14>
		playTurn();
 8000e2c:	f7ff fef2 	bl	8000c14 <playTurn>
	while(!gameOver) {
 8000e30:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <playGame+0x2c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0f9      	beq.n	8000e2c <playGame+0x10>
	}
    HAL_TIM_Base_Stop_IT(&htim2);
 8000e38:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <playGame+0x28>)
 8000e3a:	f005 fc27 	bl	800668c <HAL_TIM_Base_Stop_IT>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20025b7c 	.word	0x20025b7c
 8000e48:	20000096 	.word	0x20000096

08000e4c <clearPendingEXTI>:
	if(IRQNumber < 32) {
		NVIC->ICPR[0] = (1 << IRQNumber);
	}
}

void clearPendingEXTI(uint8_t pinNumber) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]

	EXTI->PR |= (1 << pinNumber);
 8000e56:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <clearPendingEXTI+0x2c>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	79fa      	ldrb	r2, [r7, #7]
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e62:	4611      	mov	r1, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <clearPendingEXTI+0x2c>)
 8000e66:	430b      	orrs	r3, r1
 8000e68:	6153      	str	r3, [r2, #20]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40013c00 	.word	0x40013c00

08000e7c <clearPendingTIM2>:

void clearPendingTIM2() {
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

	TIM2->SR &= ~(CLEAR_TIM << TIM_UIF_OFFSET);
 8000e80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e8a:	f023 0301 	bic.w	r3, r3, #1
 8000e8e:	6113      	str	r3, [r2, #16]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	@ 0x30
 8000ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
 8000ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	4a59      	ldr	r2, [pc, #356]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000eac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb2:	4b57      	ldr	r3, [pc, #348]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000eba:	61bb      	str	r3, [r7, #24]
 8000ebc:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	4b53      	ldr	r3, [pc, #332]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a52      	ldr	r2, [pc, #328]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b50      	ldr	r3, [pc, #320]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	4b4c      	ldr	r3, [pc, #304]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a4b      	ldr	r2, [pc, #300]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b49      	ldr	r3, [pc, #292]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b45      	ldr	r3, [pc, #276]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a44      	ldr	r2, [pc, #272]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b42      	ldr	r3, [pc, #264]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	4b3e      	ldr	r3, [pc, #248]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a3d      	ldr	r2, [pc, #244]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b3b      	ldr	r3, [pc, #236]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	4b37      	ldr	r3, [pc, #220]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a36      	ldr	r2, [pc, #216]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000f38:	f043 0320 	orr.w	r3, r3, #32
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b34      	ldr	r3, [pc, #208]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0320 	and.w	r3, r3, #32
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	4b30      	ldr	r3, [pc, #192]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a2f      	ldr	r2, [pc, #188]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <LCD_GPIO_Init+0x174>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000f66:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000f6a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000f74:	2302      	movs	r3, #2
 8000f76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000f78:	230e      	movs	r3, #14
 8000f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	4824      	ldr	r0, [pc, #144]	@ (8001014 <LCD_GPIO_Init+0x178>)
 8000f84:	f002 fb5c 	bl	8003640 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000f88:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000f8c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	4820      	ldr	r0, [pc, #128]	@ (8001018 <LCD_GPIO_Init+0x17c>)
 8000f96:	f002 fb53 	bl	8003640 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000f9a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000f9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	481d      	ldr	r0, [pc, #116]	@ (800101c <LCD_GPIO_Init+0x180>)
 8000fa8:	f002 fb4a 	bl	8003640 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000fac:	2348      	movs	r3, #72	@ 0x48
 8000fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	481a      	ldr	r0, [pc, #104]	@ (8001020 <LCD_GPIO_Init+0x184>)
 8000fb8:	f002 fb42 	bl	8003640 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000fbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4816      	ldr	r0, [pc, #88]	@ (8001024 <LCD_GPIO_Init+0x188>)
 8000fca:	f002 fb39 	bl	8003640 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000fce:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000fd2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4813      	ldr	r0, [pc, #76]	@ (8001028 <LCD_GPIO_Init+0x18c>)
 8000fdc:	f002 fb30 	bl	8003640 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000fe4:	2309      	movs	r3, #9
 8000fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	480a      	ldr	r0, [pc, #40]	@ (8001018 <LCD_GPIO_Init+0x17c>)
 8000ff0:	f002 fb26 	bl	8003640 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000ff4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ff8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4809      	ldr	r0, [pc, #36]	@ (8001028 <LCD_GPIO_Init+0x18c>)
 8001002:	f002 fb1d 	bl	8003640 <HAL_GPIO_Init>
}
 8001006:	bf00      	nop
 8001008:	3730      	adds	r7, #48	@ 0x30
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020400 	.word	0x40020400
 800101c:	40020800 	.word	0x40020800
 8001020:	40020c00 	.word	0x40020c00
 8001024:	40021400 	.word	0x40021400
 8001028:	40021800 	.word	0x40021800

0800102c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b090      	sub	sp, #64	@ 0x40
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800103a:	23f0      	movs	r3, #240	@ 0xf0
 800103c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001042:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001046:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001048:	2302      	movs	r3, #2
 800104a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 800104c:	23ff      	movs	r3, #255	@ 0xff
 800104e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001054:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001058:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800105a:	2305      	movs	r3, #5
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <LTCD_Layer_Init+0x78>)
 8001066:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001068:	23f0      	movs	r3, #240	@ 0xf0
 800106a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 800106c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001070:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001084:	79fa      	ldrb	r2, [r7, #7]
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4619      	mov	r1, r3
 800108c:	4806      	ldr	r0, [pc, #24]	@ (80010a8 <LTCD_Layer_Init+0x7c>)
 800108e:	f003 ff19 	bl	8004ec4 <HAL_LTDC_ConfigLayer>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001098:	f000 f9f8 	bl	800148c <LCD_Error_Handler>
	}
}
 800109c:	bf00      	nop
 800109e:	3740      	adds	r7, #64	@ 0x40
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200001bc 	.word	0x200001bc
 80010a8:	200000d8 	.word	0x200000d8

080010ac <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80010b0:	4b2a      	ldr	r3, [pc, #168]	@ (800115c <LTCD__Init+0xb0>)
 80010b2:	4a2b      	ldr	r2, [pc, #172]	@ (8001160 <LTCD__Init+0xb4>)
 80010b4:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80010b6:	4b29      	ldr	r3, [pc, #164]	@ (800115c <LTCD__Init+0xb0>)
 80010b8:	2209      	movs	r2, #9
 80010ba:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80010bc:	4b27      	ldr	r3, [pc, #156]	@ (800115c <LTCD__Init+0xb0>)
 80010be:	2201      	movs	r2, #1
 80010c0:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80010c2:	4b26      	ldr	r3, [pc, #152]	@ (800115c <LTCD__Init+0xb0>)
 80010c4:	221d      	movs	r2, #29
 80010c6:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80010c8:	4b24      	ldr	r3, [pc, #144]	@ (800115c <LTCD__Init+0xb0>)
 80010ca:	2203      	movs	r2, #3
 80010cc:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80010ce:	4b23      	ldr	r3, [pc, #140]	@ (800115c <LTCD__Init+0xb0>)
 80010d0:	f240 120d 	movw	r2, #269	@ 0x10d
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <LTCD__Init+0xb0>)
 80010d8:	f240 1243 	movw	r2, #323	@ 0x143
 80010dc:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80010de:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <LTCD__Init+0xb0>)
 80010e0:	f240 1217 	movw	r2, #279	@ 0x117
 80010e4:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80010e6:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <LTCD__Init+0xb0>)
 80010e8:	f240 1247 	movw	r2, #327	@ 0x147
 80010ec:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <LTCD__Init+0xb0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80010f6:	4b19      	ldr	r3, [pc, #100]	@ (800115c <LTCD__Init+0xb0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80010fe:	4b17      	ldr	r3, [pc, #92]	@ (800115c <LTCD__Init+0xb0>)
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001106:	4b17      	ldr	r3, [pc, #92]	@ (8001164 <LTCD__Init+0xb8>)
 8001108:	2208      	movs	r2, #8
 800110a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800110c:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <LTCD__Init+0xb8>)
 800110e:	22c0      	movs	r2, #192	@ 0xc0
 8001110:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001112:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <LTCD__Init+0xb8>)
 8001114:	2204      	movs	r2, #4
 8001116:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <LTCD__Init+0xb8>)
 800111a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800111e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001120:	4810      	ldr	r0, [pc, #64]	@ (8001164 <LTCD__Init+0xb8>)
 8001122:	f004 fd29 	bl	8005b78 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <LTCD__Init+0xb0>)
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800112c:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <LTCD__Init+0xb0>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001132:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <LTCD__Init+0xb0>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <LTCD__Init+0xb0>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800113e:	f7ff fead 	bl	8000e9c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001142:	4806      	ldr	r0, [pc, #24]	@ (800115c <LTCD__Init+0xb0>)
 8001144:	f003 fdee 	bl	8004d24 <HAL_LTDC_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800114e:	f000 f99d 	bl	800148c <LCD_Error_Handler>
	 }

	ili9341_Init();
 8001152:	f000 fbf7 	bl	8001944 <ili9341_Init>
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000d8 	.word	0x200000d8
 8001160:	40016800 	.word	0x40016800
 8001164:	20000180 	.word	0x20000180

08001168 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	460b      	mov	r3, r1
 8001174:	80bb      	strh	r3, [r7, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 800117a:	88ba      	ldrh	r2, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	1a9b      	subs	r3, r3, r2
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	461a      	mov	r2, r3
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	4413      	add	r3, r2
 800118a:	4905      	ldr	r1, [pc, #20]	@ (80011a0 <LCD_Draw_Pixel+0x38>)
 800118c:	887a      	ldrh	r2, [r7, #2]
 800118e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	200001bc 	.word	0x200001bc

080011a4 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I don't think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4604      	mov	r4, r0
 80011ac:	4608      	mov	r0, r1
 80011ae:	4611      	mov	r1, r2
 80011b0:	461a      	mov	r2, r3
 80011b2:	4623      	mov	r3, r4
 80011b4:	80fb      	strh	r3, [r7, #6]
 80011b6:	4603      	mov	r3, r0
 80011b8:	80bb      	strh	r3, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	807b      	strh	r3, [r7, #2]
 80011be:	4613      	mov	r3, r2
 80011c0:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	425b      	negs	r3, r3
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	81fb      	strh	r3, [r7, #14]
 80011ca:	e034      	b.n	8001236 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 80011cc:	887b      	ldrh	r3, [r7, #2]
 80011ce:	425b      	negs	r3, r3
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	81bb      	strh	r3, [r7, #12]
 80011d4:	e024      	b.n	8001220 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 80011d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011da:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011de:	fb03 f202 	mul.w	r2, r3, r2
 80011e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011e6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80011ea:	fb01 f303 	mul.w	r3, r1, r3
 80011ee:	441a      	add	r2, r3
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	8879      	ldrh	r1, [r7, #2]
 80011f4:	fb01 f303 	mul.w	r3, r1, r3
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dc0b      	bgt.n	8001214 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 80011fc:	89ba      	ldrh	r2, [r7, #12]
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	4413      	add	r3, r2
 8001202:	b298      	uxth	r0, r3
 8001204:	89fa      	ldrh	r2, [r7, #14]
 8001206:	88bb      	ldrh	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	b29b      	uxth	r3, r3
 800120c:	883a      	ldrh	r2, [r7, #0]
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff ffaa 	bl	8001168 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8001214:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001218:	b29b      	uxth	r3, r3
 800121a:	3301      	adds	r3, #1
 800121c:	b29b      	uxth	r3, r3
 800121e:	81bb      	strh	r3, [r7, #12]
 8001220:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	429a      	cmp	r2, r3
 8001228:	ddd5      	ble.n	80011d6 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 800122a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800122e:	b29b      	uxth	r3, r3
 8001230:	3301      	adds	r3, #1
 8001232:	b29b      	uxth	r3, r3
 8001234:	81fb      	strh	r3, [r7, #14]
 8001236:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	429a      	cmp	r2, r3
 800123e:	ddc5      	ble.n	80011cc <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	bd90      	pop	{r4, r7, pc}

0800124a <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800124a:	b590      	push	{r4, r7, lr}
 800124c:	b085      	sub	sp, #20
 800124e:	af00      	add	r7, sp, #0
 8001250:	4604      	mov	r4, r0
 8001252:	4608      	mov	r0, r1
 8001254:	4611      	mov	r1, r2
 8001256:	461a      	mov	r2, r3
 8001258:	4623      	mov	r3, r4
 800125a:	80fb      	strh	r3, [r7, #6]
 800125c:	4603      	mov	r3, r0
 800125e:	80bb      	strh	r3, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
 8001264:	4613      	mov	r3, r2
 8001266:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001268:	2300      	movs	r3, #0
 800126a:	81fb      	strh	r3, [r7, #14]
 800126c:	e00b      	b.n	8001286 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 800126e:	89fa      	ldrh	r2, [r7, #14]
 8001270:	88bb      	ldrh	r3, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	b299      	uxth	r1, r3
 8001276:	883a      	ldrh	r2, [r7, #0]
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff74 	bl	8001168 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8001280:	89fb      	ldrh	r3, [r7, #14]
 8001282:	3301      	adds	r3, #1
 8001284:	81fb      	strh	r3, [r7, #14]
 8001286:	89fa      	ldrh	r2, [r7, #14]
 8001288:	887b      	ldrh	r3, [r7, #2]
 800128a:	429a      	cmp	r2, r3
 800128c:	d3ef      	bcc.n	800126e <LCD_Draw_Vertical_Line+0x24>
  }
}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	bd90      	pop	{r4, r7, pc}

08001298 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color) {
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	4604      	mov	r4, r0
 80012a0:	4608      	mov	r0, r1
 80012a2:	4611      	mov	r1, r2
 80012a4:	461a      	mov	r2, r3
 80012a6:	4623      	mov	r3, r4
 80012a8:	80fb      	strh	r3, [r7, #6]
 80012aa:	4603      	mov	r3, r0
 80012ac:	80bb      	strh	r3, [r7, #4]
 80012ae:	460b      	mov	r3, r1
 80012b0:	807b      	strh	r3, [r7, #2]
 80012b2:	4613      	mov	r3, r2
 80012b4:	803b      	strh	r3, [r7, #0]

	  for (uint16_t i = 0; i < len; i++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	81fb      	strh	r3, [r7, #14]
 80012ba:	e00b      	b.n	80012d4 <LCD_Draw_Horizontal_Line+0x3c>
	  {
		  LCD_Draw_Pixel(x + i, y, color);
 80012bc:	88fa      	ldrh	r2, [r7, #6]
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	4413      	add	r3, r2
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	883a      	ldrh	r2, [r7, #0]
 80012c6:	88b9      	ldrh	r1, [r7, #4]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff4d 	bl	8001168 <LCD_Draw_Pixel>
	  for (uint16_t i = 0; i < len; i++)
 80012ce:	89fb      	ldrh	r3, [r7, #14]
 80012d0:	3301      	adds	r3, #1
 80012d2:	81fb      	strh	r3, [r7, #14]
 80012d4:	89fa      	ldrh	r2, [r7, #14]
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d3ef      	bcc.n	80012bc <LCD_Draw_Horizontal_Line+0x24>
	  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd90      	pop	{r4, r7, pc}
	...

080012e8 <LCD_Draw_Char>:
	}
}

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	603a      	str	r2, [r7, #0]
 80012f2:	80fb      	strh	r3, [r7, #6]
 80012f4:	460b      	mov	r3, r1
 80012f6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	e04c      	b.n	80013a0 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	e03f      	b.n	800138c <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	4413      	add	r3, r2
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	4619      	mov	r1, r3
 8001318:	4b27      	ldr	r3, [pc, #156]	@ (80013b8 <LCD_Draw_Char+0xd0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	889b      	ldrh	r3, [r3, #4]
 800131e:	4a27      	ldr	r2, [pc, #156]	@ (80013bc <LCD_Draw_Char+0xd4>)
 8001320:	fba2 2303 	umull	r2, r3, r2, r3
 8001324:	08db      	lsrs	r3, r3, #3
 8001326:	b29b      	uxth	r3, r3
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	2280      	movs	r2, #128	@ 0x80
 800132c:	409a      	lsls	r2, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	fa42 f303 	asr.w	r3, r2, r3
 8001334:	400b      	ands	r3, r1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d104      	bne.n	8001344 <LCD_Draw_Char+0x5c>
 800133a:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <LCD_Draw_Char+0xd0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	889b      	ldrh	r3, [r3, #4]
 8001340:	2b0c      	cmp	r3, #12
 8001342:	d920      	bls.n	8001386 <LCD_Draw_Char+0x9e>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	4413      	add	r3, r2
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	fa42 f303 	asr.w	r3, r2, r3
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d104      	bne.n	8001368 <LCD_Draw_Char+0x80>
 800135e:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <LCD_Draw_Char+0xd0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	889b      	ldrh	r3, [r3, #4]
 8001364:	2b0c      	cmp	r3, #12
 8001366:	d80e      	bhi.n	8001386 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overwrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	b29a      	uxth	r2, r3
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	4413      	add	r3, r2
 8001370:	b298      	uxth	r0, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	b29a      	uxth	r2, r3
 8001376:	88bb      	ldrh	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	b29b      	uxth	r3, r3
 800137c:	4a10      	ldr	r2, [pc, #64]	@ (80013c0 <LCD_Draw_Char+0xd8>)
 800137e:	8812      	ldrh	r2, [r2, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fef1 	bl	8001168 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	3301      	adds	r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <LCD_Draw_Char+0xd0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	889b      	ldrh	r3, [r3, #4]
 8001392:	461a      	mov	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4293      	cmp	r3, r2
 8001398:	d3b8      	bcc.n	800130c <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3301      	adds	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <LCD_Draw_Char+0xd0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	88db      	ldrh	r3, [r3, #6]
 80013a6:	461a      	mov	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d3ab      	bcc.n	8001306 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 80013ae:	bf00      	nop
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200001b0 	.word	0x200001b0
 80013bc:	aaaaaaab 	.word	0xaaaaaaab
 80013c0:	20000000 	.word	0x20000000

080013c4 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
 80013ce:	460b      	mov	r3, r1
 80013d0:	80bb      	strh	r3, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 80013d6:	78fb      	ldrb	r3, [r7, #3]
 80013d8:	3b20      	subs	r3, #32
 80013da:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <LCD_DisplayChar+0x40>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	4907      	ldr	r1, [pc, #28]	@ (8001404 <LCD_DisplayChar+0x40>)
 80013e6:	6809      	ldr	r1, [r1, #0]
 80013e8:	88c9      	ldrh	r1, [r1, #6]
 80013ea:	fb01 f303 	mul.w	r3, r1, r3
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	441a      	add	r2, r3
 80013f2:	88b9      	ldrh	r1, [r7, #4]
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff76 	bl	80012e8 <LCD_Draw_Char>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200001b0 	.word	0x200001b0

08001408 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	460a      	mov	r2, r1
 8001412:	71fb      	strb	r3, [r7, #7]
 8001414:	4613      	mov	r3, r2
 8001416:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10e      	bne.n	800143c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	e007      	b.n	8001434 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001424:	4908      	ldr	r1, [pc, #32]	@ (8001448 <LCD_Clear+0x40>)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	88ba      	ldrh	r2, [r7, #4]
 800142a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3301      	adds	r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800143a:	d3f3      	bcc.n	8001424 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	200001bc 	.word	0x200001bc

0800144c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001456:	4a04      	ldr	r2, [pc, #16]	@ (8001468 <LCD_SetTextColor+0x1c>)
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	8013      	strh	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	20000000 	.word	0x20000000

0800146c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001474:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <LCD_SetFont+0x1c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	200001b0 	.word	0x200001b0

0800148c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001490:	b672      	cpsid	i
}
 8001492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <LCD_Error_Handler+0x8>

08001498 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 800149c:	f001 fb8f 	bl	8002bbe <STMPE811_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d001      	beq.n	80014aa <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialization
 80014a6:	bf00      	nop
 80014a8:	e7fd      	b.n	80014a6 <InitializeLCDTouch+0xe>
  }
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}

080014ae <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f001 fc39 	bl	8002d2e <STMPE811_ReadTouch>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <LCD_Connect_Four_Init>:
#endif // COMPILE_TOUCH_FUNCTIONS

/* Functions added for Connect Four gameplay */

/* Initializes the text color and font for the Connect Four game. */
void LCD_Connect_Four_Init(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff ffbd 	bl	800144c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80014d2:	4802      	ldr	r0, [pc, #8]	@ (80014dc <LCD_Connect_Four_Init+0x14>)
 80014d4:	f7ff ffca 	bl	800146c <LCD_SetFont>
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000004 	.word	0x20000004

080014e0 <LCD_Draw_Game_Button>:

void LCD_Draw_Game_Button(uint8_t xLower, uint8_t len, uint8_t yLower, uint8_t height, uint16_t color) {
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4604      	mov	r4, r0
 80014e8:	4608      	mov	r0, r1
 80014ea:	4611      	mov	r1, r2
 80014ec:	461a      	mov	r2, r3
 80014ee:	4623      	mov	r3, r4
 80014f0:	71fb      	strb	r3, [r7, #7]
 80014f2:	4603      	mov	r3, r0
 80014f4:	71bb      	strb	r3, [r7, #6]
 80014f6:	460b      	mov	r3, r1
 80014f8:	717b      	strb	r3, [r7, #5]
 80014fa:	4613      	mov	r3, r2
 80014fc:	713b      	strb	r3, [r7, #4]
	LCD_Draw_Vertical_Line(xLower, yLower, height, color);
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	b298      	uxth	r0, r3
 8001502:	797b      	ldrb	r3, [r7, #5]
 8001504:	b299      	uxth	r1, r3
 8001506:	793b      	ldrb	r3, [r7, #4]
 8001508:	b29a      	uxth	r2, r3
 800150a:	8b3b      	ldrh	r3, [r7, #24]
 800150c:	f7ff fe9d 	bl	800124a <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(xLower + len, yLower, height, color);
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	b29a      	uxth	r2, r3
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	b29b      	uxth	r3, r3
 8001518:	4413      	add	r3, r2
 800151a:	b298      	uxth	r0, r3
 800151c:	797b      	ldrb	r3, [r7, #5]
 800151e:	b299      	uxth	r1, r3
 8001520:	793b      	ldrb	r3, [r7, #4]
 8001522:	b29a      	uxth	r2, r3
 8001524:	8b3b      	ldrh	r3, [r7, #24]
 8001526:	f7ff fe90 	bl	800124a <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(xLower, yLower, len, color);
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	b298      	uxth	r0, r3
 800152e:	797b      	ldrb	r3, [r7, #5]
 8001530:	b299      	uxth	r1, r3
 8001532:	79bb      	ldrb	r3, [r7, #6]
 8001534:	b29a      	uxth	r2, r3
 8001536:	8b3b      	ldrh	r3, [r7, #24]
 8001538:	f7ff feae 	bl	8001298 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(xLower, yLower + height, len, color);
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	b298      	uxth	r0, r3
 8001540:	797b      	ldrb	r3, [r7, #5]
 8001542:	b29a      	uxth	r2, r3
 8001544:	793b      	ldrb	r3, [r7, #4]
 8001546:	b29b      	uxth	r3, r3
 8001548:	4413      	add	r3, r2
 800154a:	b299      	uxth	r1, r3
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	b29a      	uxth	r2, r3
 8001550:	8b3b      	ldrh	r3, [r7, #24]
 8001552:	f7ff fea1 	bl	8001298 <LCD_Draw_Horizontal_Line>
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bd90      	pop	{r4, r7, pc}

0800155e <LCD_Draw_Board_Structure>:

void LCD_Draw_Board_Structure(void) {
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0

	for(int i = 0; i <= CONNECT_FOUR_COLUMN_COUNT; i++) {
 8001564:	2300      	movs	r3, #0
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	e010      	b.n	800158c <LCD_Draw_Board_Structure+0x2e>

		LCD_Draw_Vertical_Line(BOARD_LEFT_BOUND + (i * BOARD_SQUARE_LENGTH), BOARD_TOP_BOUND, BOARD_BOTTOM_BOUND - BOARD_TOP_BOUND, LCD_COLOR_BLACK);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	b29b      	uxth	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	b29b      	uxth	r3, r3
 8001578:	330f      	adds	r3, #15
 800157a:	b298      	uxth	r0, r3
 800157c:	2300      	movs	r3, #0
 800157e:	22be      	movs	r2, #190	@ 0xbe
 8001580:	216e      	movs	r1, #110	@ 0x6e
 8001582:	f7ff fe62 	bl	800124a <LCD_Draw_Vertical_Line>
	for(int i = 0; i <= CONNECT_FOUR_COLUMN_COUNT; i++) {
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3301      	adds	r3, #1
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b07      	cmp	r3, #7
 8001590:	ddeb      	ble.n	800156a <LCD_Draw_Board_Structure+0xc>
	}

	for(int j = 0; j <= CONNECT_FOUR_ROW_COUNT; j++) {
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	e011      	b.n	80015bc <LCD_Draw_Board_Structure+0x5e>
		LCD_Draw_Horizontal_Line(BOARD_LEFT_BOUND, BOARD_BOTTOM_BOUND - (j * BOARD_SQUARE_LENGTH), BOARD_RIGHT_BOUND - BOARD_LEFT_BOUND, LCD_COLOR_BLACK);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80015aa:	b299      	uxth	r1, r3
 80015ac:	2300      	movs	r3, #0
 80015ae:	22d2      	movs	r2, #210	@ 0xd2
 80015b0:	200f      	movs	r0, #15
 80015b2:	f7ff fe71 	bl	8001298 <LCD_Draw_Horizontal_Line>
	for(int j = 0; j <= CONNECT_FOUR_ROW_COUNT; j++) {
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	3301      	adds	r3, #1
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2b06      	cmp	r3, #6
 80015c0:	ddea      	ble.n	8001598 <LCD_Draw_Board_Structure+0x3a>
	}

}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <LCD_Display_Coin>:

void LCD_Display_Coin(uint16_t xPos, uint16_t yPos, uint16_t color) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	80fb      	strh	r3, [r7, #6]
 80015d6:	460b      	mov	r3, r1
 80015d8:	80bb      	strh	r3, [r7, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	807b      	strh	r3, [r7, #2]

	LCD_Draw_Circle_Fill(xPos, yPos, COIN_RADIUS, color);
 80015de:	887b      	ldrh	r3, [r7, #2]
 80015e0:	88b9      	ldrh	r1, [r7, #4]
 80015e2:	88f8      	ldrh	r0, [r7, #6]
 80015e4:	220c      	movs	r2, #12
 80015e6:	f7ff fddd 	bl	80011a4 <LCD_Draw_Circle_Fill>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <displayStartScreen>:

void displayStartScreen(void) {
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af02      	add	r7, sp, #8
	HAL_Delay(1000);
 80015f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015fc:	f001 ff16 	bl	800342c <HAL_Delay>

	/* Connect Four */
	LCD_DisplayChar(69, 30, 'C');
 8001600:	2243      	movs	r2, #67	@ 0x43
 8001602:	211e      	movs	r1, #30
 8001604:	2045      	movs	r0, #69	@ 0x45
 8001606:	f7ff fedd 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(85, 28, 'o');
 800160a:	226f      	movs	r2, #111	@ 0x6f
 800160c:	211c      	movs	r1, #28
 800160e:	2055      	movs	r0, #85	@ 0x55
 8001610:	f7ff fed8 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(100, 31, 'n');
 8001614:	226e      	movs	r2, #110	@ 0x6e
 8001616:	211f      	movs	r1, #31
 8001618:	2064      	movs	r0, #100	@ 0x64
 800161a:	f7ff fed3 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(115, 27, 'n');
 800161e:	226e      	movs	r2, #110	@ 0x6e
 8001620:	211b      	movs	r1, #27
 8001622:	2073      	movs	r0, #115	@ 0x73
 8001624:	f7ff fece 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(130, 31, 'e');
 8001628:	2265      	movs	r2, #101	@ 0x65
 800162a:	211f      	movs	r1, #31
 800162c:	2082      	movs	r0, #130	@ 0x82
 800162e:	f7ff fec9 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(145, 29, 'c');
 8001632:	2263      	movs	r2, #99	@ 0x63
 8001634:	211d      	movs	r1, #29
 8001636:	2091      	movs	r0, #145	@ 0x91
 8001638:	f7ff fec4 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(159, 32, 't');
 800163c:	2274      	movs	r2, #116	@ 0x74
 800163e:	2120      	movs	r1, #32
 8001640:	209f      	movs	r0, #159	@ 0x9f
 8001642:	f7ff febf 	bl	80013c4 <LCD_DisplayChar>

	LCD_DisplayChar(95, 60, 'F');
 8001646:	2246      	movs	r2, #70	@ 0x46
 8001648:	213c      	movs	r1, #60	@ 0x3c
 800164a:	205f      	movs	r0, #95	@ 0x5f
 800164c:	f7ff feba 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(110, 60, 'o');
 8001650:	226f      	movs	r2, #111	@ 0x6f
 8001652:	213c      	movs	r1, #60	@ 0x3c
 8001654:	206e      	movs	r0, #110	@ 0x6e
 8001656:	f7ff feb5 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(125, 60, 'u');
 800165a:	2275      	movs	r2, #117	@ 0x75
 800165c:	213c      	movs	r1, #60	@ 0x3c
 800165e:	207d      	movs	r0, #125	@ 0x7d
 8001660:	f7ff feb0 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(140, 60, 'r');
 8001664:	2272      	movs	r2, #114	@ 0x72
 8001666:	213c      	movs	r1, #60	@ 0x3c
 8001668:	208c      	movs	r0, #140	@ 0x8c
 800166a:	f7ff feab 	bl	80013c4 <LCD_DisplayChar>

	/* "Button" display for playing against an AI */
	LCD_Draw_Game_Button(BUTTON_ONE_X_LOWER, BUTTON_ONE_X_UPPER - BUTTON_ONE_X_LOWER, BUTTON_ONE_Y_LOWER, BUTTON_ONE_Y_UPPER - BUTTON_ONE_Y_LOWER, LCD_COLOR_MAGENTA);
 800166e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2332      	movs	r3, #50	@ 0x32
 8001676:	2278      	movs	r2, #120	@ 0x78
 8001678:	216e      	movs	r1, #110	@ 0x6e
 800167a:	2041      	movs	r0, #65	@ 0x41
 800167c:	f7ff ff30 	bl	80014e0 <LCD_Draw_Game_Button>
	LCD_DisplayChar(82, 135, 'A');
 8001680:	2241      	movs	r2, #65	@ 0x41
 8001682:	2187      	movs	r1, #135	@ 0x87
 8001684:	2052      	movs	r0, #82	@ 0x52
 8001686:	f7ff fe9d 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(92, 135, 'I');
 800168a:	2249      	movs	r2, #73	@ 0x49
 800168c:	2187      	movs	r1, #135	@ 0x87
 800168e:	205c      	movs	r0, #92	@ 0x5c
 8001690:	f7ff fe98 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(107, 135, 'M');
 8001694:	224d      	movs	r2, #77	@ 0x4d
 8001696:	2187      	movs	r1, #135	@ 0x87
 8001698:	206b      	movs	r0, #107	@ 0x6b
 800169a:	f7ff fe93 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(122, 135, 'o');
 800169e:	226f      	movs	r2, #111	@ 0x6f
 80016a0:	2187      	movs	r1, #135	@ 0x87
 80016a2:	207a      	movs	r0, #122	@ 0x7a
 80016a4:	f7ff fe8e 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(133, 135, 'd');
 80016a8:	2264      	movs	r2, #100	@ 0x64
 80016aa:	2187      	movs	r1, #135	@ 0x87
 80016ac:	2085      	movs	r0, #133	@ 0x85
 80016ae:	f7ff fe89 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(144, 135, 'e');
 80016b2:	2265      	movs	r2, #101	@ 0x65
 80016b4:	2187      	movs	r1, #135	@ 0x87
 80016b6:	2090      	movs	r0, #144	@ 0x90
 80016b8:	f7ff fe84 	bl	80013c4 <LCD_DisplayChar>

	/* "Button" display for two player mode */
	LCD_Draw_Game_Button(BUTTON_TWO_X_LOWER, BUTTON_TWO_X_UPPER - BUTTON_TWO_X_LOWER, BUTTON_TWO_Y_LOWER, BUTTON_TWO_Y_UPPER - BUTTON_TWO_Y_LOWER, LCD_COLOR_MAGENTA);
 80016bc:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2332      	movs	r3, #50	@ 0x32
 80016c4:	22d2      	movs	r2, #210	@ 0xd2
 80016c6:	216e      	movs	r1, #110	@ 0x6e
 80016c8:	2041      	movs	r0, #65	@ 0x41
 80016ca:	f7ff ff09 	bl	80014e0 <LCD_Draw_Game_Button>
	LCD_DisplayChar(77, 225, '2');
 80016ce:	2232      	movs	r2, #50	@ 0x32
 80016d0:	21e1      	movs	r1, #225	@ 0xe1
 80016d2:	204d      	movs	r0, #77	@ 0x4d
 80016d4:	f7ff fe76 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(97, 225, 'P');
 80016d8:	2250      	movs	r2, #80	@ 0x50
 80016da:	21e1      	movs	r1, #225	@ 0xe1
 80016dc:	2061      	movs	r0, #97	@ 0x61
 80016de:	f7ff fe71 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(107, 225, 'l');
 80016e2:	226c      	movs	r2, #108	@ 0x6c
 80016e4:	21e1      	movs	r1, #225	@ 0xe1
 80016e6:	206b      	movs	r0, #107	@ 0x6b
 80016e8:	f7ff fe6c 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(116, 225, 'a');
 80016ec:	2261      	movs	r2, #97	@ 0x61
 80016ee:	21e1      	movs	r1, #225	@ 0xe1
 80016f0:	2074      	movs	r0, #116	@ 0x74
 80016f2:	f7ff fe67 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(126, 225, 'y');
 80016f6:	2279      	movs	r2, #121	@ 0x79
 80016f8:	21e1      	movs	r1, #225	@ 0xe1
 80016fa:	207e      	movs	r0, #126	@ 0x7e
 80016fc:	f7ff fe62 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(138, 225, 'e');
 8001700:	2265      	movs	r2, #101	@ 0x65
 8001702:	21e1      	movs	r1, #225	@ 0xe1
 8001704:	208a      	movs	r0, #138	@ 0x8a
 8001706:	f7ff fe5d 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(149, 225, 'r');
 800170a:	2272      	movs	r2, #114	@ 0x72
 800170c:	21e1      	movs	r1, #225	@ 0xe1
 800170e:	2095      	movs	r0, #149	@ 0x95
 8001710:	f7ff fe58 	bl	80013c4 <LCD_DisplayChar>

}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <clearFloatingCoin>:


void clearFloatingCoin(uint16_t xPos, uint16_t yPos) {
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	460a      	mov	r2, r1
 8001724:	80fb      	strh	r3, [r7, #6]
 8001726:	4613      	mov	r3, r2
 8001728:	80bb      	strh	r3, [r7, #4]

	LCD_Draw_Circle_Fill(xPos, yPos, COIN_RADIUS, LCD_COLOR_WHITE);
 800172a:	88b9      	ldrh	r1, [r7, #4]
 800172c:	88f8      	ldrh	r0, [r7, #6]
 800172e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001732:	220c      	movs	r2, #12
 8001734:	f7ff fd36 	bl	80011a4 <LCD_Draw_Circle_Fill>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <displayStatsScreen>:

void displayStatsScreen(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af02      	add	r7, sp, #8

	HAL_Delay(750);
 8001746:	f240 20ee 	movw	r0, #750	@ 0x2ee
 800174a:	f001 fe6f 	bl	800342c <HAL_Delay>
	LCD_DisplayChar(69, 20, 'S');
 800174e:	2253      	movs	r2, #83	@ 0x53
 8001750:	2114      	movs	r1, #20
 8001752:	2045      	movs	r0, #69	@ 0x45
 8001754:	f7ff fe36 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(85, 18, 'c');
 8001758:	2263      	movs	r2, #99	@ 0x63
 800175a:	2112      	movs	r1, #18
 800175c:	2055      	movs	r0, #85	@ 0x55
 800175e:	f7ff fe31 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(100, 21, 'o');
 8001762:	226f      	movs	r2, #111	@ 0x6f
 8001764:	2115      	movs	r1, #21
 8001766:	2064      	movs	r0, #100	@ 0x64
 8001768:	f7ff fe2c 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(115, 17, 'r');
 800176c:	2272      	movs	r2, #114	@ 0x72
 800176e:	2111      	movs	r1, #17
 8001770:	2073      	movs	r0, #115	@ 0x73
 8001772:	f7ff fe27 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(130, 21, 'e');
 8001776:	2265      	movs	r2, #101	@ 0x65
 8001778:	2115      	movs	r1, #21
 800177a:	2082      	movs	r0, #130	@ 0x82
 800177c:	f7ff fe22 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(145, 19, 's');
 8001780:	2273      	movs	r2, #115	@ 0x73
 8001782:	2113      	movs	r1, #19
 8001784:	2091      	movs	r0, #145	@ 0x91
 8001786:	f7ff fe1d 	bl	80013c4 <LCD_DisplayChar>

	LCD_DisplayChar(40, 70, 'Y');
 800178a:	2259      	movs	r2, #89	@ 0x59
 800178c:	2146      	movs	r1, #70	@ 0x46
 800178e:	2028      	movs	r0, #40	@ 0x28
 8001790:	f7ff fe18 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(53, 70, 'e');
 8001794:	2265      	movs	r2, #101	@ 0x65
 8001796:	2146      	movs	r1, #70	@ 0x46
 8001798:	2035      	movs	r0, #53	@ 0x35
 800179a:	f7ff fe13 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(63, 70, 'l');
 800179e:	226c      	movs	r2, #108	@ 0x6c
 80017a0:	2146      	movs	r1, #70	@ 0x46
 80017a2:	203f      	movs	r0, #63	@ 0x3f
 80017a4:	f7ff fe0e 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(70, 70, 'l');
 80017a8:	226c      	movs	r2, #108	@ 0x6c
 80017aa:	2146      	movs	r1, #70	@ 0x46
 80017ac:	2046      	movs	r0, #70	@ 0x46
 80017ae:	f7ff fe09 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(79, 70, 'o');
 80017b2:	226f      	movs	r2, #111	@ 0x6f
 80017b4:	2146      	movs	r1, #70	@ 0x46
 80017b6:	204f      	movs	r0, #79	@ 0x4f
 80017b8:	f7ff fe04 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(95, 70, 'w');
 80017bc:	2277      	movs	r2, #119	@ 0x77
 80017be:	2146      	movs	r1, #70	@ 0x46
 80017c0:	205f      	movs	r0, #95	@ 0x5f
 80017c2:	f7ff fdff 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(110, 70, ':');
 80017c6:	223a      	movs	r2, #58	@ 0x3a
 80017c8:	2146      	movs	r1, #70	@ 0x46
 80017ca:	206e      	movs	r0, #110	@ 0x6e
 80017cc:	f7ff fdfa 	bl	80013c4 <LCD_DisplayChar>
	drawFromUnsignedInteger(130, 70, yellowWinCount);
 80017d0:	4b3f      	ldr	r3, [pc, #252]	@ (80018d0 <displayStatsScreen+0x190>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	2146      	movs	r1, #70	@ 0x46
 80017d8:	2082      	movs	r0, #130	@ 0x82
 80017da:	f000 f87f 	bl	80018dc <drawFromUnsignedInteger>

	LCD_DisplayChar(67, 95, 'R');
 80017de:	2252      	movs	r2, #82	@ 0x52
 80017e0:	215f      	movs	r1, #95	@ 0x5f
 80017e2:	2043      	movs	r0, #67	@ 0x43
 80017e4:	f7ff fdee 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(82, 95, 'e');
 80017e8:	2265      	movs	r2, #101	@ 0x65
 80017ea:	215f      	movs	r1, #95	@ 0x5f
 80017ec:	2052      	movs	r0, #82	@ 0x52
 80017ee:	f7ff fde9 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(95, 95, 'd');
 80017f2:	2264      	movs	r2, #100	@ 0x64
 80017f4:	215f      	movs	r1, #95	@ 0x5f
 80017f6:	205f      	movs	r0, #95	@ 0x5f
 80017f8:	f7ff fde4 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(110, 95, ':');
 80017fc:	223a      	movs	r2, #58	@ 0x3a
 80017fe:	215f      	movs	r1, #95	@ 0x5f
 8001800:	206e      	movs	r0, #110	@ 0x6e
 8001802:	f7ff fddf 	bl	80013c4 <LCD_DisplayChar>
	drawFromUnsignedInteger(130, 95, redWinCount);
 8001806:	4b33      	ldr	r3, [pc, #204]	@ (80018d4 <displayStatsScreen+0x194>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	215f      	movs	r1, #95	@ 0x5f
 800180e:	2082      	movs	r0, #130	@ 0x82
 8001810:	f000 f864 	bl	80018dc <drawFromUnsignedInteger>

	LCD_DisplayChar(30, 140, 'T');
 8001814:	2254      	movs	r2, #84	@ 0x54
 8001816:	218c      	movs	r1, #140	@ 0x8c
 8001818:	201e      	movs	r0, #30
 800181a:	f7ff fdd3 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(40, 140, 'i');
 800181e:	2269      	movs	r2, #105	@ 0x69
 8001820:	218c      	movs	r1, #140	@ 0x8c
 8001822:	2028      	movs	r0, #40	@ 0x28
 8001824:	f7ff fdce 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(50, 140, 'm');
 8001828:	226d      	movs	r2, #109	@ 0x6d
 800182a:	218c      	movs	r1, #140	@ 0x8c
 800182c:	2032      	movs	r0, #50	@ 0x32
 800182e:	f7ff fdc9 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(65, 140, 'e');
 8001832:	2265      	movs	r2, #101	@ 0x65
 8001834:	218c      	movs	r1, #140	@ 0x8c
 8001836:	2041      	movs	r0, #65	@ 0x41
 8001838:	f7ff fdc4 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(77, 140, '(');
 800183c:	2228      	movs	r2, #40	@ 0x28
 800183e:	218c      	movs	r1, #140	@ 0x8c
 8001840:	204d      	movs	r0, #77	@ 0x4d
 8001842:	f7ff fdbf 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(86, 140, 's');
 8001846:	2273      	movs	r2, #115	@ 0x73
 8001848:	218c      	movs	r1, #140	@ 0x8c
 800184a:	2056      	movs	r0, #86	@ 0x56
 800184c:	f7ff fdba 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(95, 140, ')');
 8001850:	2229      	movs	r2, #41	@ 0x29
 8001852:	218c      	movs	r1, #140	@ 0x8c
 8001854:	205f      	movs	r0, #95	@ 0x5f
 8001856:	f7ff fdb5 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(110, 140, ':');
 800185a:	223a      	movs	r2, #58	@ 0x3a
 800185c:	218c      	movs	r1, #140	@ 0x8c
 800185e:	206e      	movs	r0, #110	@ 0x6e
 8001860:	f7ff fdb0 	bl	80013c4 <LCD_DisplayChar>
	drawFromUnsignedInteger(130, 140, numSecondsElapsedInGame);
 8001864:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <displayStatsScreen+0x198>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	218c      	movs	r1, #140	@ 0x8c
 800186c:	2082      	movs	r0, #130	@ 0x82
 800186e:	f000 f835 	bl	80018dc <drawFromUnsignedInteger>


	/* "Button" display for two player mode */
	LCD_Draw_Game_Button(BUTTON_TWO_X_LOWER, BUTTON_TWO_X_UPPER - BUTTON_TWO_X_LOWER, BUTTON_TWO_Y_LOWER, BUTTON_TWO_Y_UPPER - BUTTON_TWO_Y_LOWER, LCD_COLOR_MAGENTA);
 8001872:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2332      	movs	r3, #50	@ 0x32
 800187a:	22d2      	movs	r2, #210	@ 0xd2
 800187c:	216e      	movs	r1, #110	@ 0x6e
 800187e:	2041      	movs	r0, #65	@ 0x41
 8001880:	f7ff fe2e 	bl	80014e0 <LCD_Draw_Game_Button>
	LCD_DisplayChar(75, 225, 'O');
 8001884:	224f      	movs	r2, #79	@ 0x4f
 8001886:	21e1      	movs	r1, #225	@ 0xe1
 8001888:	204b      	movs	r0, #75	@ 0x4b
 800188a:	f7ff fd9b 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(90, 225, 'n');
 800188e:	226e      	movs	r2, #110	@ 0x6e
 8001890:	21e1      	movs	r1, #225	@ 0xe1
 8001892:	205a      	movs	r0, #90	@ 0x5a
 8001894:	f7ff fd96 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(102, 225, 'e');
 8001898:	2265      	movs	r2, #101	@ 0x65
 800189a:	21e1      	movs	r1, #225	@ 0xe1
 800189c:	2066      	movs	r0, #102	@ 0x66
 800189e:	f7ff fd91 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(120, 225, 'M');
 80018a2:	224d      	movs	r2, #77	@ 0x4d
 80018a4:	21e1      	movs	r1, #225	@ 0xe1
 80018a6:	2078      	movs	r0, #120	@ 0x78
 80018a8:	f7ff fd8c 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(135, 225, 'o');
 80018ac:	226f      	movs	r2, #111	@ 0x6f
 80018ae:	21e1      	movs	r1, #225	@ 0xe1
 80018b0:	2087      	movs	r0, #135	@ 0x87
 80018b2:	f7ff fd87 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(145, 225, 'r');
 80018b6:	2272      	movs	r2, #114	@ 0x72
 80018b8:	21e1      	movs	r1, #225	@ 0xe1
 80018ba:	2091      	movs	r0, #145	@ 0x91
 80018bc:	f7ff fd82 	bl	80013c4 <LCD_DisplayChar>
	LCD_DisplayChar(153, 225, 'e');
 80018c0:	2265      	movs	r2, #101	@ 0x65
 80018c2:	21e1      	movs	r1, #225	@ 0xe1
 80018c4:	2099      	movs	r0, #153	@ 0x99
 80018c6:	f7ff fd7d 	bl	80013c4 <LCD_DisplayChar>


}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200000cc 	.word	0x200000cc
 80018d4:	200000cd 	.word	0x200000cd
 80018d8:	200000d0 	.word	0x200000d0

080018dc <drawFromUnsignedInteger>:

void drawFromUnsignedInteger(uint16_t xPos, uint16_t yPos, uint32_t number) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	603a      	str	r2, [r7, #0]
 80018e6:	80fb      	strh	r3, [r7, #6]
 80018e8:	460b      	mov	r3, r1
 80018ea:	80bb      	strh	r3, [r7, #4]

	sprintf(buffer, "%lu", number);
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	4913      	ldr	r1, [pc, #76]	@ (800193c <drawFromUnsignedInteger+0x60>)
 80018f0:	4813      	ldr	r0, [pc, #76]	@ (8001940 <drawFromUnsignedInteger+0x64>)
 80018f2:	f005 f983 	bl	8006bfc <siprintf>
	uint8_t i = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	73fb      	strb	r3, [r7, #15]
	while(buffer[i]) {
 80018fa:	e014      	b.n	8001926 <drawFromUnsignedInteger+0x4a>
		LCD_DisplayChar(xPos + (i * 13), yPos, buffer[i]);
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	0052      	lsls	r2, r2, #1
 8001904:	441a      	add	r2, r3
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	4413      	add	r3, r2
 800190a:	b29a      	uxth	r2, r3
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	4413      	add	r3, r2
 8001910:	b298      	uxth	r0, r3
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <drawFromUnsignedInteger+0x64>)
 8001916:	5cd2      	ldrb	r2, [r2, r3]
 8001918:	88bb      	ldrh	r3, [r7, #4]
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff fd52 	bl	80013c4 <LCD_DisplayChar>
		i++;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	3301      	adds	r3, #1
 8001924:	73fb      	strb	r3, [r7, #15]
	while(buffer[i]) {
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	4a05      	ldr	r2, [pc, #20]	@ (8001940 <drawFromUnsignedInteger+0x64>)
 800192a:	5cd3      	ldrb	r3, [r2, r3]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1e5      	bne.n	80018fc <drawFromUnsignedInteger+0x20>
	}

}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	08007554 	.word	0x08007554
 8001940:	200001b4 	.word	0x200001b4

08001944 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001948:	f000 f9fe 	bl	8001d48 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 800194c:	20ca      	movs	r0, #202	@ 0xca
 800194e:	f000 f943 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001952:	20c3      	movs	r0, #195	@ 0xc3
 8001954:	f000 f94d 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001958:	2008      	movs	r0, #8
 800195a:	f000 f94a 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800195e:	2050      	movs	r0, #80	@ 0x50
 8001960:	f000 f947 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001964:	20cf      	movs	r0, #207	@ 0xcf
 8001966:	f000 f937 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800196a:	2000      	movs	r0, #0
 800196c:	f000 f941 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001970:	20c1      	movs	r0, #193	@ 0xc1
 8001972:	f000 f93e 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001976:	2030      	movs	r0, #48	@ 0x30
 8001978:	f000 f93b 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 800197c:	20ed      	movs	r0, #237	@ 0xed
 800197e:	f000 f92b 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001982:	2064      	movs	r0, #100	@ 0x64
 8001984:	f000 f935 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001988:	2003      	movs	r0, #3
 800198a:	f000 f932 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800198e:	2012      	movs	r0, #18
 8001990:	f000 f92f 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001994:	2081      	movs	r0, #129	@ 0x81
 8001996:	f000 f92c 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800199a:	20e8      	movs	r0, #232	@ 0xe8
 800199c:	f000 f91c 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80019a0:	2085      	movs	r0, #133	@ 0x85
 80019a2:	f000 f926 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80019a6:	2000      	movs	r0, #0
 80019a8:	f000 f923 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80019ac:	2078      	movs	r0, #120	@ 0x78
 80019ae:	f000 f920 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80019b2:	20cb      	movs	r0, #203	@ 0xcb
 80019b4:	f000 f910 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80019b8:	2039      	movs	r0, #57	@ 0x39
 80019ba:	f000 f91a 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80019be:	202c      	movs	r0, #44	@ 0x2c
 80019c0:	f000 f917 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f000 f914 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80019ca:	2034      	movs	r0, #52	@ 0x34
 80019cc:	f000 f911 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80019d0:	2002      	movs	r0, #2
 80019d2:	f000 f90e 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80019d6:	20f7      	movs	r0, #247	@ 0xf7
 80019d8:	f000 f8fe 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80019dc:	2020      	movs	r0, #32
 80019de:	f000 f908 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80019e2:	20ea      	movs	r0, #234	@ 0xea
 80019e4:	f000 f8f8 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f000 f902 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80019ee:	2000      	movs	r0, #0
 80019f0:	f000 f8ff 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80019f4:	20b1      	movs	r0, #177	@ 0xb1
 80019f6:	f000 f8ef 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f000 f8f9 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001a00:	201b      	movs	r0, #27
 8001a02:	f000 f8f6 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001a06:	20b6      	movs	r0, #182	@ 0xb6
 8001a08:	f000 f8e6 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001a0c:	200a      	movs	r0, #10
 8001a0e:	f000 f8f0 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001a12:	20a2      	movs	r0, #162	@ 0xa2
 8001a14:	f000 f8ed 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001a18:	20c0      	movs	r0, #192	@ 0xc0
 8001a1a:	f000 f8dd 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001a1e:	2010      	movs	r0, #16
 8001a20:	f000 f8e7 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001a24:	20c1      	movs	r0, #193	@ 0xc1
 8001a26:	f000 f8d7 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001a2a:	2010      	movs	r0, #16
 8001a2c:	f000 f8e1 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001a30:	20c5      	movs	r0, #197	@ 0xc5
 8001a32:	f000 f8d1 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001a36:	2045      	movs	r0, #69	@ 0x45
 8001a38:	f000 f8db 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001a3c:	2015      	movs	r0, #21
 8001a3e:	f000 f8d8 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001a42:	20c7      	movs	r0, #199	@ 0xc7
 8001a44:	f000 f8c8 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001a48:	2090      	movs	r0, #144	@ 0x90
 8001a4a:	f000 f8d2 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001a4e:	2036      	movs	r0, #54	@ 0x36
 8001a50:	f000 f8c2 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001a54:	20c8      	movs	r0, #200	@ 0xc8
 8001a56:	f000 f8cc 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001a5a:	20f2      	movs	r0, #242	@ 0xf2
 8001a5c:	f000 f8bc 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f000 f8c6 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001a66:	20b0      	movs	r0, #176	@ 0xb0
 8001a68:	f000 f8b6 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001a6c:	20c2      	movs	r0, #194	@ 0xc2
 8001a6e:	f000 f8c0 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001a72:	20b6      	movs	r0, #182	@ 0xb6
 8001a74:	f000 f8b0 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001a78:	200a      	movs	r0, #10
 8001a7a:	f000 f8ba 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001a7e:	20a7      	movs	r0, #167	@ 0xa7
 8001a80:	f000 f8b7 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001a84:	2027      	movs	r0, #39	@ 0x27
 8001a86:	f000 f8b4 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001a8a:	2004      	movs	r0, #4
 8001a8c:	f000 f8b1 	bl	8001bf2 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001a90:	202a      	movs	r0, #42	@ 0x2a
 8001a92:	f000 f8a1 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f000 f8ab 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f000 f8a8 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f000 f8a5 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001aa8:	20ef      	movs	r0, #239	@ 0xef
 8001aaa:	f000 f8a2 	bl	8001bf2 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001aae:	202b      	movs	r0, #43	@ 0x2b
 8001ab0:	f000 f892 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f000 f89c 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f000 f899 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f000 f896 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001ac6:	203f      	movs	r0, #63	@ 0x3f
 8001ac8:	f000 f893 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001acc:	20f6      	movs	r0, #246	@ 0xf6
 8001ace:	f000 f883 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f000 f88d 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f000 f88a 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001ade:	2006      	movs	r0, #6
 8001ae0:	f000 f887 	bl	8001bf2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001ae4:	202c      	movs	r0, #44	@ 0x2c
 8001ae6:	f000 f877 	bl	8001bd8 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001aea:	20c8      	movs	r0, #200	@ 0xc8
 8001aec:	f000 f9e8 	bl	8001ec0 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001af0:	2026      	movs	r0, #38	@ 0x26
 8001af2:	f000 f871 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f000 f87b 	bl	8001bf2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001afc:	20e0      	movs	r0, #224	@ 0xe0
 8001afe:	f000 f86b 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001b02:	200f      	movs	r0, #15
 8001b04:	f000 f875 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001b08:	2029      	movs	r0, #41	@ 0x29
 8001b0a:	f000 f872 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001b0e:	2024      	movs	r0, #36	@ 0x24
 8001b10:	f000 f86f 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001b14:	200c      	movs	r0, #12
 8001b16:	f000 f86c 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001b1a:	200e      	movs	r0, #14
 8001b1c:	f000 f869 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001b20:	2009      	movs	r0, #9
 8001b22:	f000 f866 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001b26:	204e      	movs	r0, #78	@ 0x4e
 8001b28:	f000 f863 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001b2c:	2078      	movs	r0, #120	@ 0x78
 8001b2e:	f000 f860 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001b32:	203c      	movs	r0, #60	@ 0x3c
 8001b34:	f000 f85d 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001b38:	2009      	movs	r0, #9
 8001b3a:	f000 f85a 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001b3e:	2013      	movs	r0, #19
 8001b40:	f000 f857 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001b44:	2005      	movs	r0, #5
 8001b46:	f000 f854 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001b4a:	2017      	movs	r0, #23
 8001b4c:	f000 f851 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001b50:	2011      	movs	r0, #17
 8001b52:	f000 f84e 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b56:	2000      	movs	r0, #0
 8001b58:	f000 f84b 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001b5c:	20e1      	movs	r0, #225	@ 0xe1
 8001b5e:	f000 f83b 	bl	8001bd8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f000 f845 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001b68:	2016      	movs	r0, #22
 8001b6a:	f000 f842 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001b6e:	201b      	movs	r0, #27
 8001b70:	f000 f83f 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001b74:	2004      	movs	r0, #4
 8001b76:	f000 f83c 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001b7a:	2011      	movs	r0, #17
 8001b7c:	f000 f839 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001b80:	2007      	movs	r0, #7
 8001b82:	f000 f836 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001b86:	2031      	movs	r0, #49	@ 0x31
 8001b88:	f000 f833 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001b8c:	2033      	movs	r0, #51	@ 0x33
 8001b8e:	f000 f830 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001b92:	2042      	movs	r0, #66	@ 0x42
 8001b94:	f000 f82d 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001b98:	2005      	movs	r0, #5
 8001b9a:	f000 f82a 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001b9e:	200c      	movs	r0, #12
 8001ba0:	f000 f827 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001ba4:	200a      	movs	r0, #10
 8001ba6:	f000 f824 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001baa:	2028      	movs	r0, #40	@ 0x28
 8001bac:	f000 f821 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001bb0:	202f      	movs	r0, #47	@ 0x2f
 8001bb2:	f000 f81e 	bl	8001bf2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001bb6:	200f      	movs	r0, #15
 8001bb8:	f000 f81b 	bl	8001bf2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001bbc:	2011      	movs	r0, #17
 8001bbe:	f000 f80b 	bl	8001bd8 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001bc2:	20c8      	movs	r0, #200	@ 0xc8
 8001bc4:	f000 f97c 	bl	8001ec0 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001bc8:	2029      	movs	r0, #41	@ 0x29
 8001bca:	f000 f805 	bl	8001bd8 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001bce:	202c      	movs	r0, #44	@ 0x2c
 8001bd0:	f000 f802 	bl	8001bd8 <ili9341_Write_Reg>
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 f949 	bl	8001e7c <LCD_IO_WriteReg>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f91a 	bl	8001e38 <LCD_IO_WriteData>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001c10:	4819      	ldr	r0, [pc, #100]	@ (8001c78 <SPI_Init+0x6c>)
 8001c12:	f004 fb90 	bl	8006336 <HAL_SPI_GetState>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d12b      	bne.n	8001c74 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <SPI_Init+0x6c>)
 8001c1e:	4a17      	ldr	r2, [pc, #92]	@ (8001c7c <SPI_Init+0x70>)
 8001c20:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <SPI_Init+0x6c>)
 8001c24:	2218      	movs	r2, #24
 8001c26:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001c28:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <SPI_Init+0x6c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001c2e:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <SPI_Init+0x6c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001c34:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <SPI_Init+0x6c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c78 <SPI_Init+0x6c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001c40:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <SPI_Init+0x6c>)
 8001c42:	2207      	movs	r2, #7
 8001c44:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001c46:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <SPI_Init+0x6c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <SPI_Init+0x6c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001c52:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <SPI_Init+0x6c>)
 8001c54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c58:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <SPI_Init+0x6c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <SPI_Init+0x6c>)
 8001c62:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c66:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001c68:	4803      	ldr	r0, [pc, #12]	@ (8001c78 <SPI_Init+0x6c>)
 8001c6a:	f000 f833 	bl	8001cd4 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001c6e:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <SPI_Init+0x6c>)
 8001c70:	f004 f96c 	bl	8005f4c <HAL_SPI_Init>
  }
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	200259bc 	.word	0x200259bc
 8001c7c:	40015000 	.word	0x40015000

08001c80 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001c8e:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <SPI_Write+0x34>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	1db9      	adds	r1, r7, #6
 8001c94:	2201      	movs	r2, #1
 8001c96:	4808      	ldr	r0, [pc, #32]	@ (8001cb8 <SPI_Write+0x38>)
 8001c98:	f004 fa09 	bl	80060ae <HAL_SPI_Transmit>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001ca6:	f000 f809 	bl	8001cbc <SPI_Error>
  }
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000000c 	.word	0x2000000c
 8001cb8:	200259bc 	.word	0x200259bc

08001cbc <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001cc0:	4803      	ldr	r0, [pc, #12]	@ (8001cd0 <SPI_Error+0x14>)
 8001cc2:	f004 f9cc 	bl	800605e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001cc6:	f7ff ffa1 	bl	8001c0c <SPI_Init>
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200259bc 	.word	0x200259bc

08001cd4 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	@ 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <SPI_MspInit+0x6c>)
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce4:	4a16      	ldr	r2, [pc, #88]	@ (8001d40 <SPI_MspInit+0x6c>)
 8001ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001cea:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cec:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <SPI_MspInit+0x6c>)
 8001cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <SPI_MspInit+0x6c>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d00:	4a0f      	ldr	r2, [pc, #60]	@ (8001d40 <SPI_MspInit+0x6c>)
 8001d02:	f043 0320 	orr.w	r3, r3, #32
 8001d06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d08:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <SPI_MspInit+0x6c>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0c:	f003 0320 	and.w	r3, r3, #32
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001d14:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001d22:	2301      	movs	r3, #1
 8001d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001d26:	2305      	movs	r3, #5
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4804      	ldr	r0, [pc, #16]	@ (8001d44 <SPI_MspInit+0x70>)
 8001d32:	f001 fc85 	bl	8003640 <HAL_GPIO_Init>
}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	@ 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40021400 	.word	0x40021400

08001d48 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001d4e:	4b36      	ldr	r3, [pc, #216]	@ (8001e28 <LCD_IO_Init+0xe0>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d164      	bne.n	8001e20 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001d56:	4b34      	ldr	r3, [pc, #208]	@ (8001e28 <LCD_IO_Init+0xe0>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	4b32      	ldr	r3, [pc, #200]	@ (8001e2c <LCD_IO_Init+0xe4>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d64:	4a31      	ldr	r2, [pc, #196]	@ (8001e2c <LCD_IO_Init+0xe4>)
 8001d66:	f043 0308 	orr.w	r3, r3, #8
 8001d6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e2c <LCD_IO_Init+0xe4>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001d78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4827      	ldr	r0, [pc, #156]	@ (8001e30 <LCD_IO_Init+0xe8>)
 8001d92:	f001 fc55 	bl	8003640 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	4b24      	ldr	r3, [pc, #144]	@ (8001e2c <LCD_IO_Init+0xe4>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	4a23      	ldr	r2, [pc, #140]	@ (8001e2c <LCD_IO_Init+0xe4>)
 8001da0:	f043 0308 	orr.w	r3, r3, #8
 8001da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da6:	4b21      	ldr	r3, [pc, #132]	@ (8001e2c <LCD_IO_Init+0xe4>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001db2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001db6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001db8:	2301      	movs	r3, #1
 8001dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4819      	ldr	r0, [pc, #100]	@ (8001e30 <LCD_IO_Init+0xe8>)
 8001dcc:	f001 fc38 	bl	8003640 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <LCD_IO_Init+0xe4>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd8:	4a14      	ldr	r2, [pc, #80]	@ (8001e2c <LCD_IO_Init+0xe4>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de0:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <LCD_IO_Init+0xe4>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001dec:	2304      	movs	r3, #4
 8001dee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	4619      	mov	r1, r3
 8001e02:	480c      	ldr	r0, [pc, #48]	@ (8001e34 <LCD_IO_Init+0xec>)
 8001e04:	f001 fc1c 	bl	8003640 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2104      	movs	r1, #4
 8001e0c:	4809      	ldr	r0, [pc, #36]	@ (8001e34 <LCD_IO_Init+0xec>)
 8001e0e:	f001 fecf 	bl	8003bb0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001e12:	2201      	movs	r2, #1
 8001e14:	2104      	movs	r1, #4
 8001e16:	4807      	ldr	r0, [pc, #28]	@ (8001e34 <LCD_IO_Init+0xec>)
 8001e18:	f001 feca 	bl	8003bb0 <HAL_GPIO_WritePin>

    SPI_Init();
 8001e1c:	f7ff fef6 	bl	8001c0c <SPI_Init>
  }
}
 8001e20:	bf00      	nop
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20025a14 	.word	0x20025a14
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020c00 	.word	0x40020c00
 8001e34:	40020800 	.word	0x40020800

08001e38 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001e42:	2201      	movs	r2, #1
 8001e44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e48:	480a      	ldr	r0, [pc, #40]	@ (8001e74 <LCD_IO_WriteData+0x3c>)
 8001e4a:	f001 feb1 	bl	8003bb0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2104      	movs	r1, #4
 8001e52:	4809      	ldr	r0, [pc, #36]	@ (8001e78 <LCD_IO_WriteData+0x40>)
 8001e54:	f001 feac 	bl	8003bb0 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff10 	bl	8001c80 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e60:	2201      	movs	r2, #1
 8001e62:	2104      	movs	r1, #4
 8001e64:	4804      	ldr	r0, [pc, #16]	@ (8001e78 <LCD_IO_WriteData+0x40>)
 8001e66:	f001 fea3 	bl	8003bb0 <HAL_GPIO_WritePin>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40020c00 	.word	0x40020c00
 8001e78:	40020800 	.word	0x40020800

08001e7c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e8c:	480a      	ldr	r0, [pc, #40]	@ (8001eb8 <LCD_IO_WriteReg+0x3c>)
 8001e8e:	f001 fe8f 	bl	8003bb0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001e92:	2200      	movs	r2, #0
 8001e94:	2104      	movs	r1, #4
 8001e96:	4809      	ldr	r0, [pc, #36]	@ (8001ebc <LCD_IO_WriteReg+0x40>)
 8001e98:	f001 fe8a 	bl	8003bb0 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff feed 	bl	8001c80 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2104      	movs	r1, #4
 8001eaa:	4804      	ldr	r0, [pc, #16]	@ (8001ebc <LCD_IO_WriteReg+0x40>)
 8001eac:	f001 fe80 	bl	8003bb0 <HAL_GPIO_WritePin>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40020c00 	.word	0x40020c00
 8001ebc:	40020800 	.word	0x40020800

08001ec0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f001 faaf 	bl	800342c <HAL_Delay>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <__NVIC_EnableIRQ>:
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	db0b      	blt.n	8001f02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	4907      	ldr	r1, [pc, #28]	@ (8001f10 <__NVIC_EnableIRQ+0x38>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	2001      	movs	r0, #1
 8001efa:	fa00 f202 	lsl.w	r2, r0, r2
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000e100 	.word	0xe000e100

08001f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f18:	f001 fa16 	bl	8003348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f1c:	f000 f814 	bl	8001f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f20:	f000 fa08 	bl	8002334 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001f24:	f000 f8ba 	bl	800209c <MX_LTDC_Init>
  MX_RNG_Init();
 8001f28:	f000 f96a 	bl	8002200 <MX_RNG_Init>
  MX_TIM2_Init();
 8001f2c:	f000 f9b2 	bl	8002294 <MX_TIM2_Init>
  MX_SPI5_Init();
 8001f30:	f000 f97a 	bl	8002228 <MX_SPI5_Init>
  MX_I2C3_Init();
 8001f34:	f000 f872 	bl	800201c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8001f38:	f7fe fba0 	bl	800067c <ApplicationInit>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	displayMenu();
 8001f3c:	f7fe fc68 	bl	8000810 <displayMenu>
	waitForUserResponse();
 8001f40:	f7fe fc40 	bl	80007c4 <waitForUserResponse>
	displayMenu();
 8001f44:	bf00      	nop
 8001f46:	e7f9      	b.n	8001f3c <main+0x28>

08001f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b094      	sub	sp, #80	@ 0x50
 8001f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f4e:	f107 0320 	add.w	r3, r7, #32
 8001f52:	2230      	movs	r2, #48	@ 0x30
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f004 fe72 	bl	8006c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	4b28      	ldr	r3, [pc, #160]	@ (8002014 <SystemClock_Config+0xcc>)
 8001f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f74:	4a27      	ldr	r2, [pc, #156]	@ (8002014 <SystemClock_Config+0xcc>)
 8001f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f7c:	4b25      	ldr	r3, [pc, #148]	@ (8002014 <SystemClock_Config+0xcc>)
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f88:	2300      	movs	r3, #0
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	4b22      	ldr	r3, [pc, #136]	@ (8002018 <SystemClock_Config+0xd0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a21      	ldr	r2, [pc, #132]	@ (8002018 <SystemClock_Config+0xd0>)
 8001f92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	4b1f      	ldr	r3, [pc, #124]	@ (8002018 <SystemClock_Config+0xd0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fb8:	2308      	movs	r3, #8
 8001fba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001fbc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001fc0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fca:	f107 0320 	add.w	r3, r7, #32
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 f94e 	bl	8005270 <HAL_RCC_OscConfig>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001fda:	f000 fb59 	bl	8002690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fde:	230f      	movs	r3, #15
 8001fe0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001fee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ff0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ff4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ff6:	f107 030c 	add.w	r3, r7, #12
 8001ffa:	2105      	movs	r1, #5
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f003 fbaf 	bl	8005760 <HAL_RCC_ClockConfig>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002008:	f000 fb42 	bl	8002690 <Error_Handler>
  }
}
 800200c:	bf00      	nop
 800200e:	3750      	adds	r7, #80	@ 0x50
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40023800 	.word	0x40023800
 8002018:	40007000 	.word	0x40007000

0800201c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002020:	4b1b      	ldr	r3, [pc, #108]	@ (8002090 <MX_I2C3_Init+0x74>)
 8002022:	4a1c      	ldr	r2, [pc, #112]	@ (8002094 <MX_I2C3_Init+0x78>)
 8002024:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002026:	4b1a      	ldr	r3, [pc, #104]	@ (8002090 <MX_I2C3_Init+0x74>)
 8002028:	4a1b      	ldr	r2, [pc, #108]	@ (8002098 <MX_I2C3_Init+0x7c>)
 800202a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800202c:	4b18      	ldr	r3, [pc, #96]	@ (8002090 <MX_I2C3_Init+0x74>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002032:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <MX_I2C3_Init+0x74>)
 8002034:	2200      	movs	r2, #0
 8002036:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002038:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <MX_I2C3_Init+0x74>)
 800203a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800203e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002040:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <MX_I2C3_Init+0x74>)
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002046:	4b12      	ldr	r3, [pc, #72]	@ (8002090 <MX_I2C3_Init+0x74>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800204c:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <MX_I2C3_Init+0x74>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002052:	4b0f      	ldr	r3, [pc, #60]	@ (8002090 <MX_I2C3_Init+0x74>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002058:	480d      	ldr	r0, [pc, #52]	@ (8002090 <MX_I2C3_Init+0x74>)
 800205a:	f001 fdc3 	bl	8003be4 <HAL_I2C_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002064:	f000 fb14 	bl	8002690 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002068:	2100      	movs	r1, #0
 800206a:	4809      	ldr	r0, [pc, #36]	@ (8002090 <MX_I2C3_Init+0x74>)
 800206c:	f002 fdde 	bl	8004c2c <HAL_I2CEx_ConfigAnalogFilter>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002076:	f000 fb0b 	bl	8002690 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800207a:	2100      	movs	r1, #0
 800207c:	4804      	ldr	r0, [pc, #16]	@ (8002090 <MX_I2C3_Init+0x74>)
 800207e:	f002 fe11 	bl	8004ca4 <HAL_I2CEx_ConfigDigitalFilter>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002088:	f000 fb02 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20025a18 	.word	0x20025a18
 8002094:	40005c00 	.word	0x40005c00
 8002098:	000186a0 	.word	0x000186a0

0800209c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b09a      	sub	sp, #104	@ 0x68
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80020a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020a6:	2234      	movs	r2, #52	@ 0x34
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f004 fdc8 	bl	8006c40 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80020b0:	463b      	mov	r3, r7
 80020b2:	2234      	movs	r2, #52	@ 0x34
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 fdc2 	bl	8006c40 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80020bc:	4b4e      	ldr	r3, [pc, #312]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 80020be:	4a4f      	ldr	r2, [pc, #316]	@ (80021fc <MX_LTDC_Init+0x160>)
 80020c0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80020c2:	4b4d      	ldr	r3, [pc, #308]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80020c8:	4b4b      	ldr	r3, [pc, #300]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80020ce:	4b4a      	ldr	r3, [pc, #296]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80020d4:	4b48      	ldr	r3, [pc, #288]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80020da:	4b47      	ldr	r3, [pc, #284]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 80020dc:	2207      	movs	r2, #7
 80020de:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80020e0:	4b45      	ldr	r3, [pc, #276]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 80020e2:	2203      	movs	r2, #3
 80020e4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80020e6:	4b44      	ldr	r3, [pc, #272]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 80020e8:	220e      	movs	r2, #14
 80020ea:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80020ec:	4b42      	ldr	r3, [pc, #264]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 80020ee:	2205      	movs	r2, #5
 80020f0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80020f2:	4b41      	ldr	r3, [pc, #260]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 80020f4:	f240 228e 	movw	r2, #654	@ 0x28e
 80020f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80020fa:	4b3f      	ldr	r3, [pc, #252]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 80020fc:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8002100:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8002102:	4b3d      	ldr	r3, [pc, #244]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 8002104:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8002108:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800210a:	4b3b      	ldr	r3, [pc, #236]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 800210c:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002110:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002112:	4b39      	ldr	r3, [pc, #228]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800211a:	4b37      	ldr	r3, [pc, #220]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002122:	4b35      	ldr	r3, [pc, #212]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800212a:	4833      	ldr	r0, [pc, #204]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 800212c:	f002 fdfa 	bl	8004d24 <HAL_LTDC_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8002136:	f000 faab 	bl	8002690 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800214a:	2300      	movs	r3, #0
 800214c:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002156:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800215a:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800215c:	2305      	movs	r3, #5
 800215e:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800217e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002182:	2200      	movs	r2, #0
 8002184:	4619      	mov	r1, r3
 8002186:	481c      	ldr	r0, [pc, #112]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 8002188:	f002 fe9c 	bl	8004ec4 <HAL_LTDC_ConfigLayer>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8002192:	f000 fa7d 	bl	8002690 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80021b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021b6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80021b8:	2305      	movs	r3, #5
 80021ba:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80021da:	463b      	mov	r3, r7
 80021dc:	2201      	movs	r2, #1
 80021de:	4619      	mov	r1, r3
 80021e0:	4805      	ldr	r0, [pc, #20]	@ (80021f8 <MX_LTDC_Init+0x15c>)
 80021e2:	f002 fe6f 	bl	8004ec4 <HAL_LTDC_ConfigLayer>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80021ec:	f000 fa50 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80021f0:	bf00      	nop
 80021f2:	3768      	adds	r7, #104	@ 0x68
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20025a6c 	.word	0x20025a6c
 80021fc:	40016800 	.word	0x40016800

08002200 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <MX_RNG_Init+0x20>)
 8002206:	4a07      	ldr	r2, [pc, #28]	@ (8002224 <MX_RNG_Init+0x24>)
 8002208:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800220a:	4805      	ldr	r0, [pc, #20]	@ (8002220 <MX_RNG_Init+0x20>)
 800220c:	f003 fe74 	bl	8005ef8 <HAL_RNG_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002216:	f000 fa3b 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20025b14 	.word	0x20025b14
 8002224:	50060800 	.word	0x50060800

08002228 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800222c:	4b17      	ldr	r3, [pc, #92]	@ (800228c <MX_SPI5_Init+0x64>)
 800222e:	4a18      	ldr	r2, [pc, #96]	@ (8002290 <MX_SPI5_Init+0x68>)
 8002230:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002232:	4b16      	ldr	r3, [pc, #88]	@ (800228c <MX_SPI5_Init+0x64>)
 8002234:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002238:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800223a:	4b14      	ldr	r3, [pc, #80]	@ (800228c <MX_SPI5_Init+0x64>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002240:	4b12      	ldr	r3, [pc, #72]	@ (800228c <MX_SPI5_Init+0x64>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002246:	4b11      	ldr	r3, [pc, #68]	@ (800228c <MX_SPI5_Init+0x64>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800224c:	4b0f      	ldr	r3, [pc, #60]	@ (800228c <MX_SPI5_Init+0x64>)
 800224e:	2200      	movs	r2, #0
 8002250:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002252:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <MX_SPI5_Init+0x64>)
 8002254:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002258:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800225a:	4b0c      	ldr	r3, [pc, #48]	@ (800228c <MX_SPI5_Init+0x64>)
 800225c:	2200      	movs	r2, #0
 800225e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002260:	4b0a      	ldr	r3, [pc, #40]	@ (800228c <MX_SPI5_Init+0x64>)
 8002262:	2200      	movs	r2, #0
 8002264:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002266:	4b09      	ldr	r3, [pc, #36]	@ (800228c <MX_SPI5_Init+0x64>)
 8002268:	2200      	movs	r2, #0
 800226a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800226c:	4b07      	ldr	r3, [pc, #28]	@ (800228c <MX_SPI5_Init+0x64>)
 800226e:	2200      	movs	r2, #0
 8002270:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002272:	4b06      	ldr	r3, [pc, #24]	@ (800228c <MX_SPI5_Init+0x64>)
 8002274:	220a      	movs	r2, #10
 8002276:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002278:	4804      	ldr	r0, [pc, #16]	@ (800228c <MX_SPI5_Init+0x64>)
 800227a:	f003 fe67 	bl	8005f4c <HAL_SPI_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002284:	f000 fa04 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20025b24 	.word	0x20025b24
 8002290:	40015000 	.word	0x40015000

08002294 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229a:	f107 0308 	add.w	r3, r7, #8
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a8:	463b      	mov	r3, r7
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022b0:	4b1e      	ldr	r3, [pc, #120]	@ (800232c <MX_TIM2_Init+0x98>)
 80022b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 80022b8:	4b1c      	ldr	r3, [pc, #112]	@ (800232c <MX_TIM2_Init+0x98>)
 80022ba:	2203      	movs	r2, #3
 80022bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022be:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <MX_TIM2_Init+0x98>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000000;
 80022c4:	4b19      	ldr	r3, [pc, #100]	@ (800232c <MX_TIM2_Init+0x98>)
 80022c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002330 <MX_TIM2_Init+0x9c>)
 80022c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ca:	4b18      	ldr	r3, [pc, #96]	@ (800232c <MX_TIM2_Init+0x98>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d0:	4b16      	ldr	r3, [pc, #88]	@ (800232c <MX_TIM2_Init+0x98>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022d6:	4815      	ldr	r0, [pc, #84]	@ (800232c <MX_TIM2_Init+0x98>)
 80022d8:	f004 f918 	bl	800650c <HAL_TIM_Base_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80022e2:	f000 f9d5 	bl	8002690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022ec:	f107 0308 	add.w	r3, r7, #8
 80022f0:	4619      	mov	r1, r3
 80022f2:	480e      	ldr	r0, [pc, #56]	@ (800232c <MX_TIM2_Init+0x98>)
 80022f4:	f004 f9f9 	bl	80066ea <HAL_TIM_ConfigClockSource>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80022fe:	f000 f9c7 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800230a:	463b      	mov	r3, r7
 800230c:	4619      	mov	r1, r3
 800230e:	4807      	ldr	r0, [pc, #28]	@ (800232c <MX_TIM2_Init+0x98>)
 8002310:	f004 fbf8 	bl	8006b04 <HAL_TIMEx_MasterConfigSynchronization>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800231a:	f000 f9b9 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

	__NVIC_EnableIRQ(TIM2_IRQ_NUM);
 800231e:	201c      	movs	r0, #28
 8002320:	f7ff fdda 	bl	8001ed8 <__NVIC_EnableIRQ>

  /* USER CODE END TIM2_Init 2 */

}
 8002324:	bf00      	nop
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20025b7c 	.word	0x20025b7c
 8002330:	00f42400 	.word	0x00f42400

08002334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08e      	sub	sp, #56	@ 0x38
 8002338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
 800234e:	4bb2      	ldr	r3, [pc, #712]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	4ab1      	ldr	r2, [pc, #708]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 8002354:	f043 0304 	orr.w	r3, r3, #4
 8002358:	6313      	str	r3, [r2, #48]	@ 0x30
 800235a:	4baf      	ldr	r3, [pc, #700]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	623b      	str	r3, [r7, #32]
 8002364:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	4bab      	ldr	r3, [pc, #684]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	4aaa      	ldr	r2, [pc, #680]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 8002370:	f043 0320 	orr.w	r3, r3, #32
 8002374:	6313      	str	r3, [r2, #48]	@ 0x30
 8002376:	4ba8      	ldr	r3, [pc, #672]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	4ba4      	ldr	r3, [pc, #656]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	4aa3      	ldr	r2, [pc, #652]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 800238c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002390:	6313      	str	r3, [r2, #48]	@ 0x30
 8002392:	4ba1      	ldr	r3, [pc, #644]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	4b9d      	ldr	r3, [pc, #628]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	4a9c      	ldr	r2, [pc, #624]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ae:	4b9a      	ldr	r3, [pc, #616]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	4b96      	ldr	r3, [pc, #600]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	4a95      	ldr	r2, [pc, #596]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 80023c4:	f043 0302 	orr.w	r3, r3, #2
 80023c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ca:	4b93      	ldr	r3, [pc, #588]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	4b8f      	ldr	r3, [pc, #572]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	4a8e      	ldr	r2, [pc, #568]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 80023e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e6:	4b8c      	ldr	r3, [pc, #560]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	4b88      	ldr	r3, [pc, #544]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	4a87      	ldr	r2, [pc, #540]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 80023fc:	f043 0310 	orr.w	r3, r3, #16
 8002400:	6313      	str	r3, [r2, #48]	@ 0x30
 8002402:	4b85      	ldr	r3, [pc, #532]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	4b81      	ldr	r3, [pc, #516]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	4a80      	ldr	r2, [pc, #512]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 8002418:	f043 0308 	orr.w	r3, r3, #8
 800241c:	6313      	str	r3, [r2, #48]	@ 0x30
 800241e:	4b7e      	ldr	r3, [pc, #504]	@ (8002618 <MX_GPIO_Init+0x2e4>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800242a:	2200      	movs	r2, #0
 800242c:	2116      	movs	r1, #22
 800242e:	487b      	ldr	r0, [pc, #492]	@ (800261c <MX_GPIO_Init+0x2e8>)
 8002430:	f001 fbbe 	bl	8003bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002434:	2200      	movs	r2, #0
 8002436:	2180      	movs	r1, #128	@ 0x80
 8002438:	4879      	ldr	r0, [pc, #484]	@ (8002620 <MX_GPIO_Init+0x2ec>)
 800243a:	f001 fbb9 	bl	8003bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800243e:	2200      	movs	r2, #0
 8002440:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002444:	4877      	ldr	r0, [pc, #476]	@ (8002624 <MX_GPIO_Init+0x2f0>)
 8002446:	f001 fbb3 	bl	8003bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800244a:	2200      	movs	r2, #0
 800244c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002450:	4875      	ldr	r0, [pc, #468]	@ (8002628 <MX_GPIO_Init+0x2f4>)
 8002452:	f001 fbad 	bl	8003bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002456:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002468:	230c      	movs	r3, #12
 800246a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800246c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002470:	4619      	mov	r1, r3
 8002472:	486e      	ldr	r0, [pc, #440]	@ (800262c <MX_GPIO_Init+0x2f8>)
 8002474:	f001 f8e4 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002478:	2301      	movs	r3, #1
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002488:	230c      	movs	r3, #12
 800248a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800248c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002490:	4619      	mov	r1, r3
 8002492:	4862      	ldr	r0, [pc, #392]	@ (800261c <MX_GPIO_Init+0x2e8>)
 8002494:	f001 f8d4 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002498:	2316      	movs	r3, #22
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249c:	2301      	movs	r3, #1
 800249e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a4:	2300      	movs	r3, #0
 80024a6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ac:	4619      	mov	r1, r3
 80024ae:	485b      	ldr	r0, [pc, #364]	@ (800261c <MX_GPIO_Init+0x2e8>)
 80024b0:	f001 f8c6 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80024b4:	f248 0307 	movw	r3, #32775	@ 0x8007
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80024ba:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80024be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024c8:	4619      	mov	r1, r3
 80024ca:	4855      	ldr	r0, [pc, #340]	@ (8002620 <MX_GPIO_Init+0x2ec>)
 80024cc:	f001 f8b8 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80024d0:	2380      	movs	r3, #128	@ 0x80
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d4:	2301      	movs	r3, #1
 80024d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80024e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024e4:	4619      	mov	r1, r3
 80024e6:	484e      	ldr	r0, [pc, #312]	@ (8002620 <MX_GPIO_Init+0x2ec>)
 80024e8:	f001 f8aa 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80024ec:	2320      	movs	r3, #32
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80024f0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80024f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80024fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024fe:	4619      	mov	r1, r3
 8002500:	4846      	ldr	r0, [pc, #280]	@ (800261c <MX_GPIO_Init+0x2e8>)
 8002502:	f001 f89d 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002506:	2304      	movs	r3, #4
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250a:	2300      	movs	r3, #0
 800250c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002512:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002516:	4619      	mov	r1, r3
 8002518:	4845      	ldr	r0, [pc, #276]	@ (8002630 <MX_GPIO_Init+0x2fc>)
 800251a:	f001 f891 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800251e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252c:	2303      	movs	r3, #3
 800252e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002530:	230c      	movs	r3, #12
 8002532:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002534:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002538:	4619      	mov	r1, r3
 800253a:	483b      	ldr	r0, [pc, #236]	@ (8002628 <MX_GPIO_Init+0x2f4>)
 800253c:	f001 f880 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002540:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002546:	2302      	movs	r3, #2
 8002548:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254e:	2303      	movs	r3, #3
 8002550:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002552:	230c      	movs	r3, #12
 8002554:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800255a:	4619      	mov	r1, r3
 800255c:	4835      	ldr	r0, [pc, #212]	@ (8002634 <MX_GPIO_Init+0x300>)
 800255e:	f001 f86f 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002562:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002566:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002570:	2300      	movs	r3, #0
 8002572:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002574:	230c      	movs	r3, #12
 8002576:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800257c:	4619      	mov	r1, r3
 800257e:	482c      	ldr	r0, [pc, #176]	@ (8002630 <MX_GPIO_Init+0x2fc>)
 8002580:	f001 f85e 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002584:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002588:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800258a:	2300      	movs	r3, #0
 800258c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002596:	4619      	mov	r1, r3
 8002598:	4825      	ldr	r0, [pc, #148]	@ (8002630 <MX_GPIO_Init+0x2fc>)
 800259a:	f001 f851 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800259e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80025a2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ac:	2303      	movs	r3, #3
 80025ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025b0:	230c      	movs	r3, #12
 80025b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025b8:	4619      	mov	r1, r3
 80025ba:	481a      	ldr	r0, [pc, #104]	@ (8002624 <MX_GPIO_Init+0x2f0>)
 80025bc:	f001 f840 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80025c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c6:	2300      	movs	r3, #0
 80025c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80025ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025d2:	4619      	mov	r1, r3
 80025d4:	4813      	ldr	r0, [pc, #76]	@ (8002624 <MX_GPIO_Init+0x2f0>)
 80025d6:	f001 f833 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80025da:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e0:	2301      	movs	r3, #1
 80025e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e8:	2300      	movs	r3, #0
 80025ea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025f0:	4619      	mov	r1, r3
 80025f2:	480c      	ldr	r0, [pc, #48]	@ (8002624 <MX_GPIO_Init+0x2f0>)
 80025f4:	f001 f824 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80025f8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80025fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fe:	2302      	movs	r3, #2
 8002600:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002606:	2303      	movs	r3, #3
 8002608:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800260a:	2307      	movs	r3, #7
 800260c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002612:	4619      	mov	r1, r3
 8002614:	e010      	b.n	8002638 <MX_GPIO_Init+0x304>
 8002616:	bf00      	nop
 8002618:	40023800 	.word	0x40023800
 800261c:	40020800 	.word	0x40020800
 8002620:	40020000 	.word	0x40020000
 8002624:	40020c00 	.word	0x40020c00
 8002628:	40021800 	.word	0x40021800
 800262c:	40021400 	.word	0x40021400
 8002630:	40020400 	.word	0x40020400
 8002634:	40021000 	.word	0x40021000
 8002638:	4812      	ldr	r0, [pc, #72]	@ (8002684 <MX_GPIO_Init+0x350>)
 800263a:	f001 f801 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800263e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002644:	2301      	movs	r3, #1
 8002646:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002650:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002654:	4619      	mov	r1, r3
 8002656:	480c      	ldr	r0, [pc, #48]	@ (8002688 <MX_GPIO_Init+0x354>)
 8002658:	f000 fff2 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800265c:	2360      	movs	r3, #96	@ 0x60
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002668:	2303      	movs	r3, #3
 800266a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800266c:	230c      	movs	r3, #12
 800266e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002674:	4619      	mov	r1, r3
 8002676:	4805      	ldr	r0, [pc, #20]	@ (800268c <MX_GPIO_Init+0x358>)
 8002678:	f000 ffe2 	bl	8003640 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800267c:	bf00      	nop
 800267e:	3738      	adds	r7, #56	@ 0x38
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40020000 	.word	0x40020000
 8002688:	40021800 	.word	0x40021800
 800268c:	40020400 	.word	0x40020400

08002690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002694:	b672      	cpsid	i
}
 8002696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002698:	bf00      	nop
 800269a:	e7fd      	b.n	8002698 <Error_Handler+0x8>

0800269c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	4b10      	ldr	r3, [pc, #64]	@ (80026e8 <HAL_MspInit+0x4c>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	4a0f      	ldr	r2, [pc, #60]	@ (80026e8 <HAL_MspInit+0x4c>)
 80026ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026b2:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <HAL_MspInit+0x4c>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <HAL_MspInit+0x4c>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	4a08      	ldr	r2, [pc, #32]	@ (80026e8 <HAL_MspInit+0x4c>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ce:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_MspInit+0x4c>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026da:	2007      	movs	r0, #7
 80026dc:	f000 ff7c 	bl	80035d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023800 	.word	0x40023800

080026ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	@ 0x28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a29      	ldr	r2, [pc, #164]	@ (80027b0 <HAL_I2C_MspInit+0xc4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d14b      	bne.n	80027a6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	4b28      	ldr	r3, [pc, #160]	@ (80027b4 <HAL_I2C_MspInit+0xc8>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	4a27      	ldr	r2, [pc, #156]	@ (80027b4 <HAL_I2C_MspInit+0xc8>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	6313      	str	r3, [r2, #48]	@ 0x30
 800271e:	4b25      	ldr	r3, [pc, #148]	@ (80027b4 <HAL_I2C_MspInit+0xc8>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	4b21      	ldr	r3, [pc, #132]	@ (80027b4 <HAL_I2C_MspInit+0xc8>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	4a20      	ldr	r2, [pc, #128]	@ (80027b4 <HAL_I2C_MspInit+0xc8>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6313      	str	r3, [r2, #48]	@ 0x30
 800273a:	4b1e      	ldr	r3, [pc, #120]	@ (80027b4 <HAL_I2C_MspInit+0xc8>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002746:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800274a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800274c:	2312      	movs	r3, #18
 800274e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002754:	2300      	movs	r3, #0
 8002756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002758:	2304      	movs	r3, #4
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	4619      	mov	r1, r3
 8002762:	4815      	ldr	r0, [pc, #84]	@ (80027b8 <HAL_I2C_MspInit+0xcc>)
 8002764:	f000 ff6c 	bl	8003640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002768:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800276c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800276e:	2312      	movs	r3, #18
 8002770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002776:	2300      	movs	r3, #0
 8002778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800277a:	2304      	movs	r3, #4
 800277c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800277e:	f107 0314 	add.w	r3, r7, #20
 8002782:	4619      	mov	r1, r3
 8002784:	480d      	ldr	r0, [pc, #52]	@ (80027bc <HAL_I2C_MspInit+0xd0>)
 8002786:	f000 ff5b 	bl	8003640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	4b09      	ldr	r3, [pc, #36]	@ (80027b4 <HAL_I2C_MspInit+0xc8>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	4a08      	ldr	r2, [pc, #32]	@ (80027b4 <HAL_I2C_MspInit+0xc8>)
 8002794:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002798:	6413      	str	r3, [r2, #64]	@ 0x40
 800279a:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <HAL_I2C_MspInit+0xc8>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80027a6:	bf00      	nop
 80027a8:	3728      	adds	r7, #40	@ 0x28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40005c00 	.word	0x40005c00
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40020800 	.word	0x40020800
 80027bc:	40020000 	.word	0x40020000

080027c0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b09a      	sub	sp, #104	@ 0x68
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027dc:	2230      	movs	r2, #48	@ 0x30
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f004 fa2d 	bl	8006c40 <memset>
  if(hltdc->Instance==LTDC)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a81      	ldr	r2, [pc, #516]	@ (80029f0 <HAL_LTDC_MspInit+0x230>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	f040 80fb 	bne.w	80029e8 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80027f2:	2308      	movs	r3, #8
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 80027f6:	23c8      	movs	r3, #200	@ 0xc8
 80027f8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80027fa:	2302      	movs	r3, #2
 80027fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 80027fe:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002802:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002808:	4618      	mov	r0, r3
 800280a:	f003 f9b5 	bl	8005b78 <HAL_RCCEx_PeriphCLKConfig>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002814:	f7ff ff3c 	bl	8002690 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002818:	2300      	movs	r3, #0
 800281a:	623b      	str	r3, [r7, #32]
 800281c:	4b75      	ldr	r3, [pc, #468]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 800281e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002820:	4a74      	ldr	r2, [pc, #464]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 8002822:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002826:	6453      	str	r3, [r2, #68]	@ 0x44
 8002828:	4b72      	ldr	r3, [pc, #456]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 800282a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002830:	623b      	str	r3, [r7, #32]
 8002832:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002834:	2300      	movs	r3, #0
 8002836:	61fb      	str	r3, [r7, #28]
 8002838:	4b6e      	ldr	r3, [pc, #440]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 800283a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283c:	4a6d      	ldr	r2, [pc, #436]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 800283e:	f043 0320 	orr.w	r3, r3, #32
 8002842:	6313      	str	r3, [r2, #48]	@ 0x30
 8002844:	4b6b      	ldr	r3, [pc, #428]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	4b67      	ldr	r3, [pc, #412]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002858:	4a66      	ldr	r2, [pc, #408]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002860:	4b64      	ldr	r3, [pc, #400]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	4b60      	ldr	r3, [pc, #384]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002874:	4a5f      	ldr	r2, [pc, #380]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 8002876:	f043 0302 	orr.w	r3, r3, #2
 800287a:	6313      	str	r3, [r2, #48]	@ 0x30
 800287c:	4b5d      	ldr	r3, [pc, #372]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	4b59      	ldr	r3, [pc, #356]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	4a58      	ldr	r2, [pc, #352]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 8002892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002896:	6313      	str	r3, [r2, #48]	@ 0x30
 8002898:	4b56      	ldr	r3, [pc, #344]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	4b52      	ldr	r3, [pc, #328]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 80028aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ac:	4a51      	ldr	r2, [pc, #324]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 80028ae:	f043 0304 	orr.w	r3, r3, #4
 80028b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b4:	4b4f      	ldr	r3, [pc, #316]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 80028b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028c0:	2300      	movs	r3, #0
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	4b4b      	ldr	r3, [pc, #300]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 80028c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c8:	4a4a      	ldr	r2, [pc, #296]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 80028ca:	f043 0308 	orr.w	r3, r3, #8
 80028ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d0:	4b48      	ldr	r3, [pc, #288]	@ (80029f4 <HAL_LTDC_MspInit+0x234>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80028dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028e0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e2:	2302      	movs	r3, #2
 80028e4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	2300      	movs	r3, #0
 80028ec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028ee:	230e      	movs	r3, #14
 80028f0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80028f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028f6:	4619      	mov	r1, r3
 80028f8:	483f      	ldr	r0, [pc, #252]	@ (80029f8 <HAL_LTDC_MspInit+0x238>)
 80028fa:	f000 fea1 	bl	8003640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80028fe:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002902:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002904:	2302      	movs	r3, #2
 8002906:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290c:	2300      	movs	r3, #0
 800290e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002910:	230e      	movs	r3, #14
 8002912:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002918:	4619      	mov	r1, r3
 800291a:	4838      	ldr	r0, [pc, #224]	@ (80029fc <HAL_LTDC_MspInit+0x23c>)
 800291c:	f000 fe90 	bl	8003640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002920:	2303      	movs	r3, #3
 8002922:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	2300      	movs	r3, #0
 800292e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002930:	2309      	movs	r3, #9
 8002932:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002934:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002938:	4619      	mov	r1, r3
 800293a:	4831      	ldr	r0, [pc, #196]	@ (8002a00 <HAL_LTDC_MspInit+0x240>)
 800293c:	f000 fe80 	bl	8003640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002940:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002944:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294e:	2300      	movs	r3, #0
 8002950:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002952:	230e      	movs	r3, #14
 8002954:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002956:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800295a:	4619      	mov	r1, r3
 800295c:	4828      	ldr	r0, [pc, #160]	@ (8002a00 <HAL_LTDC_MspInit+0x240>)
 800295e:	f000 fe6f 	bl	8003640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002962:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002966:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002968:	2302      	movs	r3, #2
 800296a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2300      	movs	r3, #0
 8002972:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002974:	230e      	movs	r3, #14
 8002976:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002978:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800297c:	4619      	mov	r1, r3
 800297e:	4821      	ldr	r0, [pc, #132]	@ (8002a04 <HAL_LTDC_MspInit+0x244>)
 8002980:	f000 fe5e 	bl	8003640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002984:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002988:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002996:	230e      	movs	r3, #14
 8002998:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800299e:	4619      	mov	r1, r3
 80029a0:	4819      	ldr	r0, [pc, #100]	@ (8002a08 <HAL_LTDC_MspInit+0x248>)
 80029a2:	f000 fe4d 	bl	8003640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80029a6:	2348      	movs	r3, #72	@ 0x48
 80029a8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029aa:	2302      	movs	r3, #2
 80029ac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	2300      	movs	r3, #0
 80029b4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80029b6:	230e      	movs	r3, #14
 80029b8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80029be:	4619      	mov	r1, r3
 80029c0:	4812      	ldr	r0, [pc, #72]	@ (8002a0c <HAL_LTDC_MspInit+0x24c>)
 80029c2:	f000 fe3d 	bl	8003640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80029c6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80029ca:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80029d8:	2309      	movs	r3, #9
 80029da:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80029e0:	4619      	mov	r1, r3
 80029e2:	4808      	ldr	r0, [pc, #32]	@ (8002a04 <HAL_LTDC_MspInit+0x244>)
 80029e4:	f000 fe2c 	bl	8003640 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80029e8:	bf00      	nop
 80029ea:	3768      	adds	r7, #104	@ 0x68
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40016800 	.word	0x40016800
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40021400 	.word	0x40021400
 80029fc:	40020000 	.word	0x40020000
 8002a00:	40020400 	.word	0x40020400
 8002a04:	40021800 	.word	0x40021800
 8002a08:	40020800 	.word	0x40020800
 8002a0c:	40020c00 	.word	0x40020c00

08002a10 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a4c <HAL_RNG_MspInit+0x3c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d10d      	bne.n	8002a3e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	4b0a      	ldr	r3, [pc, #40]	@ (8002a50 <HAL_RNG_MspInit+0x40>)
 8002a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a2a:	4a09      	ldr	r2, [pc, #36]	@ (8002a50 <HAL_RNG_MspInit+0x40>)
 8002a2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a30:	6353      	str	r3, [r2, #52]	@ 0x34
 8002a32:	4b07      	ldr	r3, [pc, #28]	@ (8002a50 <HAL_RNG_MspInit+0x40>)
 8002a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	50060800 	.word	0x50060800
 8002a50:	40023800 	.word	0x40023800

08002a54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	@ 0x28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a19      	ldr	r2, [pc, #100]	@ (8002ad8 <HAL_SPI_MspInit+0x84>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d12c      	bne.n	8002ad0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	4b18      	ldr	r3, [pc, #96]	@ (8002adc <HAL_SPI_MspInit+0x88>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7e:	4a17      	ldr	r2, [pc, #92]	@ (8002adc <HAL_SPI_MspInit+0x88>)
 8002a80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a86:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <HAL_SPI_MspInit+0x88>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <HAL_SPI_MspInit+0x88>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	4a10      	ldr	r2, [pc, #64]	@ (8002adc <HAL_SPI_MspInit+0x88>)
 8002a9c:	f043 0320 	orr.w	r3, r3, #32
 8002aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <HAL_SPI_MspInit+0x88>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002aae:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002ac0:	2305      	movs	r3, #5
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4805      	ldr	r0, [pc, #20]	@ (8002ae0 <HAL_SPI_MspInit+0x8c>)
 8002acc:	f000 fdb8 	bl	8003640 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002ad0:	bf00      	nop
 8002ad2:	3728      	adds	r7, #40	@ 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40015000 	.word	0x40015000
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40021400 	.word	0x40021400

08002ae4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a08      	ldr	r2, [pc, #32]	@ (8002b14 <HAL_SPI_MspDeInit+0x30>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d10a      	bne.n	8002b0c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002af6:	4b08      	ldr	r3, [pc, #32]	@ (8002b18 <HAL_SPI_MspDeInit+0x34>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	4a07      	ldr	r2, [pc, #28]	@ (8002b18 <HAL_SPI_MspDeInit+0x34>)
 8002afc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b00:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002b02:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002b06:	4805      	ldr	r0, [pc, #20]	@ (8002b1c <HAL_SPI_MspDeInit+0x38>)
 8002b08:	f000 ff46 	bl	8003998 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40015000 	.word	0x40015000
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40021400 	.word	0x40021400

08002b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b30:	d10d      	bne.n	8002b4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	4b09      	ldr	r3, [pc, #36]	@ (8002b5c <HAL_TIM_Base_MspInit+0x3c>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	4a08      	ldr	r2, [pc, #32]	@ (8002b5c <HAL_TIM_Base_MspInit+0x3c>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b42:	4b06      	ldr	r3, [pc, #24]	@ (8002b5c <HAL_TIM_Base_MspInit+0x3c>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800

08002b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <NMI_Handler+0x4>

08002b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b6c:	bf00      	nop
 8002b6e:	e7fd      	b.n	8002b6c <HardFault_Handler+0x4>

08002b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <MemManage_Handler+0x4>

08002b78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <BusFault_Handler+0x4>

08002b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b84:	bf00      	nop
 8002b86:	e7fd      	b.n	8002b84 <UsageFault_Handler+0x4>

08002b88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b96:	b480      	push	{r7}
 8002b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bb6:	f000 fc19 	bl	80033ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002bc4:	f000 f9ce 	bl	8002f64 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002bc8:	f000 f98e 	bl	8002ee8 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002bcc:	2202      	movs	r2, #2
 8002bce:	2103      	movs	r1, #3
 8002bd0:	2082      	movs	r0, #130	@ 0x82
 8002bd2:	f000 fa1b 	bl	800300c <I2C3_Write>
    HAL_Delay(5);
 8002bd6:	2005      	movs	r0, #5
 8002bd8:	f000 fc28 	bl	800342c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2103      	movs	r1, #3
 8002be0:	2082      	movs	r0, #130	@ 0x82
 8002be2:	f000 fa13 	bl	800300c <I2C3_Write>
    HAL_Delay(2);
 8002be6:	2002      	movs	r0, #2
 8002be8:	f000 fc20 	bl	800342c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002bec:	1cba      	adds	r2, r7, #2
 8002bee:	2302      	movs	r3, #2
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	2082      	movs	r0, #130	@ 0x82
 8002bf4:	f000 fa5a 	bl	80030ac <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002bf8:	887b      	ldrh	r3, [r7, #2]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002bfe:	887b      	ldrh	r3, [r7, #2]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002c0a:	88fb      	ldrh	r3, [r7, #6]
 8002c0c:	f640 0211 	movw	r2, #2065	@ 0x811
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d001      	beq.n	8002c18 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e075      	b.n	8002d04 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002c18:	2202      	movs	r2, #2
 8002c1a:	2103      	movs	r1, #3
 8002c1c:	2082      	movs	r0, #130	@ 0x82
 8002c1e:	f000 f9f5 	bl	800300c <I2C3_Write>
    HAL_Delay(5);
 8002c22:	2005      	movs	r0, #5
 8002c24:	f000 fc02 	bl	800342c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2103      	movs	r1, #3
 8002c2c:	2082      	movs	r0, #130	@ 0x82
 8002c2e:	f000 f9ed 	bl	800300c <I2C3_Write>
    HAL_Delay(2);
 8002c32:	2002      	movs	r0, #2
 8002c34:	f000 fbfa 	bl	800342c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002c38:	2004      	movs	r0, #4
 8002c3a:	f000 f867 	bl	8002d0c <STMPE811_Read>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002c42:	797b      	ldrb	r3, [r7, #5]
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002c4a:	797b      	ldrb	r3, [r7, #5]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2104      	movs	r1, #4
 8002c50:	2082      	movs	r0, #130	@ 0x82
 8002c52:	f000 f9db 	bl	800300c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002c56:	2004      	movs	r0, #4
 8002c58:	f000 f858 	bl	8002d0c <STMPE811_Read>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002c60:	797b      	ldrb	r3, [r7, #5]
 8002c62:	f023 0302 	bic.w	r3, r3, #2
 8002c66:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002c68:	797b      	ldrb	r3, [r7, #5]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2104      	movs	r1, #4
 8002c6e:	2082      	movs	r0, #130	@ 0x82
 8002c70:	f000 f9cc 	bl	800300c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002c74:	2249      	movs	r2, #73	@ 0x49
 8002c76:	2120      	movs	r1, #32
 8002c78:	2082      	movs	r0, #130	@ 0x82
 8002c7a:	f000 f9c7 	bl	800300c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002c7e:	2002      	movs	r0, #2
 8002c80:	f000 fbd4 	bl	800342c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002c84:	2201      	movs	r2, #1
 8002c86:	2121      	movs	r1, #33	@ 0x21
 8002c88:	2082      	movs	r0, #130	@ 0x82
 8002c8a:	f000 f9bf 	bl	800300c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002c8e:	2017      	movs	r0, #23
 8002c90:	f000 f83c 	bl	8002d0c <STMPE811_Read>
 8002c94:	4603      	mov	r3, r0
 8002c96:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002c98:	797b      	ldrb	r3, [r7, #5]
 8002c9a:	f043 031e 	orr.w	r3, r3, #30
 8002c9e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002ca0:	797b      	ldrb	r3, [r7, #5]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2117      	movs	r1, #23
 8002ca6:	2082      	movs	r0, #130	@ 0x82
 8002ca8:	f000 f9b0 	bl	800300c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002cac:	229a      	movs	r2, #154	@ 0x9a
 8002cae:	2141      	movs	r1, #65	@ 0x41
 8002cb0:	2082      	movs	r0, #130	@ 0x82
 8002cb2:	f000 f9ab 	bl	800300c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	214a      	movs	r1, #74	@ 0x4a
 8002cba:	2082      	movs	r0, #130	@ 0x82
 8002cbc:	f000 f9a6 	bl	800300c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	214b      	movs	r1, #75	@ 0x4b
 8002cc4:	2082      	movs	r0, #130	@ 0x82
 8002cc6:	f000 f9a1 	bl	800300c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	214b      	movs	r1, #75	@ 0x4b
 8002cce:	2082      	movs	r0, #130	@ 0x82
 8002cd0:	f000 f99c 	bl	800300c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	2156      	movs	r1, #86	@ 0x56
 8002cd8:	2082      	movs	r0, #130	@ 0x82
 8002cda:	f000 f997 	bl	800300c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002cde:	2201      	movs	r2, #1
 8002ce0:	2158      	movs	r1, #88	@ 0x58
 8002ce2:	2082      	movs	r0, #130	@ 0x82
 8002ce4:	f000 f992 	bl	800300c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002ce8:	2203      	movs	r2, #3
 8002cea:	2140      	movs	r1, #64	@ 0x40
 8002cec:	2082      	movs	r0, #130	@ 0x82
 8002cee:	f000 f98d 	bl	800300c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002cf2:	22ff      	movs	r2, #255	@ 0xff
 8002cf4:	210b      	movs	r1, #11
 8002cf6:	2082      	movs	r0, #130	@ 0x82
 8002cf8:	f000 f988 	bl	800300c <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002cfc:	20c8      	movs	r0, #200	@ 0xc8
 8002cfe:	f000 fb95 	bl	800342c <HAL_Delay>

    return STMPE811_State_Ok;
 8002d02:	2302      	movs	r3, #2

}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002d16:	f107 020f 	add.w	r2, r7, #15
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	2082      	movs	r0, #130	@ 0x82
 8002d20:	f000 f99e 	bl	8003060 <I2C3_Read>

    return readData;
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	791a      	ldrb	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002d3e:	2040      	movs	r0, #64	@ 0x40
 8002d40:	f7ff ffe4 	bl	8002d0c <STMPE811_Read>
 8002d44:	4603      	mov	r3, r0
 8002d46:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	db0e      	blt.n	8002d6e <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002d56:	2201      	movs	r2, #1
 8002d58:	214b      	movs	r1, #75	@ 0x4b
 8002d5a:	2082      	movs	r0, #130	@ 0x82
 8002d5c:	f000 f956 	bl	800300c <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002d60:	2200      	movs	r2, #0
 8002d62:	214b      	movs	r1, #75	@ 0x4b
 8002d64:	2082      	movs	r0, #130	@ 0x82
 8002d66:	f000 f951 	bl	800300c <I2C3_Write>

        return STMPE811_State_Released;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0a7      	b.n	8002ebe <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	799b      	ldrb	r3, [r3, #6]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d117      	bne.n	8002da6 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 f9b8 	bl	80030f0 <TM_STMPE811_ReadX>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	885b      	ldrh	r3, [r3, #2]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fa0d 	bl	80031b0 <TM_STMPE811_ReadY>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	805a      	strh	r2, [r3, #2]
 8002da4:	e048      	b.n	8002e38 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	799b      	ldrb	r3, [r3, #6]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d112      	bne.n	8002dd4 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 f99c 	bl	80030f0 <TM_STMPE811_ReadX>
 8002db8:	4603      	mov	r3, r0
 8002dba:	461a      	mov	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	885b      	ldrh	r3, [r3, #2]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 f9f3 	bl	80031b0 <TM_STMPE811_ReadY>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461a      	mov	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	805a      	strh	r2, [r3, #2]
 8002dd2:	e031      	b.n	8002e38 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	799b      	ldrb	r3, [r3, #6]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d115      	bne.n	8002e08 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	885b      	ldrh	r3, [r3, #2]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 f985 	bl	80030f0 <TM_STMPE811_ReadX>
 8002de6:	4603      	mov	r3, r0
 8002de8:	461a      	mov	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 f9dc 	bl	80031b0 <TM_STMPE811_ReadY>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002dfe:	3301      	adds	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	801a      	strh	r2, [r3, #0]
 8002e06:	e017      	b.n	8002e38 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	799b      	ldrb	r3, [r3, #6]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d113      	bne.n	8002e38 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 f96b 	bl	80030f0 <TM_STMPE811_ReadX>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f9c0 	bl	80031b0 <TM_STMPE811_ReadY>
 8002e30:	4603      	mov	r3, r0
 8002e32:	461a      	mov	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002e38:	2201      	movs	r2, #1
 8002e3a:	214b      	movs	r1, #75	@ 0x4b
 8002e3c:	2082      	movs	r0, #130	@ 0x82
 8002e3e:	f000 f8e5 	bl	800300c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002e42:	2200      	movs	r2, #0
 8002e44:	214b      	movs	r1, #75	@ 0x4b
 8002e46:	2082      	movs	r0, #130	@ 0x82
 8002e48:	f000 f8e0 	bl	800300c <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	799b      	ldrb	r3, [r3, #6]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <STMPE811_ReadTouch+0x12e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	799b      	ldrb	r3, [r3, #6]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d115      	bne.n	8002e88 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d027      	beq.n	8002eb4 <STMPE811_ReadTouch+0x186>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	2bee      	cmp	r3, #238	@ 0xee
 8002e6a:	d823      	bhi.n	8002eb4 <STMPE811_ReadTouch+0x186>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	885b      	ldrh	r3, [r3, #2]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01f      	beq.n	8002eb4 <STMPE811_ReadTouch+0x186>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	885b      	ldrh	r3, [r3, #2]
 8002e78:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002e7c:	d81a      	bhi.n	8002eb4 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e01a      	b.n	8002ebe <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d012      	beq.n	8002eb6 <STMPE811_ReadTouch+0x188>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002e98:	d80d      	bhi.n	8002eb6 <STMPE811_ReadTouch+0x188>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	885b      	ldrh	r3, [r3, #2]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <STMPE811_ReadTouch+0x188>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	885b      	ldrh	r3, [r3, #2]
 8002ea6:	2bee      	cmp	r3, #238	@ 0xee
 8002ea8:	d805      	bhi.n	8002eb6 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e004      	b.n	8002ebe <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002eb4:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002ebc:	2301      	movs	r3, #1
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002ecc:	4b05      	ldr	r3, [pc, #20]	@ (8002ee4 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002ed4:	bf00      	nop
 8002ed6:	e7fd      	b.n	8002ed4 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20025c18 	.word	0x20025c18

08002ee8 <I2C3_Init>:

static void I2C3_Init()
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	4b18      	ldr	r3, [pc, #96]	@ (8002f54 <I2C3_Init+0x6c>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	4a17      	ldr	r2, [pc, #92]	@ (8002f54 <I2C3_Init+0x6c>)
 8002ef8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002efe:	4b15      	ldr	r3, [pc, #84]	@ (8002f54 <I2C3_Init+0x6c>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002f0a:	4b13      	ldr	r3, [pc, #76]	@ (8002f58 <I2C3_Init+0x70>)
 8002f0c:	4a13      	ldr	r2, [pc, #76]	@ (8002f5c <I2C3_Init+0x74>)
 8002f0e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002f10:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <I2C3_Init+0x70>)
 8002f12:	4a13      	ldr	r2, [pc, #76]	@ (8002f60 <I2C3_Init+0x78>)
 8002f14:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f16:	4b10      	ldr	r3, [pc, #64]	@ (8002f58 <I2C3_Init+0x70>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f58 <I2C3_Init+0x70>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f22:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <I2C3_Init+0x70>)
 8002f24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f28:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f58 <I2C3_Init+0x70>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f30:	4b09      	ldr	r3, [pc, #36]	@ (8002f58 <I2C3_Init+0x70>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002f36:	4808      	ldr	r0, [pc, #32]	@ (8002f58 <I2C3_Init+0x70>)
 8002f38:	f000 fe54 	bl	8003be4 <HAL_I2C_Init>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002f46:	bf00      	nop
 8002f48:	e7fd      	b.n	8002f46 <I2C3_Init+0x5e>
    }
    return;
 8002f4a:	bf00      	nop
}
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800
 8002f58:	20025bc4 	.word	0x20025bc4
 8002f5c:	40005c00 	.word	0x40005c00
 8002f60:	000186a0 	.word	0x000186a0

08002f64 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6a:	f107 030c 	add.w	r3, r7, #12
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
 8002f78:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	4b20      	ldr	r3, [pc, #128]	@ (8003000 <I2C3_MspInit+0x9c>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	4a1f      	ldr	r2, [pc, #124]	@ (8003000 <I2C3_MspInit+0x9c>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003000 <I2C3_MspInit+0x9c>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	4b19      	ldr	r3, [pc, #100]	@ (8003000 <I2C3_MspInit+0x9c>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	4a18      	ldr	r2, [pc, #96]	@ (8003000 <I2C3_MspInit+0x9c>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fa6:	4b16      	ldr	r3, [pc, #88]	@ (8003000 <I2C3_MspInit+0x9c>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002fb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fb8:	2312      	movs	r3, #18
 8002fba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002fc8:	f107 030c 	add.w	r3, r7, #12
 8002fcc:	4619      	mov	r1, r3
 8002fce:	480d      	ldr	r0, [pc, #52]	@ (8003004 <I2C3_MspInit+0xa0>)
 8002fd0:	f000 fb36 	bl	8003640 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002fd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fda:	2312      	movs	r3, #18
 8002fdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002fea:	f107 030c 	add.w	r3, r7, #12
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4805      	ldr	r0, [pc, #20]	@ (8003008 <I2C3_MspInit+0xa4>)
 8002ff2:	f000 fb25 	bl	8003640 <HAL_GPIO_Init>
    
}
 8002ff6:	bf00      	nop
 8002ff8:	3720      	adds	r7, #32
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800
 8003004:	40020800 	.word	0x40020800
 8003008:	40020000 	.word	0x40020000

0800300c <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af04      	add	r7, sp, #16
 8003012:	4603      	mov	r3, r0
 8003014:	80fb      	strh	r3, [r7, #6]
 8003016:	460b      	mov	r3, r1
 8003018:	717b      	strb	r3, [r7, #5]
 800301a:	4613      	mov	r3, r2
 800301c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800301e:	793b      	ldrb	r3, [r7, #4]
 8003020:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003022:	797b      	ldrb	r3, [r7, #5]
 8003024:	b29a      	uxth	r2, r3
 8003026:	88f9      	ldrh	r1, [r7, #6]
 8003028:	4b0a      	ldr	r3, [pc, #40]	@ (8003054 <I2C3_Write+0x48>)
 800302a:	9302      	str	r3, [sp, #8]
 800302c:	2301      	movs	r3, #1
 800302e:	9301      	str	r3, [sp, #4]
 8003030:	f107 030f 	add.w	r3, r7, #15
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	2301      	movs	r3, #1
 8003038:	4807      	ldr	r0, [pc, #28]	@ (8003058 <I2C3_Write+0x4c>)
 800303a:	f000 ff17 	bl	8003e6c <HAL_I2C_Mem_Write>
 800303e:	4603      	mov	r3, r0
 8003040:	461a      	mov	r2, r3
 8003042:	4b06      	ldr	r3, [pc, #24]	@ (800305c <I2C3_Write+0x50>)
 8003044:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003046:	f7ff ff3f 	bl	8002ec8 <verifyHAL_I2C_IS_OKAY>
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	0003d090 	.word	0x0003d090
 8003058:	20025bc4 	.word	0x20025bc4
 800305c:	20025c18 	.word	0x20025c18

08003060 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af04      	add	r7, sp, #16
 8003066:	4603      	mov	r3, r0
 8003068:	603a      	str	r2, [r7, #0]
 800306a:	71fb      	strb	r3, [r7, #7]
 800306c:	460b      	mov	r3, r1
 800306e:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	b299      	uxth	r1, r3
 8003074:	79bb      	ldrb	r3, [r7, #6]
 8003076:	b29a      	uxth	r2, r3
 8003078:	4b09      	ldr	r3, [pc, #36]	@ (80030a0 <I2C3_Read+0x40>)
 800307a:	9302      	str	r3, [sp, #8]
 800307c:	2301      	movs	r3, #1
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2301      	movs	r3, #1
 8003086:	4807      	ldr	r0, [pc, #28]	@ (80030a4 <I2C3_Read+0x44>)
 8003088:	f000 ffea 	bl	8004060 <HAL_I2C_Mem_Read>
 800308c:	4603      	mov	r3, r0
 800308e:	461a      	mov	r2, r3
 8003090:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <I2C3_Read+0x48>)
 8003092:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003094:	f7ff ff18 	bl	8002ec8 <verifyHAL_I2C_IS_OKAY>
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	0003d090 	.word	0x0003d090
 80030a4:	20025bc4 	.word	0x20025bc4
 80030a8:	20025c18 	.word	0x20025c18

080030ac <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af04      	add	r7, sp, #16
 80030b2:	603a      	str	r2, [r7, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]
 80030ba:	460b      	mov	r3, r1
 80030bc:	71bb      	strb	r3, [r7, #6]
 80030be:	4613      	mov	r3, r2
 80030c0:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	b299      	uxth	r1, r3
 80030c6:	79bb      	ldrb	r3, [r7, #6]
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	4b07      	ldr	r3, [pc, #28]	@ (80030e8 <I2C3_MulitByteRead+0x3c>)
 80030cc:	9302      	str	r3, [sp, #8]
 80030ce:	88bb      	ldrh	r3, [r7, #4]
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	2301      	movs	r3, #1
 80030d8:	4804      	ldr	r0, [pc, #16]	@ (80030ec <I2C3_MulitByteRead+0x40>)
 80030da:	f000 ffc1 	bl	8004060 <HAL_I2C_Mem_Read>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	0003d090 	.word	0x0003d090
 80030ec:	20025bc4 	.word	0x20025bc4

080030f0 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80030fa:	204d      	movs	r0, #77	@ 0x4d
 80030fc:	f7ff fe06 	bl	8002d0c <STMPE811_Read>
 8003100:	4603      	mov	r3, r0
 8003102:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003104:	204e      	movs	r0, #78	@ 0x4e
 8003106:	f7ff fe01 	bl	8002d0c <STMPE811_Read>
 800310a:	4603      	mov	r3, r0
 800310c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800310e:	7a7b      	ldrb	r3, [r7, #9]
 8003110:	b21b      	sxth	r3, r3
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	b21a      	sxth	r2, r3
 8003116:	7a3b      	ldrb	r3, [r7, #8]
 8003118:	b21b      	sxth	r3, r3
 800311a:	4313      	orrs	r3, r2
 800311c:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800311e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003122:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003126:	4293      	cmp	r3, r2
 8003128:	dc06      	bgt.n	8003138 <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 800312a:	89fb      	ldrh	r3, [r7, #14]
 800312c:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8003130:	330c      	adds	r3, #12
 8003132:	b29b      	uxth	r3, r3
 8003134:	81fb      	strh	r3, [r7, #14]
 8003136:	e005      	b.n	8003144 <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 8003138:	89fb      	ldrh	r3, [r7, #14]
 800313a:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800313e:	3308      	adds	r3, #8
 8003140:	b29b      	uxth	r3, r3
 8003142:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8003144:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003148:	4a18      	ldr	r2, [pc, #96]	@ (80031ac <TM_STMPE811_ReadX+0xbc>)
 800314a:	fb82 1203 	smull	r1, r2, r2, r3
 800314e:	441a      	add	r2, r3
 8003150:	10d2      	asrs	r2, r2, #3
 8003152:	17db      	asrs	r3, r3, #31
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003158:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800315c:	2bef      	cmp	r3, #239	@ 0xef
 800315e:	dd02      	ble.n	8003166 <TM_STMPE811_ReadX+0x76>
        val = 239;
 8003160:	23ef      	movs	r3, #239	@ 0xef
 8003162:	81fb      	strh	r3, [r7, #14]
 8003164:	e005      	b.n	8003172 <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 8003166:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800316a:	2b00      	cmp	r3, #0
 800316c:	da01      	bge.n	8003172 <TM_STMPE811_ReadX+0x82>
        val = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003172:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	429a      	cmp	r2, r3
 800317a:	dd05      	ble.n	8003188 <TM_STMPE811_ReadX+0x98>
 800317c:	89fa      	ldrh	r2, [r7, #14]
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	b29b      	uxth	r3, r3
 8003184:	b21b      	sxth	r3, r3
 8003186:	e004      	b.n	8003192 <TM_STMPE811_ReadX+0xa2>
 8003188:	89fb      	ldrh	r3, [r7, #14]
 800318a:	88fa      	ldrh	r2, [r7, #6]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	b29b      	uxth	r3, r3
 8003190:	b21b      	sxth	r3, r3
 8003192:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003194:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003198:	2b04      	cmp	r3, #4
 800319a:	dd01      	ble.n	80031a0 <TM_STMPE811_ReadX+0xb0>
        return val;
 800319c:	89fb      	ldrh	r3, [r7, #14]
 800319e:	e000      	b.n	80031a2 <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 80031a0:	88fb      	ldrh	r3, [r7, #6]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	88888889 	.word	0x88888889

080031b0 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80031ba:	204f      	movs	r0, #79	@ 0x4f
 80031bc:	f7ff fda6 	bl	8002d0c <STMPE811_Read>
 80031c0:	4603      	mov	r3, r0
 80031c2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80031c4:	2050      	movs	r0, #80	@ 0x50
 80031c6:	f7ff fda1 	bl	8002d0c <STMPE811_Read>
 80031ca:	4603      	mov	r3, r0
 80031cc:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80031ce:	7a7b      	ldrb	r3, [r7, #9]
 80031d0:	b21b      	sxth	r3, r3
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	b21a      	sxth	r2, r3
 80031d6:	7a3b      	ldrb	r3, [r7, #8]
 80031d8:	b21b      	sxth	r3, r3
 80031da:	4313      	orrs	r3, r2
 80031dc:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80031de:	89fb      	ldrh	r3, [r7, #14]
 80031e0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80031e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031ec:	4a18      	ldr	r2, [pc, #96]	@ (8003250 <TM_STMPE811_ReadY+0xa0>)
 80031ee:	fb82 1203 	smull	r1, r2, r2, r3
 80031f2:	1052      	asrs	r2, r2, #1
 80031f4:	17db      	asrs	r3, r3, #31
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80031fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	dc02      	bgt.n	8003208 <TM_STMPE811_ReadY+0x58>
        val = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	81fb      	strh	r3, [r7, #14]
 8003206:	e007      	b.n	8003218 <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 8003208:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800320c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003210:	db02      	blt.n	8003218 <TM_STMPE811_ReadY+0x68>
        val = 319;
 8003212:	f240 133f 	movw	r3, #319	@ 0x13f
 8003216:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003218:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	429a      	cmp	r2, r3
 8003220:	dd05      	ble.n	800322e <TM_STMPE811_ReadY+0x7e>
 8003222:	89fa      	ldrh	r2, [r7, #14]
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	b29b      	uxth	r3, r3
 800322a:	b21b      	sxth	r3, r3
 800322c:	e004      	b.n	8003238 <TM_STMPE811_ReadY+0x88>
 800322e:	89fb      	ldrh	r3, [r7, #14]
 8003230:	88fa      	ldrh	r2, [r7, #6]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	b29b      	uxth	r3, r3
 8003236:	b21b      	sxth	r3, r3
 8003238:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 800323a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800323e:	2b04      	cmp	r3, #4
 8003240:	dd01      	ble.n	8003246 <TM_STMPE811_ReadY+0x96>
        return val;
 8003242:	89fb      	ldrh	r3, [r7, #14]
 8003244:	e000      	b.n	8003248 <TM_STMPE811_ReadY+0x98>
    }
    return y;
 8003246:	88fb      	ldrh	r3, [r7, #6]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	2e8ba2e9 	.word	0x2e8ba2e9

08003254 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800326c:	4a14      	ldr	r2, [pc, #80]	@ (80032c0 <_sbrk+0x5c>)
 800326e:	4b15      	ldr	r3, [pc, #84]	@ (80032c4 <_sbrk+0x60>)
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003278:	4b13      	ldr	r3, [pc, #76]	@ (80032c8 <_sbrk+0x64>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003280:	4b11      	ldr	r3, [pc, #68]	@ (80032c8 <_sbrk+0x64>)
 8003282:	4a12      	ldr	r2, [pc, #72]	@ (80032cc <_sbrk+0x68>)
 8003284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003286:	4b10      	ldr	r3, [pc, #64]	@ (80032c8 <_sbrk+0x64>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	429a      	cmp	r2, r3
 8003292:	d207      	bcs.n	80032a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003294:	f003 fcdc 	bl	8006c50 <__errno>
 8003298:	4603      	mov	r3, r0
 800329a:	220c      	movs	r2, #12
 800329c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800329e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032a2:	e009      	b.n	80032b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032a4:	4b08      	ldr	r3, [pc, #32]	@ (80032c8 <_sbrk+0x64>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032aa:	4b07      	ldr	r3, [pc, #28]	@ (80032c8 <_sbrk+0x64>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	4a05      	ldr	r2, [pc, #20]	@ (80032c8 <_sbrk+0x64>)
 80032b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032b6:	68fb      	ldr	r3, [r7, #12]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20030000 	.word	0x20030000
 80032c4:	00000400 	.word	0x00000400
 80032c8:	20025c1c 	.word	0x20025c1c
 80032cc:	20025d70 	.word	0x20025d70

080032d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032d4:	4b06      	ldr	r3, [pc, #24]	@ (80032f0 <SystemInit+0x20>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032da:	4a05      	ldr	r2, [pc, #20]	@ (80032f0 <SystemInit+0x20>)
 80032dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032e4:	bf00      	nop
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80032f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800332c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032f8:	f7ff ffea 	bl	80032d0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032fc:	480c      	ldr	r0, [pc, #48]	@ (8003330 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032fe:	490d      	ldr	r1, [pc, #52]	@ (8003334 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003300:	4a0d      	ldr	r2, [pc, #52]	@ (8003338 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003304:	e002      	b.n	800330c <LoopCopyDataInit>

08003306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800330a:	3304      	adds	r3, #4

0800330c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800330c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003310:	d3f9      	bcc.n	8003306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003312:	4a0a      	ldr	r2, [pc, #40]	@ (800333c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003314:	4c0a      	ldr	r4, [pc, #40]	@ (8003340 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003318:	e001      	b.n	800331e <LoopFillZerobss>

0800331a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800331a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800331c:	3204      	adds	r2, #4

0800331e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003320:	d3fb      	bcc.n	800331a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003322:	f003 fc9b 	bl	8006c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003326:	f7fe fdf5 	bl	8001f14 <main>
  bx  lr    
 800332a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800332c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003334:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003338:	08008784 	.word	0x08008784
  ldr r2, =_sbss
 800333c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8003340:	20025d6c 	.word	0x20025d6c

08003344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003344:	e7fe      	b.n	8003344 <ADC_IRQHandler>
	...

08003348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800334c:	4b0e      	ldr	r3, [pc, #56]	@ (8003388 <HAL_Init+0x40>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0d      	ldr	r2, [pc, #52]	@ (8003388 <HAL_Init+0x40>)
 8003352:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003358:	4b0b      	ldr	r3, [pc, #44]	@ (8003388 <HAL_Init+0x40>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0a      	ldr	r2, [pc, #40]	@ (8003388 <HAL_Init+0x40>)
 800335e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003364:	4b08      	ldr	r3, [pc, #32]	@ (8003388 <HAL_Init+0x40>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a07      	ldr	r2, [pc, #28]	@ (8003388 <HAL_Init+0x40>)
 800336a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800336e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003370:	2003      	movs	r0, #3
 8003372:	f000 f931 	bl	80035d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003376:	2000      	movs	r0, #0
 8003378:	f000 f808 	bl	800338c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800337c:	f7ff f98e 	bl	800269c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023c00 	.word	0x40023c00

0800338c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003394:	4b12      	ldr	r3, [pc, #72]	@ (80033e0 <HAL_InitTick+0x54>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b12      	ldr	r3, [pc, #72]	@ (80033e4 <HAL_InitTick+0x58>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 f93b 	bl	8003626 <HAL_SYSTICK_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e00e      	b.n	80033d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b0f      	cmp	r3, #15
 80033be:	d80a      	bhi.n	80033d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033c0:	2200      	movs	r2, #0
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033c8:	f000 f911 	bl	80035ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033cc:	4a06      	ldr	r2, [pc, #24]	@ (80033e8 <HAL_InitTick+0x5c>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e000      	b.n	80033d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20000010 	.word	0x20000010
 80033e4:	20000018 	.word	0x20000018
 80033e8:	20000014 	.word	0x20000014

080033ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033f0:	4b06      	ldr	r3, [pc, #24]	@ (800340c <HAL_IncTick+0x20>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b06      	ldr	r3, [pc, #24]	@ (8003410 <HAL_IncTick+0x24>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4413      	add	r3, r2
 80033fc:	4a04      	ldr	r2, [pc, #16]	@ (8003410 <HAL_IncTick+0x24>)
 80033fe:	6013      	str	r3, [r2, #0]
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000018 	.word	0x20000018
 8003410:	20025c20 	.word	0x20025c20

08003414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return uwTick;
 8003418:	4b03      	ldr	r3, [pc, #12]	@ (8003428 <HAL_GetTick+0x14>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20025c20 	.word	0x20025c20

0800342c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003434:	f7ff ffee 	bl	8003414 <HAL_GetTick>
 8003438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003444:	d005      	beq.n	8003452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003446:	4b0a      	ldr	r3, [pc, #40]	@ (8003470 <HAL_Delay+0x44>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003452:	bf00      	nop
 8003454:	f7ff ffde 	bl	8003414 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	429a      	cmp	r2, r3
 8003462:	d8f7      	bhi.n	8003454 <HAL_Delay+0x28>
  {
  }
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000018 	.word	0x20000018

08003474 <__NVIC_SetPriorityGrouping>:
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003484:	4b0c      	ldr	r3, [pc, #48]	@ (80034b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003490:	4013      	ands	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800349c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034a6:	4a04      	ldr	r2, [pc, #16]	@ (80034b8 <__NVIC_SetPriorityGrouping+0x44>)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	60d3      	str	r3, [r2, #12]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <__NVIC_GetPriorityGrouping>:
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c0:	4b04      	ldr	r3, [pc, #16]	@ (80034d4 <__NVIC_GetPriorityGrouping+0x18>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	0a1b      	lsrs	r3, r3, #8
 80034c6:	f003 0307 	and.w	r3, r3, #7
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	6039      	str	r1, [r7, #0]
 80034e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	db0a      	blt.n	8003502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	490c      	ldr	r1, [pc, #48]	@ (8003524 <__NVIC_SetPriority+0x4c>)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	0112      	lsls	r2, r2, #4
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	440b      	add	r3, r1
 80034fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003500:	e00a      	b.n	8003518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4908      	ldr	r1, [pc, #32]	@ (8003528 <__NVIC_SetPriority+0x50>)
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	3b04      	subs	r3, #4
 8003510:	0112      	lsls	r2, r2, #4
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	440b      	add	r3, r1
 8003516:	761a      	strb	r2, [r3, #24]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000e100 	.word	0xe000e100
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	@ 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f1c3 0307 	rsb	r3, r3, #7
 8003546:	2b04      	cmp	r3, #4
 8003548:	bf28      	it	cs
 800354a:	2304      	movcs	r3, #4
 800354c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	3304      	adds	r3, #4
 8003552:	2b06      	cmp	r3, #6
 8003554:	d902      	bls.n	800355c <NVIC_EncodePriority+0x30>
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3b03      	subs	r3, #3
 800355a:	e000      	b.n	800355e <NVIC_EncodePriority+0x32>
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003560:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43da      	mvns	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	401a      	ands	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003574:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	43d9      	mvns	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003584:	4313      	orrs	r3, r2
         );
}
 8003586:	4618      	mov	r0, r3
 8003588:	3724      	adds	r7, #36	@ 0x24
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3b01      	subs	r3, #1
 80035a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035a4:	d301      	bcc.n	80035aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035a6:	2301      	movs	r3, #1
 80035a8:	e00f      	b.n	80035ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035aa:	4a0a      	ldr	r2, [pc, #40]	@ (80035d4 <SysTick_Config+0x40>)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035b2:	210f      	movs	r1, #15
 80035b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035b8:	f7ff ff8e 	bl	80034d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035bc:	4b05      	ldr	r3, [pc, #20]	@ (80035d4 <SysTick_Config+0x40>)
 80035be:	2200      	movs	r2, #0
 80035c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035c2:	4b04      	ldr	r3, [pc, #16]	@ (80035d4 <SysTick_Config+0x40>)
 80035c4:	2207      	movs	r2, #7
 80035c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	e000e010 	.word	0xe000e010

080035d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff ff47 	bl	8003474 <__NVIC_SetPriorityGrouping>
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b086      	sub	sp, #24
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	4603      	mov	r3, r0
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
 80035fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003600:	f7ff ff5c 	bl	80034bc <__NVIC_GetPriorityGrouping>
 8003604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	6978      	ldr	r0, [r7, #20]
 800360c:	f7ff ff8e 	bl	800352c <NVIC_EncodePriority>
 8003610:	4602      	mov	r2, r0
 8003612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003616:	4611      	mov	r1, r2
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff5d 	bl	80034d8 <__NVIC_SetPriority>
}
 800361e:	bf00      	nop
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ffb0 	bl	8003594 <SysTick_Config>
 8003634:	4603      	mov	r3, r0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003640:	b480      	push	{r7}
 8003642:	b089      	sub	sp, #36	@ 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003652:	2300      	movs	r3, #0
 8003654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	e177      	b.n	800394c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800365c:	2201      	movs	r2, #1
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	429a      	cmp	r2, r3
 8003676:	f040 8166 	bne.w	8003946 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b01      	cmp	r3, #1
 8003684:	d005      	beq.n	8003692 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800368e:	2b02      	cmp	r3, #2
 8003690:	d130      	bne.n	80036f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	2203      	movs	r2, #3
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4013      	ands	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036c8:	2201      	movs	r2, #1
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 0201 	and.w	r2, r3, #1
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d017      	beq.n	8003730 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	2203      	movs	r2, #3
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d123      	bne.n	8003784 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	08da      	lsrs	r2, r3, #3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3208      	adds	r2, #8
 8003744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	220f      	movs	r2, #15
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	08da      	lsrs	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3208      	adds	r2, #8
 800377e:	69b9      	ldr	r1, [r7, #24]
 8003780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	2203      	movs	r2, #3
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0203 	and.w	r2, r3, #3
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80c0 	beq.w	8003946 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	4b66      	ldr	r3, [pc, #408]	@ (8003964 <HAL_GPIO_Init+0x324>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	4a65      	ldr	r2, [pc, #404]	@ (8003964 <HAL_GPIO_Init+0x324>)
 80037d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037d6:	4b63      	ldr	r3, [pc, #396]	@ (8003964 <HAL_GPIO_Init+0x324>)
 80037d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037e2:	4a61      	ldr	r2, [pc, #388]	@ (8003968 <HAL_GPIO_Init+0x328>)
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	089b      	lsrs	r3, r3, #2
 80037e8:	3302      	adds	r3, #2
 80037ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	220f      	movs	r2, #15
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4013      	ands	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a58      	ldr	r2, [pc, #352]	@ (800396c <HAL_GPIO_Init+0x32c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d037      	beq.n	800387e <HAL_GPIO_Init+0x23e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a57      	ldr	r2, [pc, #348]	@ (8003970 <HAL_GPIO_Init+0x330>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d031      	beq.n	800387a <HAL_GPIO_Init+0x23a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a56      	ldr	r2, [pc, #344]	@ (8003974 <HAL_GPIO_Init+0x334>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d02b      	beq.n	8003876 <HAL_GPIO_Init+0x236>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a55      	ldr	r2, [pc, #340]	@ (8003978 <HAL_GPIO_Init+0x338>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d025      	beq.n	8003872 <HAL_GPIO_Init+0x232>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a54      	ldr	r2, [pc, #336]	@ (800397c <HAL_GPIO_Init+0x33c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01f      	beq.n	800386e <HAL_GPIO_Init+0x22e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a53      	ldr	r2, [pc, #332]	@ (8003980 <HAL_GPIO_Init+0x340>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d019      	beq.n	800386a <HAL_GPIO_Init+0x22a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a52      	ldr	r2, [pc, #328]	@ (8003984 <HAL_GPIO_Init+0x344>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <HAL_GPIO_Init+0x226>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a51      	ldr	r2, [pc, #324]	@ (8003988 <HAL_GPIO_Init+0x348>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00d      	beq.n	8003862 <HAL_GPIO_Init+0x222>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a50      	ldr	r2, [pc, #320]	@ (800398c <HAL_GPIO_Init+0x34c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d007      	beq.n	800385e <HAL_GPIO_Init+0x21e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a4f      	ldr	r2, [pc, #316]	@ (8003990 <HAL_GPIO_Init+0x350>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_GPIO_Init+0x21a>
 8003856:	2309      	movs	r3, #9
 8003858:	e012      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800385a:	230a      	movs	r3, #10
 800385c:	e010      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800385e:	2308      	movs	r3, #8
 8003860:	e00e      	b.n	8003880 <HAL_GPIO_Init+0x240>
 8003862:	2307      	movs	r3, #7
 8003864:	e00c      	b.n	8003880 <HAL_GPIO_Init+0x240>
 8003866:	2306      	movs	r3, #6
 8003868:	e00a      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800386a:	2305      	movs	r3, #5
 800386c:	e008      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800386e:	2304      	movs	r3, #4
 8003870:	e006      	b.n	8003880 <HAL_GPIO_Init+0x240>
 8003872:	2303      	movs	r3, #3
 8003874:	e004      	b.n	8003880 <HAL_GPIO_Init+0x240>
 8003876:	2302      	movs	r3, #2
 8003878:	e002      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <HAL_GPIO_Init+0x240>
 800387e:	2300      	movs	r3, #0
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	f002 0203 	and.w	r2, r2, #3
 8003886:	0092      	lsls	r2, r2, #2
 8003888:	4093      	lsls	r3, r2
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003890:	4935      	ldr	r1, [pc, #212]	@ (8003968 <HAL_GPIO_Init+0x328>)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	089b      	lsrs	r3, r3, #2
 8003896:	3302      	adds	r3, #2
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800389e:	4b3d      	ldr	r3, [pc, #244]	@ (8003994 <HAL_GPIO_Init+0x354>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038c2:	4a34      	ldr	r2, [pc, #208]	@ (8003994 <HAL_GPIO_Init+0x354>)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038c8:	4b32      	ldr	r3, [pc, #200]	@ (8003994 <HAL_GPIO_Init+0x354>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038ec:	4a29      	ldr	r2, [pc, #164]	@ (8003994 <HAL_GPIO_Init+0x354>)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038f2:	4b28      	ldr	r3, [pc, #160]	@ (8003994 <HAL_GPIO_Init+0x354>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003916:	4a1f      	ldr	r2, [pc, #124]	@ (8003994 <HAL_GPIO_Init+0x354>)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800391c:	4b1d      	ldr	r3, [pc, #116]	@ (8003994 <HAL_GPIO_Init+0x354>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003940:	4a14      	ldr	r2, [pc, #80]	@ (8003994 <HAL_GPIO_Init+0x354>)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3301      	adds	r3, #1
 800394a:	61fb      	str	r3, [r7, #28]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	2b0f      	cmp	r3, #15
 8003950:	f67f ae84 	bls.w	800365c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	3724      	adds	r7, #36	@ 0x24
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800
 8003968:	40013800 	.word	0x40013800
 800396c:	40020000 	.word	0x40020000
 8003970:	40020400 	.word	0x40020400
 8003974:	40020800 	.word	0x40020800
 8003978:	40020c00 	.word	0x40020c00
 800397c:	40021000 	.word	0x40021000
 8003980:	40021400 	.word	0x40021400
 8003984:	40021800 	.word	0x40021800
 8003988:	40021c00 	.word	0x40021c00
 800398c:	40022000 	.word	0x40022000
 8003990:	40022400 	.word	0x40022400
 8003994:	40013c00 	.word	0x40013c00

08003998 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	e0d9      	b.n	8003b68 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039b4:	2201      	movs	r2, #1
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	f040 80c9 	bne.w	8003b62 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80039d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003b80 <HAL_GPIO_DeInit+0x1e8>)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	089b      	lsrs	r3, r3, #2
 80039d6:	3302      	adds	r3, #2
 80039d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039dc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	220f      	movs	r2, #15
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	4013      	ands	r3, r2
 80039f0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a63      	ldr	r2, [pc, #396]	@ (8003b84 <HAL_GPIO_DeInit+0x1ec>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d037      	beq.n	8003a6a <HAL_GPIO_DeInit+0xd2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a62      	ldr	r2, [pc, #392]	@ (8003b88 <HAL_GPIO_DeInit+0x1f0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d031      	beq.n	8003a66 <HAL_GPIO_DeInit+0xce>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a61      	ldr	r2, [pc, #388]	@ (8003b8c <HAL_GPIO_DeInit+0x1f4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d02b      	beq.n	8003a62 <HAL_GPIO_DeInit+0xca>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a60      	ldr	r2, [pc, #384]	@ (8003b90 <HAL_GPIO_DeInit+0x1f8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d025      	beq.n	8003a5e <HAL_GPIO_DeInit+0xc6>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a5f      	ldr	r2, [pc, #380]	@ (8003b94 <HAL_GPIO_DeInit+0x1fc>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d01f      	beq.n	8003a5a <HAL_GPIO_DeInit+0xc2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a5e      	ldr	r2, [pc, #376]	@ (8003b98 <HAL_GPIO_DeInit+0x200>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d019      	beq.n	8003a56 <HAL_GPIO_DeInit+0xbe>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a5d      	ldr	r2, [pc, #372]	@ (8003b9c <HAL_GPIO_DeInit+0x204>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <HAL_GPIO_DeInit+0xba>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a5c      	ldr	r2, [pc, #368]	@ (8003ba0 <HAL_GPIO_DeInit+0x208>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00d      	beq.n	8003a4e <HAL_GPIO_DeInit+0xb6>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a5b      	ldr	r2, [pc, #364]	@ (8003ba4 <HAL_GPIO_DeInit+0x20c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d007      	beq.n	8003a4a <HAL_GPIO_DeInit+0xb2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ba8 <HAL_GPIO_DeInit+0x210>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d101      	bne.n	8003a46 <HAL_GPIO_DeInit+0xae>
 8003a42:	2309      	movs	r3, #9
 8003a44:	e012      	b.n	8003a6c <HAL_GPIO_DeInit+0xd4>
 8003a46:	230a      	movs	r3, #10
 8003a48:	e010      	b.n	8003a6c <HAL_GPIO_DeInit+0xd4>
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	e00e      	b.n	8003a6c <HAL_GPIO_DeInit+0xd4>
 8003a4e:	2307      	movs	r3, #7
 8003a50:	e00c      	b.n	8003a6c <HAL_GPIO_DeInit+0xd4>
 8003a52:	2306      	movs	r3, #6
 8003a54:	e00a      	b.n	8003a6c <HAL_GPIO_DeInit+0xd4>
 8003a56:	2305      	movs	r3, #5
 8003a58:	e008      	b.n	8003a6c <HAL_GPIO_DeInit+0xd4>
 8003a5a:	2304      	movs	r3, #4
 8003a5c:	e006      	b.n	8003a6c <HAL_GPIO_DeInit+0xd4>
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e004      	b.n	8003a6c <HAL_GPIO_DeInit+0xd4>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e002      	b.n	8003a6c <HAL_GPIO_DeInit+0xd4>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <HAL_GPIO_DeInit+0xd4>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	f002 0203 	and.w	r2, r2, #3
 8003a72:	0092      	lsls	r2, r2, #2
 8003a74:	4093      	lsls	r3, r2
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d132      	bne.n	8003ae2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8003bac <HAL_GPIO_DeInit+0x214>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	4949      	ldr	r1, [pc, #292]	@ (8003bac <HAL_GPIO_DeInit+0x214>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a8a:	4b48      	ldr	r3, [pc, #288]	@ (8003bac <HAL_GPIO_DeInit+0x214>)
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	4946      	ldr	r1, [pc, #280]	@ (8003bac <HAL_GPIO_DeInit+0x214>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a98:	4b44      	ldr	r3, [pc, #272]	@ (8003bac <HAL_GPIO_DeInit+0x214>)
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	4942      	ldr	r1, [pc, #264]	@ (8003bac <HAL_GPIO_DeInit+0x214>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003aa6:	4b41      	ldr	r3, [pc, #260]	@ (8003bac <HAL_GPIO_DeInit+0x214>)
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	493f      	ldr	r1, [pc, #252]	@ (8003bac <HAL_GPIO_DeInit+0x214>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	220f      	movs	r2, #15
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003ac4:	4a2e      	ldr	r2, [pc, #184]	@ (8003b80 <HAL_GPIO_DeInit+0x1e8>)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	3302      	adds	r3, #2
 8003acc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	482a      	ldr	r0, [pc, #168]	@ (8003b80 <HAL_GPIO_DeInit+0x1e8>)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	089b      	lsrs	r3, r3, #2
 8003ada:	400a      	ands	r2, r1
 8003adc:	3302      	adds	r3, #2
 8003ade:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	2103      	movs	r1, #3
 8003aec:	fa01 f303 	lsl.w	r3, r1, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	401a      	ands	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	08da      	lsrs	r2, r3, #3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3208      	adds	r2, #8
 8003b00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	220f      	movs	r2, #15
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	08d2      	lsrs	r2, r2, #3
 8003b18:	4019      	ands	r1, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3208      	adds	r2, #8
 8003b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	2103      	movs	r1, #3
 8003b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	401a      	ands	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	401a      	ands	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	2103      	movs	r1, #3
 8003b56:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	401a      	ands	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	3301      	adds	r3, #1
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b0f      	cmp	r3, #15
 8003b6c:	f67f af22 	bls.w	80039b4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003b70:	bf00      	nop
 8003b72:	bf00      	nop
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40013800 	.word	0x40013800
 8003b84:	40020000 	.word	0x40020000
 8003b88:	40020400 	.word	0x40020400
 8003b8c:	40020800 	.word	0x40020800
 8003b90:	40020c00 	.word	0x40020c00
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40021400 	.word	0x40021400
 8003b9c:	40021800 	.word	0x40021800
 8003ba0:	40021c00 	.word	0x40021c00
 8003ba4:	40022000 	.word	0x40022000
 8003ba8:	40022400 	.word	0x40022400
 8003bac:	40013c00 	.word	0x40013c00

08003bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	807b      	strh	r3, [r7, #2]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bc0:	787b      	ldrb	r3, [r7, #1]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bc6:	887a      	ldrh	r2, [r7, #2]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bcc:	e003      	b.n	8003bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bce:	887b      	ldrh	r3, [r7, #2]
 8003bd0:	041a      	lsls	r2, r3, #16
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	619a      	str	r2, [r3, #24]
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e12b      	b.n	8003e4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fe fd6e 	bl	80026ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2224      	movs	r2, #36	@ 0x24
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c48:	f001 ff82 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8003c4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4a81      	ldr	r2, [pc, #516]	@ (8003e58 <HAL_I2C_Init+0x274>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d807      	bhi.n	8003c68 <HAL_I2C_Init+0x84>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4a80      	ldr	r2, [pc, #512]	@ (8003e5c <HAL_I2C_Init+0x278>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	bf94      	ite	ls
 8003c60:	2301      	movls	r3, #1
 8003c62:	2300      	movhi	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e006      	b.n	8003c76 <HAL_I2C_Init+0x92>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a7d      	ldr	r2, [pc, #500]	@ (8003e60 <HAL_I2C_Init+0x27c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	bf94      	ite	ls
 8003c70:	2301      	movls	r3, #1
 8003c72:	2300      	movhi	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e0e7      	b.n	8003e4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4a78      	ldr	r2, [pc, #480]	@ (8003e64 <HAL_I2C_Init+0x280>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0c9b      	lsrs	r3, r3, #18
 8003c88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4a6a      	ldr	r2, [pc, #424]	@ (8003e58 <HAL_I2C_Init+0x274>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d802      	bhi.n	8003cb8 <HAL_I2C_Init+0xd4>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	e009      	b.n	8003ccc <HAL_I2C_Init+0xe8>
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	4a69      	ldr	r2, [pc, #420]	@ (8003e68 <HAL_I2C_Init+0x284>)
 8003cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc8:	099b      	lsrs	r3, r3, #6
 8003cca:	3301      	adds	r3, #1
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003cde:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	495c      	ldr	r1, [pc, #368]	@ (8003e58 <HAL_I2C_Init+0x274>)
 8003ce8:	428b      	cmp	r3, r1
 8003cea:	d819      	bhi.n	8003d20 <HAL_I2C_Init+0x13c>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1e59      	subs	r1, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cfa:	1c59      	adds	r1, r3, #1
 8003cfc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d00:	400b      	ands	r3, r1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_I2C_Init+0x138>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1e59      	subs	r1, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d14:	3301      	adds	r3, #1
 8003d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1a:	e051      	b.n	8003dc0 <HAL_I2C_Init+0x1dc>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	e04f      	b.n	8003dc0 <HAL_I2C_Init+0x1dc>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d111      	bne.n	8003d4c <HAL_I2C_Init+0x168>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1e58      	subs	r0, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	440b      	add	r3, r1
 8003d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	e012      	b.n	8003d72 <HAL_I2C_Init+0x18e>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1e58      	subs	r0, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	0099      	lsls	r1, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d62:	3301      	adds	r3, #1
 8003d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_I2C_Init+0x196>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e022      	b.n	8003dc0 <HAL_I2C_Init+0x1dc>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10e      	bne.n	8003da0 <HAL_I2C_Init+0x1bc>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1e58      	subs	r0, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6859      	ldr	r1, [r3, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	440b      	add	r3, r1
 8003d90:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d94:	3301      	adds	r3, #1
 8003d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d9e:	e00f      	b.n	8003dc0 <HAL_I2C_Init+0x1dc>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	1e58      	subs	r0, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	0099      	lsls	r1, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db6:	3301      	adds	r3, #1
 8003db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	6809      	ldr	r1, [r1, #0]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69da      	ldr	r2, [r3, #28]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003dee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6911      	ldr	r1, [r2, #16]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68d2      	ldr	r2, [r2, #12]
 8003dfa:	4311      	orrs	r1, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	000186a0 	.word	0x000186a0
 8003e5c:	001e847f 	.word	0x001e847f
 8003e60:	003d08ff 	.word	0x003d08ff
 8003e64:	431bde83 	.word	0x431bde83
 8003e68:	10624dd3 	.word	0x10624dd3

08003e6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	4608      	mov	r0, r1
 8003e76:	4611      	mov	r1, r2
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	817b      	strh	r3, [r7, #10]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	813b      	strh	r3, [r7, #8]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e86:	f7ff fac5 	bl	8003414 <HAL_GetTick>
 8003e8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	f040 80d9 	bne.w	800404c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	2319      	movs	r3, #25
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	496d      	ldr	r1, [pc, #436]	@ (8004058 <HAL_I2C_Mem_Write+0x1ec>)
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 fc8b 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e0cc      	b.n	800404e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_I2C_Mem_Write+0x56>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e0c5      	b.n	800404e <HAL_I2C_Mem_Write+0x1e2>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d007      	beq.n	8003ee8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ef6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2221      	movs	r2, #33	@ 0x21
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2240      	movs	r2, #64	@ 0x40
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a3a      	ldr	r2, [r7, #32]
 8003f12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4a4d      	ldr	r2, [pc, #308]	@ (800405c <HAL_I2C_Mem_Write+0x1f0>)
 8003f28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f2a:	88f8      	ldrh	r0, [r7, #6]
 8003f2c:	893a      	ldrh	r2, [r7, #8]
 8003f2e:	8979      	ldrh	r1, [r7, #10]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	9301      	str	r3, [sp, #4]
 8003f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	4603      	mov	r3, r0
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 fac2 	bl	80044c4 <I2C_RequestMemoryWrite>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d052      	beq.n	8003fec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e081      	b.n	800404e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 fd50 	bl	80049f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00d      	beq.n	8003f76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d107      	bne.n	8003f72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e06b      	b.n	800404e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	781a      	ldrb	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d11b      	bne.n	8003fec <HAL_I2C_Mem_Write+0x180>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d017      	beq.n	8003fec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1aa      	bne.n	8003f4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 fd43 	bl	8004a84 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00d      	beq.n	8004020 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	2b04      	cmp	r3, #4
 800400a:	d107      	bne.n	800401c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800401a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e016      	b.n	800404e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800402e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	e000      	b.n	800404e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
  }
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	00100002 	.word	0x00100002
 800405c:	ffff0000 	.word	0xffff0000

08004060 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08c      	sub	sp, #48	@ 0x30
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	4608      	mov	r0, r1
 800406a:	4611      	mov	r1, r2
 800406c:	461a      	mov	r2, r3
 800406e:	4603      	mov	r3, r0
 8004070:	817b      	strh	r3, [r7, #10]
 8004072:	460b      	mov	r3, r1
 8004074:	813b      	strh	r3, [r7, #8]
 8004076:	4613      	mov	r3, r2
 8004078:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800407a:	f7ff f9cb 	bl	8003414 <HAL_GetTick>
 800407e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b20      	cmp	r3, #32
 800408a:	f040 8214 	bne.w	80044b6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	2319      	movs	r3, #25
 8004094:	2201      	movs	r2, #1
 8004096:	497b      	ldr	r1, [pc, #492]	@ (8004284 <HAL_I2C_Mem_Read+0x224>)
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fb91 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
 80040a6:	e207      	b.n	80044b8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_I2C_Mem_Read+0x56>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e200      	b.n	80044b8 <HAL_I2C_Mem_Read+0x458>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d007      	beq.n	80040dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2222      	movs	r2, #34	@ 0x22
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2240      	movs	r2, #64	@ 0x40
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004106:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800410c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4a5b      	ldr	r2, [pc, #364]	@ (8004288 <HAL_I2C_Mem_Read+0x228>)
 800411c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800411e:	88f8      	ldrh	r0, [r7, #6]
 8004120:	893a      	ldrh	r2, [r7, #8]
 8004122:	8979      	ldrh	r1, [r7, #10]
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	4603      	mov	r3, r0
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fa5e 	bl	80045f0 <I2C_RequestMemoryRead>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e1bc      	b.n	80044b8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d113      	bne.n	800416e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004146:	2300      	movs	r3, #0
 8004148:	623b      	str	r3, [r7, #32]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	623b      	str	r3, [r7, #32]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	623b      	str	r3, [r7, #32]
 800415a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	e190      	b.n	8004490 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004172:	2b01      	cmp	r3, #1
 8004174:	d11b      	bne.n	80041ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004184:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	e170      	b.n	8004490 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d11b      	bne.n	80041ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d6:	2300      	movs	r3, #0
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	e150      	b.n	8004490 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004204:	e144      	b.n	8004490 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420a:	2b03      	cmp	r3, #3
 800420c:	f200 80f1 	bhi.w	80043f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004214:	2b01      	cmp	r3, #1
 8004216:	d123      	bne.n	8004260 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 fc79 	bl	8004b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e145      	b.n	80044b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800425e:	e117      	b.n	8004490 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004264:	2b02      	cmp	r3, #2
 8004266:	d14e      	bne.n	8004306 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426e:	2200      	movs	r2, #0
 8004270:	4906      	ldr	r1, [pc, #24]	@ (800428c <HAL_I2C_Mem_Read+0x22c>)
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 faa4 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e11a      	b.n	80044b8 <HAL_I2C_Mem_Read+0x458>
 8004282:	bf00      	nop
 8004284:	00100002 	.word	0x00100002
 8004288:	ffff0000 	.word	0xffff0000
 800428c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800429e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004304:	e0c4      	b.n	8004490 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430c:	2200      	movs	r2, #0
 800430e:	496c      	ldr	r1, [pc, #432]	@ (80044c0 <HAL_I2C_Mem_Read+0x460>)
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fa55 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0cb      	b.n	80044b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800432e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004368:	2200      	movs	r2, #0
 800436a:	4955      	ldr	r1, [pc, #340]	@ (80044c0 <HAL_I2C_Mem_Read+0x460>)
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fa27 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e09d      	b.n	80044b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800438a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043f0:	e04e      	b.n	8004490 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fb8c 	bl	8004b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e058      	b.n	80044b8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b04      	cmp	r3, #4
 8004444:	d124      	bne.n	8004490 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800444a:	2b03      	cmp	r3, #3
 800444c:	d107      	bne.n	800445e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800445c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004494:	2b00      	cmp	r3, #0
 8004496:	f47f aeb6 	bne.w	8004206 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
  }
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3728      	adds	r7, #40	@ 0x28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	00010004 	.word	0x00010004

080044c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	4608      	mov	r0, r1
 80044ce:	4611      	mov	r1, r2
 80044d0:	461a      	mov	r2, r3
 80044d2:	4603      	mov	r3, r0
 80044d4:	817b      	strh	r3, [r7, #10]
 80044d6:	460b      	mov	r3, r1
 80044d8:	813b      	strh	r3, [r7, #8]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f960 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00d      	beq.n	8004522 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004514:	d103      	bne.n	800451e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800451c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e05f      	b.n	80045e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004522:	897b      	ldrh	r3, [r7, #10]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004530:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	6a3a      	ldr	r2, [r7, #32]
 8004536:	492d      	ldr	r1, [pc, #180]	@ (80045ec <I2C_RequestMemoryWrite+0x128>)
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f9bb 	bl	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e04c      	b.n	80045e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800455e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004560:	6a39      	ldr	r1, [r7, #32]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 fa46 	bl	80049f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004572:	2b04      	cmp	r3, #4
 8004574:	d107      	bne.n	8004586 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004584:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e02b      	b.n	80045e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004590:	893b      	ldrh	r3, [r7, #8]
 8004592:	b2da      	uxtb	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	611a      	str	r2, [r3, #16]
 800459a:	e021      	b.n	80045e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800459c:	893b      	ldrh	r3, [r7, #8]
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ac:	6a39      	ldr	r1, [r7, #32]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fa20 	bl	80049f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00d      	beq.n	80045d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d107      	bne.n	80045d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e005      	b.n	80045e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045d6:	893b      	ldrh	r3, [r7, #8]
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	00010002 	.word	0x00010002

080045f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	461a      	mov	r2, r3
 80045fe:	4603      	mov	r3, r0
 8004600:	817b      	strh	r3, [r7, #10]
 8004602:	460b      	mov	r3, r1
 8004604:	813b      	strh	r3, [r7, #8]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004618:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004628:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	2200      	movs	r2, #0
 8004632:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f8c2 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00d      	beq.n	800465e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004650:	d103      	bne.n	800465a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004658:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e0aa      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800465e:	897b      	ldrh	r3, [r7, #10]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800466c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	6a3a      	ldr	r2, [r7, #32]
 8004672:	4952      	ldr	r1, [pc, #328]	@ (80047bc <I2C_RequestMemoryRead+0x1cc>)
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f91d 	bl	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e097      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800469a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800469c:	6a39      	ldr	r1, [r7, #32]
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f9a8 	bl	80049f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00d      	beq.n	80046c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d107      	bne.n	80046c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e076      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d105      	bne.n	80046d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046cc:	893b      	ldrh	r3, [r7, #8]
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	611a      	str	r2, [r3, #16]
 80046d6:	e021      	b.n	800471c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046d8:	893b      	ldrh	r3, [r7, #8]
 80046da:	0a1b      	lsrs	r3, r3, #8
 80046dc:	b29b      	uxth	r3, r3
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e8:	6a39      	ldr	r1, [r7, #32]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f982 	bl	80049f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00d      	beq.n	8004712 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d107      	bne.n	800470e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800470c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e050      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004712:	893b      	ldrh	r3, [r7, #8]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800471c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800471e:	6a39      	ldr	r1, [r7, #32]
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 f967 	bl	80049f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00d      	beq.n	8004748 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004730:	2b04      	cmp	r3, #4
 8004732:	d107      	bne.n	8004744 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004742:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e035      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004756:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	2200      	movs	r2, #0
 8004760:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f82b 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00d      	beq.n	800478c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800477a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800477e:	d103      	bne.n	8004788 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004786:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e013      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800478c:	897b      	ldrh	r3, [r7, #10]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	b2da      	uxtb	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800479c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479e:	6a3a      	ldr	r2, [r7, #32]
 80047a0:	4906      	ldr	r1, [pc, #24]	@ (80047bc <I2C_RequestMemoryRead+0x1cc>)
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f886 	bl	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	00010002 	.word	0x00010002

080047c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	4613      	mov	r3, r2
 80047ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047d0:	e048      	b.n	8004864 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047d8:	d044      	beq.n	8004864 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047da:	f7fe fe1b 	bl	8003414 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d139      	bne.n	8004864 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	0c1b      	lsrs	r3, r3, #16
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d10d      	bne.n	8004816 <I2C_WaitOnFlagUntilTimeout+0x56>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	43da      	mvns	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4013      	ands	r3, r2
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf0c      	ite	eq
 800480c:	2301      	moveq	r3, #1
 800480e:	2300      	movne	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	461a      	mov	r2, r3
 8004814:	e00c      	b.n	8004830 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	43da      	mvns	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	4013      	ands	r3, r2
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf0c      	ite	eq
 8004828:	2301      	moveq	r3, #1
 800482a:	2300      	movne	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	461a      	mov	r2, r3
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	429a      	cmp	r2, r3
 8004834:	d116      	bne.n	8004864 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004850:	f043 0220 	orr.w	r2, r3, #32
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e023      	b.n	80048ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	0c1b      	lsrs	r3, r3, #16
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b01      	cmp	r3, #1
 800486c:	d10d      	bne.n	800488a <I2C_WaitOnFlagUntilTimeout+0xca>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	43da      	mvns	r2, r3
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	4013      	ands	r3, r2
 800487a:	b29b      	uxth	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	bf0c      	ite	eq
 8004880:	2301      	moveq	r3, #1
 8004882:	2300      	movne	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	461a      	mov	r2, r3
 8004888:	e00c      	b.n	80048a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	43da      	mvns	r2, r3
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	4013      	ands	r3, r2
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf0c      	ite	eq
 800489c:	2301      	moveq	r3, #1
 800489e:	2300      	movne	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d093      	beq.n	80047d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048c2:	e071      	b.n	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d2:	d123      	bne.n	800491c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004908:	f043 0204 	orr.w	r2, r3, #4
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e067      	b.n	80049ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004922:	d041      	beq.n	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004924:	f7fe fd76 	bl	8003414 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	429a      	cmp	r2, r3
 8004932:	d302      	bcc.n	800493a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d136      	bne.n	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	0c1b      	lsrs	r3, r3, #16
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b01      	cmp	r3, #1
 8004942:	d10c      	bne.n	800495e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	43da      	mvns	r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4013      	ands	r3, r2
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	bf14      	ite	ne
 8004956:	2301      	movne	r3, #1
 8004958:	2300      	moveq	r3, #0
 800495a:	b2db      	uxtb	r3, r3
 800495c:	e00b      	b.n	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	43da      	mvns	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4013      	ands	r3, r2
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf14      	ite	ne
 8004970:	2301      	movne	r3, #1
 8004972:	2300      	moveq	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d016      	beq.n	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	f043 0220 	orr.w	r2, r3, #32
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e021      	b.n	80049ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	0c1b      	lsrs	r3, r3, #16
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d10c      	bne.n	80049cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	43da      	mvns	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4013      	ands	r3, r2
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bf14      	ite	ne
 80049c4:	2301      	movne	r3, #1
 80049c6:	2300      	moveq	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	e00b      	b.n	80049e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	43da      	mvns	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4013      	ands	r3, r2
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	bf14      	ite	ne
 80049de:	2301      	movne	r3, #1
 80049e0:	2300      	moveq	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f47f af6d 	bne.w	80048c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a00:	e034      	b.n	8004a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f8e3 	bl	8004bce <I2C_IsAcknowledgeFailed>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e034      	b.n	8004a7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a18:	d028      	beq.n	8004a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1a:	f7fe fcfb 	bl	8003414 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d302      	bcc.n	8004a30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d11d      	bne.n	8004a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a3a:	2b80      	cmp	r3, #128	@ 0x80
 8004a3c:	d016      	beq.n	8004a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	f043 0220 	orr.w	r2, r3, #32
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e007      	b.n	8004a7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a76:	2b80      	cmp	r3, #128	@ 0x80
 8004a78:	d1c3      	bne.n	8004a02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a90:	e034      	b.n	8004afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f89b 	bl	8004bce <I2C_IsAcknowledgeFailed>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e034      	b.n	8004b0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004aa8:	d028      	beq.n	8004afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aaa:	f7fe fcb3 	bl	8003414 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d302      	bcc.n	8004ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d11d      	bne.n	8004afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d016      	beq.n	8004afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae8:	f043 0220 	orr.w	r2, r3, #32
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e007      	b.n	8004b0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d1c3      	bne.n	8004a92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b20:	e049      	b.n	8004bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	2b10      	cmp	r3, #16
 8004b2e:	d119      	bne.n	8004b64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f06f 0210 	mvn.w	r2, #16
 8004b38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e030      	b.n	8004bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b64:	f7fe fc56 	bl	8003414 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d302      	bcc.n	8004b7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d11d      	bne.n	8004bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b84:	2b40      	cmp	r3, #64	@ 0x40
 8004b86:	d016      	beq.n	8004bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	f043 0220 	orr.w	r2, r3, #32
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e007      	b.n	8004bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc0:	2b40      	cmp	r3, #64	@ 0x40
 8004bc2:	d1ae      	bne.n	8004b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004be4:	d11b      	bne.n	8004c1e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	f043 0204 	orr.w	r2, r3, #4
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d129      	bne.n	8004c96 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2224      	movs	r2, #36	@ 0x24
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0201 	bic.w	r2, r2, #1
 8004c58:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0210 	bic.w	r2, r2, #16
 8004c68:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	e000      	b.n	8004c98 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004c96:	2302      	movs	r3, #2
  }
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b20      	cmp	r3, #32
 8004cbc:	d12a      	bne.n	8004d14 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2224      	movs	r2, #36	@ 0x24
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 0201 	bic.w	r2, r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004cde:	89fb      	ldrh	r3, [r7, #14]
 8004ce0:	f023 030f 	bic.w	r3, r3, #15
 8004ce4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	89fb      	ldrh	r3, [r7, #14]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	89fa      	ldrh	r2, [r7, #14]
 8004cf6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	e000      	b.n	8004d16 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004d14:	2302      	movs	r3, #2
  }
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e0bf      	b.n	8004eb6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fd fd38 	bl	80027c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004d66:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6999      	ldr	r1, [r3, #24]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d7c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6899      	ldr	r1, [r3, #8]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b4a      	ldr	r3, [pc, #296]	@ (8004ec0 <HAL_LTDC_Init+0x19c>)
 8004d98:	400b      	ands	r3, r1
 8004d9a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	041b      	lsls	r3, r3, #16
 8004da2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6899      	ldr	r1, [r3, #8]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68d9      	ldr	r1, [r3, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ec0 <HAL_LTDC_Init+0x19c>)
 8004dc6:	400b      	ands	r3, r1
 8004dc8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	041b      	lsls	r3, r3, #16
 8004dd0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68d9      	ldr	r1, [r3, #12]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1a      	ldr	r2, [r3, #32]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6919      	ldr	r1, [r3, #16]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4b33      	ldr	r3, [pc, #204]	@ (8004ec0 <HAL_LTDC_Init+0x19c>)
 8004df4:	400b      	ands	r3, r1
 8004df6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfc:	041b      	lsls	r3, r3, #16
 8004dfe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6919      	ldr	r1, [r3, #16]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6959      	ldr	r1, [r3, #20]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	4b27      	ldr	r3, [pc, #156]	@ (8004ec0 <HAL_LTDC_Init+0x19c>)
 8004e22:	400b      	ands	r3, r1
 8004e24:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2a:	041b      	lsls	r3, r3, #16
 8004e2c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6959      	ldr	r1, [r3, #20]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004e54:	041b      	lsls	r3, r3, #16
 8004e56:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004e66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0206 	orr.w	r2, r2, #6
 8004e92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	f000f800 	.word	0xf000f800

08004ec4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004ec4:	b5b0      	push	{r4, r5, r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_LTDC_ConfigLayer+0x1a>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e02c      	b.n	8004f38 <HAL_LTDC_ConfigLayer+0x74>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2134      	movs	r1, #52	@ 0x34
 8004ef4:	fb01 f303 	mul.w	r3, r1, r3
 8004ef8:	4413      	add	r3, r2
 8004efa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4614      	mov	r4, r2
 8004f02:	461d      	mov	r5, r3
 8004f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f811 	bl	8004f40 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2201      	movs	r2, #1
 8004f24:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bdb0      	pop	{r4, r5, r7, pc}

08004f40 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b089      	sub	sp, #36	@ 0x24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	0c1b      	lsrs	r3, r3, #16
 8004f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f5c:	4413      	add	r3, r2
 8004f5e:	041b      	lsls	r3, r3, #16
 8004f60:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	01db      	lsls	r3, r3, #7
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3384      	adds	r3, #132	@ 0x84
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	6812      	ldr	r2, [r2, #0]
 8004f76:	4611      	mov	r1, r2
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	01d2      	lsls	r2, r2, #7
 8004f7c:	440a      	add	r2, r1
 8004f7e:	3284      	adds	r2, #132	@ 0x84
 8004f80:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004f84:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	0c1b      	lsrs	r3, r3, #16
 8004f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f96:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f98:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	01db      	lsls	r3, r3, #7
 8004fa4:	440b      	add	r3, r1
 8004fa6:	3384      	adds	r3, #132	@ 0x84
 8004fa8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004fae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fbe:	4413      	add	r3, r2
 8004fc0:	041b      	lsls	r3, r3, #16
 8004fc2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	01db      	lsls	r3, r3, #7
 8004fce:	4413      	add	r3, r2
 8004fd0:	3384      	adds	r3, #132	@ 0x84
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	4611      	mov	r1, r2
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	01d2      	lsls	r2, r2, #7
 8004fde:	440a      	add	r2, r1
 8004fe0:	3284      	adds	r2, #132	@ 0x84
 8004fe2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004fe6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ff6:	4413      	add	r3, r2
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4619      	mov	r1, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	01db      	lsls	r3, r3, #7
 8005004:	440b      	add	r3, r1
 8005006:	3384      	adds	r3, #132	@ 0x84
 8005008:	4619      	mov	r1, r3
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	4313      	orrs	r3, r2
 800500e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	461a      	mov	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	01db      	lsls	r3, r3, #7
 800501a:	4413      	add	r3, r2
 800501c:	3384      	adds	r3, #132	@ 0x84
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	4611      	mov	r1, r2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	01d2      	lsls	r2, r2, #7
 800502a:	440a      	add	r2, r1
 800502c:	3284      	adds	r2, #132	@ 0x84
 800502e:	f023 0307 	bic.w	r3, r3, #7
 8005032:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	01db      	lsls	r3, r3, #7
 800503e:	4413      	add	r3, r2
 8005040:	3384      	adds	r3, #132	@ 0x84
 8005042:	461a      	mov	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005050:	021b      	lsls	r3, r3, #8
 8005052:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800505a:	041b      	lsls	r3, r3, #16
 800505c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	061b      	lsls	r3, r3, #24
 8005064:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	01db      	lsls	r3, r3, #7
 8005070:	4413      	add	r3, r2
 8005072:	3384      	adds	r3, #132	@ 0x84
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	01db      	lsls	r3, r3, #7
 8005080:	4413      	add	r3, r2
 8005082:	3384      	adds	r3, #132	@ 0x84
 8005084:	461a      	mov	r2, r3
 8005086:	2300      	movs	r3, #0
 8005088:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005090:	461a      	mov	r2, r3
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	431a      	orrs	r2, r3
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	431a      	orrs	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4619      	mov	r1, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	01db      	lsls	r3, r3, #7
 80050a4:	440b      	add	r3, r1
 80050a6:	3384      	adds	r3, #132	@ 0x84
 80050a8:	4619      	mov	r1, r3
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	01db      	lsls	r3, r3, #7
 80050ba:	4413      	add	r3, r2
 80050bc:	3384      	adds	r3, #132	@ 0x84
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	4611      	mov	r1, r2
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	01d2      	lsls	r2, r2, #7
 80050ca:	440a      	add	r2, r1
 80050cc:	3284      	adds	r2, #132	@ 0x84
 80050ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80050d2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	461a      	mov	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	01db      	lsls	r3, r3, #7
 80050de:	4413      	add	r3, r2
 80050e0:	3384      	adds	r3, #132	@ 0x84
 80050e2:	461a      	mov	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	461a      	mov	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	01db      	lsls	r3, r3, #7
 80050f4:	4413      	add	r3, r2
 80050f6:	3384      	adds	r3, #132	@ 0x84
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	6812      	ldr	r2, [r2, #0]
 80050fe:	4611      	mov	r1, r2
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	01d2      	lsls	r2, r2, #7
 8005104:	440a      	add	r2, r1
 8005106:	3284      	adds	r2, #132	@ 0x84
 8005108:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800510c:	f023 0307 	bic.w	r3, r3, #7
 8005110:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	69da      	ldr	r2, [r3, #28]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	68f9      	ldr	r1, [r7, #12]
 800511c:	6809      	ldr	r1, [r1, #0]
 800511e:	4608      	mov	r0, r1
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	01c9      	lsls	r1, r1, #7
 8005124:	4401      	add	r1, r0
 8005126:	3184      	adds	r1, #132	@ 0x84
 8005128:	4313      	orrs	r3, r2
 800512a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	01db      	lsls	r3, r3, #7
 8005136:	4413      	add	r3, r2
 8005138:	3384      	adds	r3, #132	@ 0x84
 800513a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	01db      	lsls	r3, r3, #7
 8005146:	4413      	add	r3, r2
 8005148:	3384      	adds	r3, #132	@ 0x84
 800514a:	461a      	mov	r2, r3
 800514c:	2300      	movs	r3, #0
 800514e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	01db      	lsls	r3, r3, #7
 800515a:	4413      	add	r3, r2
 800515c:	3384      	adds	r3, #132	@ 0x84
 800515e:	461a      	mov	r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d102      	bne.n	8005174 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800516e:	2304      	movs	r3, #4
 8005170:	61fb      	str	r3, [r7, #28]
 8005172:	e01b      	b.n	80051ac <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d102      	bne.n	8005182 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800517c:	2303      	movs	r3, #3
 800517e:	61fb      	str	r3, [r7, #28]
 8005180:	e014      	b.n	80051ac <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	2b04      	cmp	r3, #4
 8005188:	d00b      	beq.n	80051a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800518e:	2b02      	cmp	r3, #2
 8005190:	d007      	beq.n	80051a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005196:	2b03      	cmp	r3, #3
 8005198:	d003      	beq.n	80051a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800519e:	2b07      	cmp	r3, #7
 80051a0:	d102      	bne.n	80051a8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80051a2:	2302      	movs	r3, #2
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	e001      	b.n	80051ac <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80051a8:	2301      	movs	r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	461a      	mov	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	01db      	lsls	r3, r3, #7
 80051b6:	4413      	add	r3, r2
 80051b8:	3384      	adds	r3, #132	@ 0x84
 80051ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	4611      	mov	r1, r2
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	01d2      	lsls	r2, r2, #7
 80051c6:	440a      	add	r2, r1
 80051c8:	3284      	adds	r2, #132	@ 0x84
 80051ca:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80051ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	fb02 f303 	mul.w	r3, r2, r3
 80051da:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	1acb      	subs	r3, r1, r3
 80051e6:	69f9      	ldr	r1, [r7, #28]
 80051e8:	fb01 f303 	mul.w	r3, r1, r3
 80051ec:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80051ee:	68f9      	ldr	r1, [r7, #12]
 80051f0:	6809      	ldr	r1, [r1, #0]
 80051f2:	4608      	mov	r0, r1
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	01c9      	lsls	r1, r1, #7
 80051f8:	4401      	add	r1, r0
 80051fa:	3184      	adds	r1, #132	@ 0x84
 80051fc:	4313      	orrs	r3, r2
 80051fe:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	01db      	lsls	r3, r3, #7
 800520a:	4413      	add	r3, r2
 800520c:	3384      	adds	r3, #132	@ 0x84
 800520e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	4611      	mov	r1, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	01d2      	lsls	r2, r2, #7
 800521a:	440a      	add	r2, r1
 800521c:	3284      	adds	r2, #132	@ 0x84
 800521e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005222:	f023 0307 	bic.w	r3, r3, #7
 8005226:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	01db      	lsls	r3, r3, #7
 8005232:	4413      	add	r3, r2
 8005234:	3384      	adds	r3, #132	@ 0x84
 8005236:	461a      	mov	r2, r3
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	01db      	lsls	r3, r3, #7
 8005248:	4413      	add	r3, r2
 800524a:	3384      	adds	r3, #132	@ 0x84
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	6812      	ldr	r2, [r2, #0]
 8005252:	4611      	mov	r1, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	01d2      	lsls	r2, r2, #7
 8005258:	440a      	add	r2, r1
 800525a:	3284      	adds	r2, #132	@ 0x84
 800525c:	f043 0301 	orr.w	r3, r3, #1
 8005260:	6013      	str	r3, [r2, #0]
}
 8005262:	bf00      	nop
 8005264:	3724      	adds	r7, #36	@ 0x24
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e267      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d075      	beq.n	800537a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800528e:	4b88      	ldr	r3, [pc, #544]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 030c 	and.w	r3, r3, #12
 8005296:	2b04      	cmp	r3, #4
 8005298:	d00c      	beq.n	80052b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800529a:	4b85      	ldr	r3, [pc, #532]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d112      	bne.n	80052cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052a6:	4b82      	ldr	r3, [pc, #520]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052b2:	d10b      	bne.n	80052cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b4:	4b7e      	ldr	r3, [pc, #504]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d05b      	beq.n	8005378 <HAL_RCC_OscConfig+0x108>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d157      	bne.n	8005378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e242      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052d4:	d106      	bne.n	80052e4 <HAL_RCC_OscConfig+0x74>
 80052d6:	4b76      	ldr	r3, [pc, #472]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a75      	ldr	r2, [pc, #468]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	e01d      	b.n	8005320 <HAL_RCC_OscConfig+0xb0>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052ec:	d10c      	bne.n	8005308 <HAL_RCC_OscConfig+0x98>
 80052ee:	4b70      	ldr	r3, [pc, #448]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a6f      	ldr	r2, [pc, #444]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	4b6d      	ldr	r3, [pc, #436]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a6c      	ldr	r2, [pc, #432]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	e00b      	b.n	8005320 <HAL_RCC_OscConfig+0xb0>
 8005308:	4b69      	ldr	r3, [pc, #420]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a68      	ldr	r2, [pc, #416]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 800530e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	4b66      	ldr	r3, [pc, #408]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a65      	ldr	r2, [pc, #404]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 800531a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800531e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d013      	beq.n	8005350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005328:	f7fe f874 	bl	8003414 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005330:	f7fe f870 	bl	8003414 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b64      	cmp	r3, #100	@ 0x64
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e207      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	4b5b      	ldr	r3, [pc, #364]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0f0      	beq.n	8005330 <HAL_RCC_OscConfig+0xc0>
 800534e:	e014      	b.n	800537a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005350:	f7fe f860 	bl	8003414 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005358:	f7fe f85c 	bl	8003414 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b64      	cmp	r3, #100	@ 0x64
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e1f3      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800536a:	4b51      	ldr	r3, [pc, #324]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0xe8>
 8005376:	e000      	b.n	800537a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d063      	beq.n	800544e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005386:	4b4a      	ldr	r3, [pc, #296]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00b      	beq.n	80053aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005392:	4b47      	ldr	r3, [pc, #284]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800539a:	2b08      	cmp	r3, #8
 800539c:	d11c      	bne.n	80053d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800539e:	4b44      	ldr	r3, [pc, #272]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d116      	bne.n	80053d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053aa:	4b41      	ldr	r3, [pc, #260]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <HAL_RCC_OscConfig+0x152>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d001      	beq.n	80053c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e1c7      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c2:	4b3b      	ldr	r3, [pc, #236]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4937      	ldr	r1, [pc, #220]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d6:	e03a      	b.n	800544e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d020      	beq.n	8005422 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053e0:	4b34      	ldr	r3, [pc, #208]	@ (80054b4 <HAL_RCC_OscConfig+0x244>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e6:	f7fe f815 	bl	8003414 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ee:	f7fe f811 	bl	8003414 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e1a8      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005400:	4b2b      	ldr	r3, [pc, #172]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540c:	4b28      	ldr	r3, [pc, #160]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	4925      	ldr	r1, [pc, #148]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 800541c:	4313      	orrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]
 8005420:	e015      	b.n	800544e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005422:	4b24      	ldr	r3, [pc, #144]	@ (80054b4 <HAL_RCC_OscConfig+0x244>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005428:	f7fd fff4 	bl	8003414 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005430:	f7fd fff0 	bl	8003414 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e187      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005442:	4b1b      	ldr	r3, [pc, #108]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d036      	beq.n	80054c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d016      	beq.n	8005490 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005462:	4b15      	ldr	r3, [pc, #84]	@ (80054b8 <HAL_RCC_OscConfig+0x248>)
 8005464:	2201      	movs	r2, #1
 8005466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005468:	f7fd ffd4 	bl	8003414 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005470:	f7fd ffd0 	bl	8003414 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e167      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005482:	4b0b      	ldr	r3, [pc, #44]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0f0      	beq.n	8005470 <HAL_RCC_OscConfig+0x200>
 800548e:	e01b      	b.n	80054c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005490:	4b09      	ldr	r3, [pc, #36]	@ (80054b8 <HAL_RCC_OscConfig+0x248>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005496:	f7fd ffbd 	bl	8003414 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800549c:	e00e      	b.n	80054bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800549e:	f7fd ffb9 	bl	8003414 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d907      	bls.n	80054bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e150      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
 80054b0:	40023800 	.word	0x40023800
 80054b4:	42470000 	.word	0x42470000
 80054b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054bc:	4b88      	ldr	r3, [pc, #544]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1ea      	bne.n	800549e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8097 	beq.w	8005604 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d6:	2300      	movs	r3, #0
 80054d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054da:	4b81      	ldr	r3, [pc, #516]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10f      	bne.n	8005506 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e6:	2300      	movs	r3, #0
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	4b7d      	ldr	r3, [pc, #500]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ee:	4a7c      	ldr	r2, [pc, #496]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80054f6:	4b7a      	ldr	r3, [pc, #488]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005502:	2301      	movs	r3, #1
 8005504:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005506:	4b77      	ldr	r3, [pc, #476]	@ (80056e4 <HAL_RCC_OscConfig+0x474>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800550e:	2b00      	cmp	r3, #0
 8005510:	d118      	bne.n	8005544 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005512:	4b74      	ldr	r3, [pc, #464]	@ (80056e4 <HAL_RCC_OscConfig+0x474>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a73      	ldr	r2, [pc, #460]	@ (80056e4 <HAL_RCC_OscConfig+0x474>)
 8005518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800551c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800551e:	f7fd ff79 	bl	8003414 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005526:	f7fd ff75 	bl	8003414 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e10c      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005538:	4b6a      	ldr	r3, [pc, #424]	@ (80056e4 <HAL_RCC_OscConfig+0x474>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d106      	bne.n	800555a <HAL_RCC_OscConfig+0x2ea>
 800554c:	4b64      	ldr	r3, [pc, #400]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 800554e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005550:	4a63      	ldr	r2, [pc, #396]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	6713      	str	r3, [r2, #112]	@ 0x70
 8005558:	e01c      	b.n	8005594 <HAL_RCC_OscConfig+0x324>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	2b05      	cmp	r3, #5
 8005560:	d10c      	bne.n	800557c <HAL_RCC_OscConfig+0x30c>
 8005562:	4b5f      	ldr	r3, [pc, #380]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005566:	4a5e      	ldr	r2, [pc, #376]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005568:	f043 0304 	orr.w	r3, r3, #4
 800556c:	6713      	str	r3, [r2, #112]	@ 0x70
 800556e:	4b5c      	ldr	r3, [pc, #368]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005572:	4a5b      	ldr	r2, [pc, #364]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	6713      	str	r3, [r2, #112]	@ 0x70
 800557a:	e00b      	b.n	8005594 <HAL_RCC_OscConfig+0x324>
 800557c:	4b58      	ldr	r3, [pc, #352]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 800557e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005580:	4a57      	ldr	r2, [pc, #348]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005582:	f023 0301 	bic.w	r3, r3, #1
 8005586:	6713      	str	r3, [r2, #112]	@ 0x70
 8005588:	4b55      	ldr	r3, [pc, #340]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558c:	4a54      	ldr	r2, [pc, #336]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 800558e:	f023 0304 	bic.w	r3, r3, #4
 8005592:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d015      	beq.n	80055c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559c:	f7fd ff3a 	bl	8003414 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a2:	e00a      	b.n	80055ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055a4:	f7fd ff36 	bl	8003414 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e0cb      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ba:	4b49      	ldr	r3, [pc, #292]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0ee      	beq.n	80055a4 <HAL_RCC_OscConfig+0x334>
 80055c6:	e014      	b.n	80055f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c8:	f7fd ff24 	bl	8003414 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ce:	e00a      	b.n	80055e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d0:	f7fd ff20 	bl	8003414 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055de:	4293      	cmp	r3, r2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e0b5      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e6:	4b3e      	ldr	r3, [pc, #248]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1ee      	bne.n	80055d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055f2:	7dfb      	ldrb	r3, [r7, #23]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d105      	bne.n	8005604 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f8:	4b39      	ldr	r3, [pc, #228]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fc:	4a38      	ldr	r2, [pc, #224]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005602:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80a1 	beq.w	8005750 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800560e:	4b34      	ldr	r3, [pc, #208]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 030c 	and.w	r3, r3, #12
 8005616:	2b08      	cmp	r3, #8
 8005618:	d05c      	beq.n	80056d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d141      	bne.n	80056a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005622:	4b31      	ldr	r3, [pc, #196]	@ (80056e8 <HAL_RCC_OscConfig+0x478>)
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005628:	f7fd fef4 	bl	8003414 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005630:	f7fd fef0 	bl	8003414 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e087      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005642:	4b27      	ldr	r3, [pc, #156]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69da      	ldr	r2, [r3, #28]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	019b      	lsls	r3, r3, #6
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005664:	085b      	lsrs	r3, r3, #1
 8005666:	3b01      	subs	r3, #1
 8005668:	041b      	lsls	r3, r3, #16
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005670:	061b      	lsls	r3, r3, #24
 8005672:	491b      	ldr	r1, [pc, #108]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005674:	4313      	orrs	r3, r2
 8005676:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005678:	4b1b      	ldr	r3, [pc, #108]	@ (80056e8 <HAL_RCC_OscConfig+0x478>)
 800567a:	2201      	movs	r2, #1
 800567c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567e:	f7fd fec9 	bl	8003414 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005686:	f7fd fec5 	bl	8003414 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e05c      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005698:	4b11      	ldr	r3, [pc, #68]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCC_OscConfig+0x416>
 80056a4:	e054      	b.n	8005750 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a6:	4b10      	ldr	r3, [pc, #64]	@ (80056e8 <HAL_RCC_OscConfig+0x478>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ac:	f7fd feb2 	bl	8003414 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b4:	f7fd feae 	bl	8003414 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e045      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c6:	4b06      	ldr	r3, [pc, #24]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0x444>
 80056d2:	e03d      	b.n	8005750 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d107      	bne.n	80056ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e038      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
 80056e0:	40023800 	.word	0x40023800
 80056e4:	40007000 	.word	0x40007000
 80056e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056ec:	4b1b      	ldr	r3, [pc, #108]	@ (800575c <HAL_RCC_OscConfig+0x4ec>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d028      	beq.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005704:	429a      	cmp	r2, r3
 8005706:	d121      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005712:	429a      	cmp	r2, r3
 8005714:	d11a      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800571c:	4013      	ands	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005722:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005724:	4293      	cmp	r3, r2
 8005726:	d111      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005732:	085b      	lsrs	r3, r3, #1
 8005734:	3b01      	subs	r3, #1
 8005736:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005738:	429a      	cmp	r2, r3
 800573a:	d107      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005746:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005748:	429a      	cmp	r2, r3
 800574a:	d001      	beq.n	8005750 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40023800 	.word	0x40023800

08005760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e0cc      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005774:	4b68      	ldr	r3, [pc, #416]	@ (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 030f 	and.w	r3, r3, #15
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d90c      	bls.n	800579c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005782:	4b65      	ldr	r3, [pc, #404]	@ (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800578a:	4b63      	ldr	r3, [pc, #396]	@ (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d001      	beq.n	800579c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0b8      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d020      	beq.n	80057ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057b4:	4b59      	ldr	r3, [pc, #356]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	4a58      	ldr	r2, [pc, #352]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80057be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057cc:	4b53      	ldr	r3, [pc, #332]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4a52      	ldr	r2, [pc, #328]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80057d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d8:	4b50      	ldr	r3, [pc, #320]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	494d      	ldr	r1, [pc, #308]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d044      	beq.n	8005880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d107      	bne.n	800580e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fe:	4b47      	ldr	r3, [pc, #284]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d119      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e07f      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d003      	beq.n	800581e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800581a:	2b03      	cmp	r3, #3
 800581c:	d107      	bne.n	800582e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800581e:	4b3f      	ldr	r3, [pc, #252]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e06f      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582e:	4b3b      	ldr	r3, [pc, #236]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e067      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800583e:	4b37      	ldr	r3, [pc, #220]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f023 0203 	bic.w	r2, r3, #3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	4934      	ldr	r1, [pc, #208]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 800584c:	4313      	orrs	r3, r2
 800584e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005850:	f7fd fde0 	bl	8003414 <HAL_GetTick>
 8005854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005856:	e00a      	b.n	800586e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005858:	f7fd fddc 	bl	8003414 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005866:	4293      	cmp	r3, r2
 8005868:	d901      	bls.n	800586e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e04f      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586e:	4b2b      	ldr	r3, [pc, #172]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 020c 	and.w	r2, r3, #12
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	429a      	cmp	r2, r3
 800587e:	d1eb      	bne.n	8005858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005880:	4b25      	ldr	r3, [pc, #148]	@ (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 030f 	and.w	r3, r3, #15
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d20c      	bcs.n	80058a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800588e:	4b22      	ldr	r3, [pc, #136]	@ (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005896:	4b20      	ldr	r3, [pc, #128]	@ (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d001      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e032      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058b4:	4b19      	ldr	r3, [pc, #100]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	4916      	ldr	r1, [pc, #88]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d009      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058d2:	4b12      	ldr	r3, [pc, #72]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	490e      	ldr	r1, [pc, #56]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058e6:	f000 f821 	bl	800592c <HAL_RCC_GetSysClockFreq>
 80058ea:	4602      	mov	r2, r0
 80058ec:	4b0b      	ldr	r3, [pc, #44]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	091b      	lsrs	r3, r3, #4
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	490a      	ldr	r1, [pc, #40]	@ (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 80058f8:	5ccb      	ldrb	r3, [r1, r3]
 80058fa:	fa22 f303 	lsr.w	r3, r2, r3
 80058fe:	4a09      	ldr	r2, [pc, #36]	@ (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 8005900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005902:	4b09      	ldr	r3, [pc, #36]	@ (8005928 <HAL_RCC_ClockConfig+0x1c8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f7fd fd40 	bl	800338c <HAL_InitTick>

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40023c00 	.word	0x40023c00
 800591c:	40023800 	.word	0x40023800
 8005920:	08008728 	.word	0x08008728
 8005924:	20000010 	.word	0x20000010
 8005928:	20000014 	.word	0x20000014

0800592c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800592c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005930:	b094      	sub	sp, #80	@ 0x50
 8005932:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005944:	4b79      	ldr	r3, [pc, #484]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f003 030c 	and.w	r3, r3, #12
 800594c:	2b08      	cmp	r3, #8
 800594e:	d00d      	beq.n	800596c <HAL_RCC_GetSysClockFreq+0x40>
 8005950:	2b08      	cmp	r3, #8
 8005952:	f200 80e1 	bhi.w	8005b18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0x34>
 800595a:	2b04      	cmp	r3, #4
 800595c:	d003      	beq.n	8005966 <HAL_RCC_GetSysClockFreq+0x3a>
 800595e:	e0db      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005960:	4b73      	ldr	r3, [pc, #460]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8005962:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005964:	e0db      	b.n	8005b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005966:	4b73      	ldr	r3, [pc, #460]	@ (8005b34 <HAL_RCC_GetSysClockFreq+0x208>)
 8005968:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800596a:	e0d8      	b.n	8005b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800596c:	4b6f      	ldr	r3, [pc, #444]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005974:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005976:	4b6d      	ldr	r3, [pc, #436]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d063      	beq.n	8005a4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005982:	4b6a      	ldr	r3, [pc, #424]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	099b      	lsrs	r3, r3, #6
 8005988:	2200      	movs	r2, #0
 800598a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800598c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800598e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005994:	633b      	str	r3, [r7, #48]	@ 0x30
 8005996:	2300      	movs	r3, #0
 8005998:	637b      	str	r3, [r7, #52]	@ 0x34
 800599a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800599e:	4622      	mov	r2, r4
 80059a0:	462b      	mov	r3, r5
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	f04f 0100 	mov.w	r1, #0
 80059aa:	0159      	lsls	r1, r3, #5
 80059ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059b0:	0150      	lsls	r0, r2, #5
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4621      	mov	r1, r4
 80059b8:	1a51      	subs	r1, r2, r1
 80059ba:	6139      	str	r1, [r7, #16]
 80059bc:	4629      	mov	r1, r5
 80059be:	eb63 0301 	sbc.w	r3, r3, r1
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059d0:	4659      	mov	r1, fp
 80059d2:	018b      	lsls	r3, r1, #6
 80059d4:	4651      	mov	r1, sl
 80059d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059da:	4651      	mov	r1, sl
 80059dc:	018a      	lsls	r2, r1, #6
 80059de:	4651      	mov	r1, sl
 80059e0:	ebb2 0801 	subs.w	r8, r2, r1
 80059e4:	4659      	mov	r1, fp
 80059e6:	eb63 0901 	sbc.w	r9, r3, r1
 80059ea:	f04f 0200 	mov.w	r2, #0
 80059ee:	f04f 0300 	mov.w	r3, #0
 80059f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059fe:	4690      	mov	r8, r2
 8005a00:	4699      	mov	r9, r3
 8005a02:	4623      	mov	r3, r4
 8005a04:	eb18 0303 	adds.w	r3, r8, r3
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	462b      	mov	r3, r5
 8005a0c:	eb49 0303 	adc.w	r3, r9, r3
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a1e:	4629      	mov	r1, r5
 8005a20:	024b      	lsls	r3, r1, #9
 8005a22:	4621      	mov	r1, r4
 8005a24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a28:	4621      	mov	r1, r4
 8005a2a:	024a      	lsls	r2, r1, #9
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a32:	2200      	movs	r2, #0
 8005a34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a3c:	f7fa fc28 	bl	8000290 <__aeabi_uldivmod>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4613      	mov	r3, r2
 8005a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a48:	e058      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a4a:	4b38      	ldr	r3, [pc, #224]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	099b      	lsrs	r3, r3, #6
 8005a50:	2200      	movs	r2, #0
 8005a52:	4618      	mov	r0, r3
 8005a54:	4611      	mov	r1, r2
 8005a56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a5a:	623b      	str	r3, [r7, #32]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a64:	4642      	mov	r2, r8
 8005a66:	464b      	mov	r3, r9
 8005a68:	f04f 0000 	mov.w	r0, #0
 8005a6c:	f04f 0100 	mov.w	r1, #0
 8005a70:	0159      	lsls	r1, r3, #5
 8005a72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a76:	0150      	lsls	r0, r2, #5
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a82:	4649      	mov	r1, r9
 8005a84:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a9c:	ebb2 040a 	subs.w	r4, r2, sl
 8005aa0:	eb63 050b 	sbc.w	r5, r3, fp
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	00eb      	lsls	r3, r5, #3
 8005aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ab2:	00e2      	lsls	r2, r4, #3
 8005ab4:	4614      	mov	r4, r2
 8005ab6:	461d      	mov	r5, r3
 8005ab8:	4643      	mov	r3, r8
 8005aba:	18e3      	adds	r3, r4, r3
 8005abc:	603b      	str	r3, [r7, #0]
 8005abe:	464b      	mov	r3, r9
 8005ac0:	eb45 0303 	adc.w	r3, r5, r3
 8005ac4:	607b      	str	r3, [r7, #4]
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	028b      	lsls	r3, r1, #10
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005adc:	4621      	mov	r1, r4
 8005ade:	028a      	lsls	r2, r1, #10
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	61bb      	str	r3, [r7, #24]
 8005aea:	61fa      	str	r2, [r7, #28]
 8005aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005af0:	f7fa fbce 	bl	8000290 <__aeabi_uldivmod>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4613      	mov	r3, r2
 8005afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005afc:	4b0b      	ldr	r3, [pc, #44]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	0c1b      	lsrs	r3, r3, #16
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	3301      	adds	r3, #1
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005b0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b16:	e002      	b.n	8005b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b18:	4b05      	ldr	r3, [pc, #20]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3750      	adds	r7, #80	@ 0x50
 8005b24:	46bd      	mov	sp, r7
 8005b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	00f42400 	.word	0x00f42400
 8005b34:	007a1200 	.word	0x007a1200

08005b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b3c:	4b03      	ldr	r3, [pc, #12]	@ (8005b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	20000010 	.word	0x20000010

08005b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b54:	f7ff fff0 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	4b05      	ldr	r3, [pc, #20]	@ (8005b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	0a9b      	lsrs	r3, r3, #10
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	4903      	ldr	r1, [pc, #12]	@ (8005b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b66:	5ccb      	ldrb	r3, [r1, r3]
 8005b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	40023800 	.word	0x40023800
 8005b74:	08008738 	.word	0x08008738

08005b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10b      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d105      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d075      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bac:	4b91      	ldr	r3, [pc, #580]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bb2:	f7fd fc2f 	bl	8003414 <HAL_GetTick>
 8005bb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bb8:	e008      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bba:	f7fd fc2b 	bl	8003414 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e189      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bcc:	4b8a      	ldr	r3, [pc, #552]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1f0      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d009      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	019a      	lsls	r2, r3, #6
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	071b      	lsls	r3, r3, #28
 8005bf0:	4981      	ldr	r1, [pc, #516]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d01f      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c04:	4b7c      	ldr	r3, [pc, #496]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c0a:	0f1b      	lsrs	r3, r3, #28
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	019a      	lsls	r2, r3, #6
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	061b      	lsls	r3, r3, #24
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	071b      	lsls	r3, r3, #28
 8005c24:	4974      	ldr	r1, [pc, #464]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c2c:	4b72      	ldr	r3, [pc, #456]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c32:	f023 021f 	bic.w	r2, r3, #31
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	496e      	ldr	r1, [pc, #440]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00d      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	019a      	lsls	r2, r3, #6
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	061b      	lsls	r3, r3, #24
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	071b      	lsls	r3, r3, #28
 8005c64:	4964      	ldr	r1, [pc, #400]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c6c:	4b61      	ldr	r3, [pc, #388]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c72:	f7fd fbcf 	bl	8003414 <HAL_GetTick>
 8005c76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c78:	e008      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c7a:	f7fd fbcb 	bl	8003414 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e129      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c8c:	4b5a      	ldr	r3, [pc, #360]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0f0      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d105      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d079      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005cb0:	4b52      	ldr	r3, [pc, #328]	@ (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cb6:	f7fd fbad 	bl	8003414 <HAL_GetTick>
 8005cba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cbc:	e008      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005cbe:	f7fd fba9 	bl	8003414 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d901      	bls.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e107      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cd0:	4b49      	ldr	r3, [pc, #292]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cdc:	d0ef      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d020      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005cea:	4b43      	ldr	r3, [pc, #268]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf0:	0f1b      	lsrs	r3, r3, #28
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	019a      	lsls	r2, r3, #6
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	061b      	lsls	r3, r3, #24
 8005d04:	431a      	orrs	r2, r3
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	071b      	lsls	r3, r3, #28
 8005d0a:	493b      	ldr	r1, [pc, #236]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d12:	4b39      	ldr	r3, [pc, #228]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d18:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	4934      	ldr	r1, [pc, #208]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01e      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d38:	4b2f      	ldr	r3, [pc, #188]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3e:	0e1b      	lsrs	r3, r3, #24
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	019a      	lsls	r2, r3, #6
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	061b      	lsls	r3, r3, #24
 8005d50:	431a      	orrs	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	071b      	lsls	r3, r3, #28
 8005d58:	4927      	ldr	r1, [pc, #156]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d60:	4b25      	ldr	r3, [pc, #148]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d66:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6e:	4922      	ldr	r1, [pc, #136]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d76:	4b21      	ldr	r3, [pc, #132]	@ (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005d78:	2201      	movs	r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d7c:	f7fd fb4a 	bl	8003414 <HAL_GetTick>
 8005d80:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d82:	e008      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d84:	f7fd fb46 	bl	8003414 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e0a4      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d96:	4b18      	ldr	r3, [pc, #96]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005da2:	d1ef      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0320 	and.w	r3, r3, #32
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 808b 	beq.w	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	4b10      	ldr	r3, [pc, #64]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dba:	4a0f      	ldr	r2, [pc, #60]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005dce:	4b0c      	ldr	r3, [pc, #48]	@ (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a0b      	ldr	r2, [pc, #44]	@ (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dd8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005dda:	f7fd fb1b 	bl	8003414 <HAL_GetTick>
 8005dde:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005de0:	e010      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de2:	f7fd fb17 	bl	8003414 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d909      	bls.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e075      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005df4:	42470068 	.word	0x42470068
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	42470070 	.word	0x42470070
 8005e00:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005e04:	4b38      	ldr	r3, [pc, #224]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0e8      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e10:	4b36      	ldr	r3, [pc, #216]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e18:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d02f      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d028      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e38:	4b2d      	ldr	r3, [pc, #180]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e44:	4a29      	ldr	r2, [pc, #164]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e4a:	4b28      	ldr	r3, [pc, #160]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d114      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e56:	f7fd fadd 	bl	8003414 <HAL_GetTick>
 8005e5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e5c:	e00a      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e5e:	f7fd fad9 	bl	8003414 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e035      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e74:	4b1d      	ldr	r3, [pc, #116]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0ee      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e8c:	d10d      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005e8e:	4b17      	ldr	r3, [pc, #92]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ea2:	4912      	ldr	r1, [pc, #72]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	608b      	str	r3, [r1, #8]
 8005ea8:	e005      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005eaa:	4b10      	ldr	r3, [pc, #64]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	4a0f      	ldr	r2, [pc, #60]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005eb0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005eb4:	6093      	str	r3, [r2, #8]
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005eb8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ec2:	490a      	ldr	r1, [pc, #40]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d004      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005eda:	4b06      	ldr	r3, [pc, #24]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005edc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40007000 	.word	0x40007000
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	42470e40 	.word	0x42470e40
 8005ef4:	424711e0 	.word	0x424711e0

08005ef8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e01c      	b.n	8005f44 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	795b      	ldrb	r3, [r3, #5]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d105      	bne.n	8005f20 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fc fd78 	bl	8002a10 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f042 0204 	orr.w	r2, r2, #4
 8005f34:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e07b      	b.n	8006056 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d108      	bne.n	8005f78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f6e:	d009      	beq.n	8005f84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	61da      	str	r2, [r3, #28]
 8005f76:	e005      	b.n	8005f84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fc fd58 	bl	8002a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	431a      	orrs	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006008:	ea42 0103 	orr.w	r1, r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006010:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	0c1b      	lsrs	r3, r3, #16
 8006022:	f003 0104 	and.w	r1, r3, #4
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602a:	f003 0210 	and.w	r2, r3, #16
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69da      	ldr	r2, [r3, #28]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006044:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b082      	sub	sp, #8
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e01a      	b.n	80060a6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006086:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7fc fd2b 	bl	8002ae4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b088      	sub	sp, #32
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	4613      	mov	r3, r2
 80060bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060be:	f7fd f9a9 	bl	8003414 <HAL_GetTick>
 80060c2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80060c4:	88fb      	ldrh	r3, [r7, #6]
 80060c6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d001      	beq.n	80060d8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80060d4:	2302      	movs	r3, #2
 80060d6:	e12a      	b.n	800632e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <HAL_SPI_Transmit+0x36>
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e122      	b.n	800632e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_SPI_Transmit+0x48>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e11b      	b.n	800632e <HAL_SPI_Transmit+0x280>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2203      	movs	r2, #3
 8006102:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	88fa      	ldrh	r2, [r7, #6]
 8006116:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	88fa      	ldrh	r2, [r7, #6]
 800611c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006144:	d10f      	bne.n	8006166 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006154:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006164:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006170:	2b40      	cmp	r3, #64	@ 0x40
 8006172:	d007      	beq.n	8006184 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006182:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800618c:	d152      	bne.n	8006234 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <HAL_SPI_Transmit+0xee>
 8006196:	8b7b      	ldrh	r3, [r7, #26]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d145      	bne.n	8006228 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a0:	881a      	ldrh	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ac:	1c9a      	adds	r2, r3, #2
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061c0:	e032      	b.n	8006228 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d112      	bne.n	80061f6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d4:	881a      	ldrh	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e0:	1c9a      	adds	r2, r3, #2
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80061f4:	e018      	b.n	8006228 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061f6:	f7fd f90d 	bl	8003414 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d803      	bhi.n	800620e <HAL_SPI_Transmit+0x160>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800620c:	d102      	bne.n	8006214 <HAL_SPI_Transmit+0x166>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d109      	bne.n	8006228 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e082      	b.n	800632e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1c7      	bne.n	80061c2 <HAL_SPI_Transmit+0x114>
 8006232:	e053      	b.n	80062dc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <HAL_SPI_Transmit+0x194>
 800623c:	8b7b      	ldrh	r3, [r7, #26]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d147      	bne.n	80062d2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	330c      	adds	r3, #12
 800624c:	7812      	ldrb	r2, [r2, #0]
 800624e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800625e:	b29b      	uxth	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006268:	e033      	b.n	80062d2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b02      	cmp	r3, #2
 8006276:	d113      	bne.n	80062a0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	330c      	adds	r3, #12
 8006282:	7812      	ldrb	r2, [r2, #0]
 8006284:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800629e:	e018      	b.n	80062d2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062a0:	f7fd f8b8 	bl	8003414 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d803      	bhi.n	80062b8 <HAL_SPI_Transmit+0x20a>
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062b6:	d102      	bne.n	80062be <HAL_SPI_Transmit+0x210>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d109      	bne.n	80062d2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e02d      	b.n	800632e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1c6      	bne.n	800626a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062dc:	69fa      	ldr	r2, [r7, #28]
 80062de:	6839      	ldr	r1, [r7, #0]
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f8bf 	bl	8006464 <SPI_EndRxTxTransaction>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2220      	movs	r2, #32
 80062f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10a      	bne.n	8006310 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062fa:	2300      	movs	r3, #0
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800632c:	2300      	movs	r3, #0
  }
}
 800632e:	4618      	mov	r0, r3
 8006330:	3720      	adds	r7, #32
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006344:	b2db      	uxtb	r3, r3
}
 8006346:	4618      	mov	r0, r3
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
	...

08006354 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	4613      	mov	r3, r2
 8006362:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006364:	f7fd f856 	bl	8003414 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636c:	1a9b      	subs	r3, r3, r2
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	4413      	add	r3, r2
 8006372:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006374:	f7fd f84e 	bl	8003414 <HAL_GetTick>
 8006378:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800637a:	4b39      	ldr	r3, [pc, #228]	@ (8006460 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	015b      	lsls	r3, r3, #5
 8006380:	0d1b      	lsrs	r3, r3, #20
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	fb02 f303 	mul.w	r3, r2, r3
 8006388:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800638a:	e054      	b.n	8006436 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006392:	d050      	beq.n	8006436 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006394:	f7fd f83e 	bl	8003414 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	69fa      	ldr	r2, [r7, #28]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d902      	bls.n	80063aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d13d      	bne.n	8006426 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80063b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063c2:	d111      	bne.n	80063e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063cc:	d004      	beq.n	80063d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d6:	d107      	bne.n	80063e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f0:	d10f      	bne.n	8006412 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006410:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e017      	b.n	8006456 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	3b01      	subs	r3, #1
 8006434:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4013      	ands	r3, r2
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	429a      	cmp	r2, r3
 8006444:	bf0c      	ite	eq
 8006446:	2301      	moveq	r3, #1
 8006448:	2300      	movne	r3, #0
 800644a:	b2db      	uxtb	r3, r3
 800644c:	461a      	mov	r2, r3
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	429a      	cmp	r2, r3
 8006452:	d19b      	bne.n	800638c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3720      	adds	r7, #32
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000010 	.word	0x20000010

08006464 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2201      	movs	r2, #1
 8006478:	2102      	movs	r1, #2
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f7ff ff6a 	bl	8006354 <SPI_WaitFlagStateUntilTimeout>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d007      	beq.n	8006496 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800648a:	f043 0220 	orr.w	r2, r3, #32
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e032      	b.n	80064fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006496:	4b1b      	ldr	r3, [pc, #108]	@ (8006504 <SPI_EndRxTxTransaction+0xa0>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a1b      	ldr	r2, [pc, #108]	@ (8006508 <SPI_EndRxTxTransaction+0xa4>)
 800649c:	fba2 2303 	umull	r2, r3, r2, r3
 80064a0:	0d5b      	lsrs	r3, r3, #21
 80064a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80064a6:	fb02 f303 	mul.w	r3, r2, r3
 80064aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064b4:	d112      	bne.n	80064dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2200      	movs	r2, #0
 80064be:	2180      	movs	r1, #128	@ 0x80
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f7ff ff47 	bl	8006354 <SPI_WaitFlagStateUntilTimeout>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d016      	beq.n	80064fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d0:	f043 0220 	orr.w	r2, r3, #32
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e00f      	b.n	80064fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	3b01      	subs	r3, #1
 80064e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f2:	2b80      	cmp	r3, #128	@ 0x80
 80064f4:	d0f2      	beq.n	80064dc <SPI_EndRxTxTransaction+0x78>
 80064f6:	e000      	b.n	80064fa <SPI_EndRxTxTransaction+0x96>
        break;
 80064f8:	bf00      	nop
  }

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000010 	.word	0x20000010
 8006508:	165e9f81 	.word	0x165e9f81

0800650c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e041      	b.n	80065a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7fc faf4 	bl	8002b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3304      	adds	r3, #4
 8006548:	4619      	mov	r1, r3
 800654a:	4610      	mov	r0, r2
 800654c:	f000 f994 	bl	8006878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
	...

080065ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d001      	beq.n	80065c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e04e      	b.n	8006662 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0201 	orr.w	r2, r2, #1
 80065da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a23      	ldr	r2, [pc, #140]	@ (8006670 <HAL_TIM_Base_Start_IT+0xc4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d022      	beq.n	800662c <HAL_TIM_Base_Start_IT+0x80>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ee:	d01d      	beq.n	800662c <HAL_TIM_Base_Start_IT+0x80>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006674 <HAL_TIM_Base_Start_IT+0xc8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d018      	beq.n	800662c <HAL_TIM_Base_Start_IT+0x80>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006678 <HAL_TIM_Base_Start_IT+0xcc>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d013      	beq.n	800662c <HAL_TIM_Base_Start_IT+0x80>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a1c      	ldr	r2, [pc, #112]	@ (800667c <HAL_TIM_Base_Start_IT+0xd0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00e      	beq.n	800662c <HAL_TIM_Base_Start_IT+0x80>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a1b      	ldr	r2, [pc, #108]	@ (8006680 <HAL_TIM_Base_Start_IT+0xd4>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d009      	beq.n	800662c <HAL_TIM_Base_Start_IT+0x80>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a19      	ldr	r2, [pc, #100]	@ (8006684 <HAL_TIM_Base_Start_IT+0xd8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d004      	beq.n	800662c <HAL_TIM_Base_Start_IT+0x80>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a18      	ldr	r2, [pc, #96]	@ (8006688 <HAL_TIM_Base_Start_IT+0xdc>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d111      	bne.n	8006650 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b06      	cmp	r3, #6
 800663c:	d010      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f042 0201 	orr.w	r2, r2, #1
 800664c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800664e:	e007      	b.n	8006660 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0201 	orr.w	r2, r2, #1
 800665e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	40010000 	.word	0x40010000
 8006674:	40000400 	.word	0x40000400
 8006678:	40000800 	.word	0x40000800
 800667c:	40000c00 	.word	0x40000c00
 8006680:	40010400 	.word	0x40010400
 8006684:	40014000 	.word	0x40014000
 8006688:	40001800 	.word	0x40001800

0800668c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0201 	bic.w	r2, r2, #1
 80066a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6a1a      	ldr	r2, [r3, #32]
 80066aa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80066ae:	4013      	ands	r3, r2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10f      	bne.n	80066d4 <HAL_TIM_Base_Stop_IT+0x48>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6a1a      	ldr	r2, [r3, #32]
 80066ba:	f240 4344 	movw	r3, #1092	@ 0x444
 80066be:	4013      	ands	r3, r2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d107      	bne.n	80066d4 <HAL_TIM_Base_Stop_IT+0x48>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0201 	bic.w	r2, r2, #1
 80066d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b084      	sub	sp, #16
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d101      	bne.n	8006706 <HAL_TIM_ConfigClockSource+0x1c>
 8006702:	2302      	movs	r3, #2
 8006704:	e0b4      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x186>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2202      	movs	r2, #2
 8006712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006724:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800672c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800673e:	d03e      	beq.n	80067be <HAL_TIM_ConfigClockSource+0xd4>
 8006740:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006744:	f200 8087 	bhi.w	8006856 <HAL_TIM_ConfigClockSource+0x16c>
 8006748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800674c:	f000 8086 	beq.w	800685c <HAL_TIM_ConfigClockSource+0x172>
 8006750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006754:	d87f      	bhi.n	8006856 <HAL_TIM_ConfigClockSource+0x16c>
 8006756:	2b70      	cmp	r3, #112	@ 0x70
 8006758:	d01a      	beq.n	8006790 <HAL_TIM_ConfigClockSource+0xa6>
 800675a:	2b70      	cmp	r3, #112	@ 0x70
 800675c:	d87b      	bhi.n	8006856 <HAL_TIM_ConfigClockSource+0x16c>
 800675e:	2b60      	cmp	r3, #96	@ 0x60
 8006760:	d050      	beq.n	8006804 <HAL_TIM_ConfigClockSource+0x11a>
 8006762:	2b60      	cmp	r3, #96	@ 0x60
 8006764:	d877      	bhi.n	8006856 <HAL_TIM_ConfigClockSource+0x16c>
 8006766:	2b50      	cmp	r3, #80	@ 0x50
 8006768:	d03c      	beq.n	80067e4 <HAL_TIM_ConfigClockSource+0xfa>
 800676a:	2b50      	cmp	r3, #80	@ 0x50
 800676c:	d873      	bhi.n	8006856 <HAL_TIM_ConfigClockSource+0x16c>
 800676e:	2b40      	cmp	r3, #64	@ 0x40
 8006770:	d058      	beq.n	8006824 <HAL_TIM_ConfigClockSource+0x13a>
 8006772:	2b40      	cmp	r3, #64	@ 0x40
 8006774:	d86f      	bhi.n	8006856 <HAL_TIM_ConfigClockSource+0x16c>
 8006776:	2b30      	cmp	r3, #48	@ 0x30
 8006778:	d064      	beq.n	8006844 <HAL_TIM_ConfigClockSource+0x15a>
 800677a:	2b30      	cmp	r3, #48	@ 0x30
 800677c:	d86b      	bhi.n	8006856 <HAL_TIM_ConfigClockSource+0x16c>
 800677e:	2b20      	cmp	r3, #32
 8006780:	d060      	beq.n	8006844 <HAL_TIM_ConfigClockSource+0x15a>
 8006782:	2b20      	cmp	r3, #32
 8006784:	d867      	bhi.n	8006856 <HAL_TIM_ConfigClockSource+0x16c>
 8006786:	2b00      	cmp	r3, #0
 8006788:	d05c      	beq.n	8006844 <HAL_TIM_ConfigClockSource+0x15a>
 800678a:	2b10      	cmp	r3, #16
 800678c:	d05a      	beq.n	8006844 <HAL_TIM_ConfigClockSource+0x15a>
 800678e:	e062      	b.n	8006856 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067a0:	f000 f990 	bl	8006ac4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80067b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	609a      	str	r2, [r3, #8]
      break;
 80067bc:	e04f      	b.n	800685e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067ce:	f000 f979 	bl	8006ac4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067e0:	609a      	str	r2, [r3, #8]
      break;
 80067e2:	e03c      	b.n	800685e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f0:	461a      	mov	r2, r3
 80067f2:	f000 f8ed 	bl	80069d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2150      	movs	r1, #80	@ 0x50
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 f946 	bl	8006a8e <TIM_ITRx_SetConfig>
      break;
 8006802:	e02c      	b.n	800685e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006810:	461a      	mov	r2, r3
 8006812:	f000 f90c 	bl	8006a2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2160      	movs	r1, #96	@ 0x60
 800681c:	4618      	mov	r0, r3
 800681e:	f000 f936 	bl	8006a8e <TIM_ITRx_SetConfig>
      break;
 8006822:	e01c      	b.n	800685e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006830:	461a      	mov	r2, r3
 8006832:	f000 f8cd 	bl	80069d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2140      	movs	r1, #64	@ 0x40
 800683c:	4618      	mov	r0, r3
 800683e:	f000 f926 	bl	8006a8e <TIM_ITRx_SetConfig>
      break;
 8006842:	e00c      	b.n	800685e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4619      	mov	r1, r3
 800684e:	4610      	mov	r0, r2
 8006850:	f000 f91d 	bl	8006a8e <TIM_ITRx_SetConfig>
      break;
 8006854:	e003      	b.n	800685e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	73fb      	strb	r3, [r7, #15]
      break;
 800685a:	e000      	b.n	800685e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800685c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800686e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a46      	ldr	r2, [pc, #280]	@ (80069a4 <TIM_Base_SetConfig+0x12c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d013      	beq.n	80068b8 <TIM_Base_SetConfig+0x40>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006896:	d00f      	beq.n	80068b8 <TIM_Base_SetConfig+0x40>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a43      	ldr	r2, [pc, #268]	@ (80069a8 <TIM_Base_SetConfig+0x130>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00b      	beq.n	80068b8 <TIM_Base_SetConfig+0x40>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a42      	ldr	r2, [pc, #264]	@ (80069ac <TIM_Base_SetConfig+0x134>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d007      	beq.n	80068b8 <TIM_Base_SetConfig+0x40>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a41      	ldr	r2, [pc, #260]	@ (80069b0 <TIM_Base_SetConfig+0x138>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <TIM_Base_SetConfig+0x40>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a40      	ldr	r2, [pc, #256]	@ (80069b4 <TIM_Base_SetConfig+0x13c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d108      	bne.n	80068ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a35      	ldr	r2, [pc, #212]	@ (80069a4 <TIM_Base_SetConfig+0x12c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d02b      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d8:	d027      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a32      	ldr	r2, [pc, #200]	@ (80069a8 <TIM_Base_SetConfig+0x130>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d023      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a31      	ldr	r2, [pc, #196]	@ (80069ac <TIM_Base_SetConfig+0x134>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d01f      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a30      	ldr	r2, [pc, #192]	@ (80069b0 <TIM_Base_SetConfig+0x138>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d01b      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a2f      	ldr	r2, [pc, #188]	@ (80069b4 <TIM_Base_SetConfig+0x13c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d017      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a2e      	ldr	r2, [pc, #184]	@ (80069b8 <TIM_Base_SetConfig+0x140>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d013      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a2d      	ldr	r2, [pc, #180]	@ (80069bc <TIM_Base_SetConfig+0x144>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00f      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a2c      	ldr	r2, [pc, #176]	@ (80069c0 <TIM_Base_SetConfig+0x148>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00b      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a2b      	ldr	r2, [pc, #172]	@ (80069c4 <TIM_Base_SetConfig+0x14c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d007      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a2a      	ldr	r2, [pc, #168]	@ (80069c8 <TIM_Base_SetConfig+0x150>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d003      	beq.n	800692a <TIM_Base_SetConfig+0xb2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a29      	ldr	r2, [pc, #164]	@ (80069cc <TIM_Base_SetConfig+0x154>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d108      	bne.n	800693c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a10      	ldr	r2, [pc, #64]	@ (80069a4 <TIM_Base_SetConfig+0x12c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d003      	beq.n	8006970 <TIM_Base_SetConfig+0xf8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a12      	ldr	r2, [pc, #72]	@ (80069b4 <TIM_Base_SetConfig+0x13c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d103      	bne.n	8006978 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	691a      	ldr	r2, [r3, #16]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b01      	cmp	r3, #1
 8006988:	d105      	bne.n	8006996 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f023 0201 	bic.w	r2, r3, #1
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	611a      	str	r2, [r3, #16]
  }
}
 8006996:	bf00      	nop
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	40010000 	.word	0x40010000
 80069a8:	40000400 	.word	0x40000400
 80069ac:	40000800 	.word	0x40000800
 80069b0:	40000c00 	.word	0x40000c00
 80069b4:	40010400 	.word	0x40010400
 80069b8:	40014000 	.word	0x40014000
 80069bc:	40014400 	.word	0x40014400
 80069c0:	40014800 	.word	0x40014800
 80069c4:	40001800 	.word	0x40001800
 80069c8:	40001c00 	.word	0x40001c00
 80069cc:	40002000 	.word	0x40002000

080069d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	f023 0201 	bic.w	r2, r3, #1
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f023 030a 	bic.w	r3, r3, #10
 8006a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	621a      	str	r2, [r3, #32]
}
 8006a22:	bf00      	nop
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b087      	sub	sp, #28
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	f023 0210 	bic.w	r2, r3, #16
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	031b      	lsls	r3, r3, #12
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	011b      	lsls	r3, r3, #4
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	621a      	str	r2, [r3, #32]
}
 8006a82:	bf00      	nop
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b085      	sub	sp, #20
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f043 0307 	orr.w	r3, r3, #7
 8006ab0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	609a      	str	r2, [r3, #8]
}
 8006ab8:	bf00      	nop
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	021a      	lsls	r2, r3, #8
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	609a      	str	r2, [r3, #8]
}
 8006af8:	bf00      	nop
 8006afa:	371c      	adds	r7, #28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d101      	bne.n	8006b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e05a      	b.n	8006bd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a21      	ldr	r2, [pc, #132]	@ (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d022      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b68:	d01d      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d018      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a1b      	ldr	r2, [pc, #108]	@ (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d013      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a1a      	ldr	r2, [pc, #104]	@ (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00e      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a18      	ldr	r2, [pc, #96]	@ (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d009      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a17      	ldr	r2, [pc, #92]	@ (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d004      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a15      	ldr	r2, [pc, #84]	@ (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d10c      	bne.n	8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	40010000 	.word	0x40010000
 8006be4:	40000400 	.word	0x40000400
 8006be8:	40000800 	.word	0x40000800
 8006bec:	40000c00 	.word	0x40000c00
 8006bf0:	40010400 	.word	0x40010400
 8006bf4:	40014000 	.word	0x40014000
 8006bf8:	40001800 	.word	0x40001800

08006bfc <siprintf>:
 8006bfc:	b40e      	push	{r1, r2, r3}
 8006bfe:	b510      	push	{r4, lr}
 8006c00:	b09d      	sub	sp, #116	@ 0x74
 8006c02:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006c04:	9002      	str	r0, [sp, #8]
 8006c06:	9006      	str	r0, [sp, #24]
 8006c08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c0c:	480a      	ldr	r0, [pc, #40]	@ (8006c38 <siprintf+0x3c>)
 8006c0e:	9107      	str	r1, [sp, #28]
 8006c10:	9104      	str	r1, [sp, #16]
 8006c12:	490a      	ldr	r1, [pc, #40]	@ (8006c3c <siprintf+0x40>)
 8006c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c18:	9105      	str	r1, [sp, #20]
 8006c1a:	2400      	movs	r4, #0
 8006c1c:	a902      	add	r1, sp, #8
 8006c1e:	6800      	ldr	r0, [r0, #0]
 8006c20:	9301      	str	r3, [sp, #4]
 8006c22:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006c24:	f000 f89c 	bl	8006d60 <_svfiprintf_r>
 8006c28:	9b02      	ldr	r3, [sp, #8]
 8006c2a:	701c      	strb	r4, [r3, #0]
 8006c2c:	b01d      	add	sp, #116	@ 0x74
 8006c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c32:	b003      	add	sp, #12
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	2000001c 	.word	0x2000001c
 8006c3c:	ffff0208 	.word	0xffff0208

08006c40 <memset>:
 8006c40:	4402      	add	r2, r0
 8006c42:	4603      	mov	r3, r0
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d100      	bne.n	8006c4a <memset+0xa>
 8006c48:	4770      	bx	lr
 8006c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c4e:	e7f9      	b.n	8006c44 <memset+0x4>

08006c50 <__errno>:
 8006c50:	4b01      	ldr	r3, [pc, #4]	@ (8006c58 <__errno+0x8>)
 8006c52:	6818      	ldr	r0, [r3, #0]
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	2000001c 	.word	0x2000001c

08006c5c <__libc_init_array>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	4d0d      	ldr	r5, [pc, #52]	@ (8006c94 <__libc_init_array+0x38>)
 8006c60:	4c0d      	ldr	r4, [pc, #52]	@ (8006c98 <__libc_init_array+0x3c>)
 8006c62:	1b64      	subs	r4, r4, r5
 8006c64:	10a4      	asrs	r4, r4, #2
 8006c66:	2600      	movs	r6, #0
 8006c68:	42a6      	cmp	r6, r4
 8006c6a:	d109      	bne.n	8006c80 <__libc_init_array+0x24>
 8006c6c:	4d0b      	ldr	r5, [pc, #44]	@ (8006c9c <__libc_init_array+0x40>)
 8006c6e:	4c0c      	ldr	r4, [pc, #48]	@ (8006ca0 <__libc_init_array+0x44>)
 8006c70:	f000 fc64 	bl	800753c <_init>
 8006c74:	1b64      	subs	r4, r4, r5
 8006c76:	10a4      	asrs	r4, r4, #2
 8006c78:	2600      	movs	r6, #0
 8006c7a:	42a6      	cmp	r6, r4
 8006c7c:	d105      	bne.n	8006c8a <__libc_init_array+0x2e>
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
 8006c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c84:	4798      	blx	r3
 8006c86:	3601      	adds	r6, #1
 8006c88:	e7ee      	b.n	8006c68 <__libc_init_array+0xc>
 8006c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c8e:	4798      	blx	r3
 8006c90:	3601      	adds	r6, #1
 8006c92:	e7f2      	b.n	8006c7a <__libc_init_array+0x1e>
 8006c94:	0800877c 	.word	0x0800877c
 8006c98:	0800877c 	.word	0x0800877c
 8006c9c:	0800877c 	.word	0x0800877c
 8006ca0:	08008780 	.word	0x08008780

08006ca4 <__retarget_lock_acquire_recursive>:
 8006ca4:	4770      	bx	lr

08006ca6 <__retarget_lock_release_recursive>:
 8006ca6:	4770      	bx	lr

08006ca8 <__ssputs_r>:
 8006ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cac:	688e      	ldr	r6, [r1, #8]
 8006cae:	461f      	mov	r7, r3
 8006cb0:	42be      	cmp	r6, r7
 8006cb2:	680b      	ldr	r3, [r1, #0]
 8006cb4:	4682      	mov	sl, r0
 8006cb6:	460c      	mov	r4, r1
 8006cb8:	4690      	mov	r8, r2
 8006cba:	d82d      	bhi.n	8006d18 <__ssputs_r+0x70>
 8006cbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cc0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006cc4:	d026      	beq.n	8006d14 <__ssputs_r+0x6c>
 8006cc6:	6965      	ldr	r5, [r4, #20]
 8006cc8:	6909      	ldr	r1, [r1, #16]
 8006cca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cce:	eba3 0901 	sub.w	r9, r3, r1
 8006cd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cd6:	1c7b      	adds	r3, r7, #1
 8006cd8:	444b      	add	r3, r9
 8006cda:	106d      	asrs	r5, r5, #1
 8006cdc:	429d      	cmp	r5, r3
 8006cde:	bf38      	it	cc
 8006ce0:	461d      	movcc	r5, r3
 8006ce2:	0553      	lsls	r3, r2, #21
 8006ce4:	d527      	bpl.n	8006d36 <__ssputs_r+0x8e>
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	f000 f958 	bl	8006f9c <_malloc_r>
 8006cec:	4606      	mov	r6, r0
 8006cee:	b360      	cbz	r0, 8006d4a <__ssputs_r+0xa2>
 8006cf0:	6921      	ldr	r1, [r4, #16]
 8006cf2:	464a      	mov	r2, r9
 8006cf4:	f000 fbc2 	bl	800747c <memcpy>
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006cfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d02:	81a3      	strh	r3, [r4, #12]
 8006d04:	6126      	str	r6, [r4, #16]
 8006d06:	6165      	str	r5, [r4, #20]
 8006d08:	444e      	add	r6, r9
 8006d0a:	eba5 0509 	sub.w	r5, r5, r9
 8006d0e:	6026      	str	r6, [r4, #0]
 8006d10:	60a5      	str	r5, [r4, #8]
 8006d12:	463e      	mov	r6, r7
 8006d14:	42be      	cmp	r6, r7
 8006d16:	d900      	bls.n	8006d1a <__ssputs_r+0x72>
 8006d18:	463e      	mov	r6, r7
 8006d1a:	6820      	ldr	r0, [r4, #0]
 8006d1c:	4632      	mov	r2, r6
 8006d1e:	4641      	mov	r1, r8
 8006d20:	f000 fb82 	bl	8007428 <memmove>
 8006d24:	68a3      	ldr	r3, [r4, #8]
 8006d26:	1b9b      	subs	r3, r3, r6
 8006d28:	60a3      	str	r3, [r4, #8]
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	4433      	add	r3, r6
 8006d2e:	6023      	str	r3, [r4, #0]
 8006d30:	2000      	movs	r0, #0
 8006d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d36:	462a      	mov	r2, r5
 8006d38:	f000 fb48 	bl	80073cc <_realloc_r>
 8006d3c:	4606      	mov	r6, r0
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d1e0      	bne.n	8006d04 <__ssputs_r+0x5c>
 8006d42:	6921      	ldr	r1, [r4, #16]
 8006d44:	4650      	mov	r0, sl
 8006d46:	f000 fba7 	bl	8007498 <_free_r>
 8006d4a:	230c      	movs	r3, #12
 8006d4c:	f8ca 3000 	str.w	r3, [sl]
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d56:	81a3      	strh	r3, [r4, #12]
 8006d58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d5c:	e7e9      	b.n	8006d32 <__ssputs_r+0x8a>
	...

08006d60 <_svfiprintf_r>:
 8006d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d64:	4698      	mov	r8, r3
 8006d66:	898b      	ldrh	r3, [r1, #12]
 8006d68:	061b      	lsls	r3, r3, #24
 8006d6a:	b09d      	sub	sp, #116	@ 0x74
 8006d6c:	4607      	mov	r7, r0
 8006d6e:	460d      	mov	r5, r1
 8006d70:	4614      	mov	r4, r2
 8006d72:	d510      	bpl.n	8006d96 <_svfiprintf_r+0x36>
 8006d74:	690b      	ldr	r3, [r1, #16]
 8006d76:	b973      	cbnz	r3, 8006d96 <_svfiprintf_r+0x36>
 8006d78:	2140      	movs	r1, #64	@ 0x40
 8006d7a:	f000 f90f 	bl	8006f9c <_malloc_r>
 8006d7e:	6028      	str	r0, [r5, #0]
 8006d80:	6128      	str	r0, [r5, #16]
 8006d82:	b930      	cbnz	r0, 8006d92 <_svfiprintf_r+0x32>
 8006d84:	230c      	movs	r3, #12
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d8c:	b01d      	add	sp, #116	@ 0x74
 8006d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d92:	2340      	movs	r3, #64	@ 0x40
 8006d94:	616b      	str	r3, [r5, #20]
 8006d96:	2300      	movs	r3, #0
 8006d98:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d9a:	2320      	movs	r3, #32
 8006d9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006da0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006da4:	2330      	movs	r3, #48	@ 0x30
 8006da6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006f44 <_svfiprintf_r+0x1e4>
 8006daa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006dae:	f04f 0901 	mov.w	r9, #1
 8006db2:	4623      	mov	r3, r4
 8006db4:	469a      	mov	sl, r3
 8006db6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dba:	b10a      	cbz	r2, 8006dc0 <_svfiprintf_r+0x60>
 8006dbc:	2a25      	cmp	r2, #37	@ 0x25
 8006dbe:	d1f9      	bne.n	8006db4 <_svfiprintf_r+0x54>
 8006dc0:	ebba 0b04 	subs.w	fp, sl, r4
 8006dc4:	d00b      	beq.n	8006dde <_svfiprintf_r+0x7e>
 8006dc6:	465b      	mov	r3, fp
 8006dc8:	4622      	mov	r2, r4
 8006dca:	4629      	mov	r1, r5
 8006dcc:	4638      	mov	r0, r7
 8006dce:	f7ff ff6b 	bl	8006ca8 <__ssputs_r>
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	f000 80a7 	beq.w	8006f26 <_svfiprintf_r+0x1c6>
 8006dd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dda:	445a      	add	r2, fp
 8006ddc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dde:	f89a 3000 	ldrb.w	r3, [sl]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 809f 	beq.w	8006f26 <_svfiprintf_r+0x1c6>
 8006de8:	2300      	movs	r3, #0
 8006dea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006dee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006df2:	f10a 0a01 	add.w	sl, sl, #1
 8006df6:	9304      	str	r3, [sp, #16]
 8006df8:	9307      	str	r3, [sp, #28]
 8006dfa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006dfe:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e00:	4654      	mov	r4, sl
 8006e02:	2205      	movs	r2, #5
 8006e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e08:	484e      	ldr	r0, [pc, #312]	@ (8006f44 <_svfiprintf_r+0x1e4>)
 8006e0a:	f7f9 f9f1 	bl	80001f0 <memchr>
 8006e0e:	9a04      	ldr	r2, [sp, #16]
 8006e10:	b9d8      	cbnz	r0, 8006e4a <_svfiprintf_r+0xea>
 8006e12:	06d0      	lsls	r0, r2, #27
 8006e14:	bf44      	itt	mi
 8006e16:	2320      	movmi	r3, #32
 8006e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e1c:	0711      	lsls	r1, r2, #28
 8006e1e:	bf44      	itt	mi
 8006e20:	232b      	movmi	r3, #43	@ 0x2b
 8006e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e26:	f89a 3000 	ldrb.w	r3, [sl]
 8006e2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e2c:	d015      	beq.n	8006e5a <_svfiprintf_r+0xfa>
 8006e2e:	9a07      	ldr	r2, [sp, #28]
 8006e30:	4654      	mov	r4, sl
 8006e32:	2000      	movs	r0, #0
 8006e34:	f04f 0c0a 	mov.w	ip, #10
 8006e38:	4621      	mov	r1, r4
 8006e3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e3e:	3b30      	subs	r3, #48	@ 0x30
 8006e40:	2b09      	cmp	r3, #9
 8006e42:	d94b      	bls.n	8006edc <_svfiprintf_r+0x17c>
 8006e44:	b1b0      	cbz	r0, 8006e74 <_svfiprintf_r+0x114>
 8006e46:	9207      	str	r2, [sp, #28]
 8006e48:	e014      	b.n	8006e74 <_svfiprintf_r+0x114>
 8006e4a:	eba0 0308 	sub.w	r3, r0, r8
 8006e4e:	fa09 f303 	lsl.w	r3, r9, r3
 8006e52:	4313      	orrs	r3, r2
 8006e54:	9304      	str	r3, [sp, #16]
 8006e56:	46a2      	mov	sl, r4
 8006e58:	e7d2      	b.n	8006e00 <_svfiprintf_r+0xa0>
 8006e5a:	9b03      	ldr	r3, [sp, #12]
 8006e5c:	1d19      	adds	r1, r3, #4
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	9103      	str	r1, [sp, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	bfbb      	ittet	lt
 8006e66:	425b      	neglt	r3, r3
 8006e68:	f042 0202 	orrlt.w	r2, r2, #2
 8006e6c:	9307      	strge	r3, [sp, #28]
 8006e6e:	9307      	strlt	r3, [sp, #28]
 8006e70:	bfb8      	it	lt
 8006e72:	9204      	strlt	r2, [sp, #16]
 8006e74:	7823      	ldrb	r3, [r4, #0]
 8006e76:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e78:	d10a      	bne.n	8006e90 <_svfiprintf_r+0x130>
 8006e7a:	7863      	ldrb	r3, [r4, #1]
 8006e7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e7e:	d132      	bne.n	8006ee6 <_svfiprintf_r+0x186>
 8006e80:	9b03      	ldr	r3, [sp, #12]
 8006e82:	1d1a      	adds	r2, r3, #4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	9203      	str	r2, [sp, #12]
 8006e88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e8c:	3402      	adds	r4, #2
 8006e8e:	9305      	str	r3, [sp, #20]
 8006e90:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006f54 <_svfiprintf_r+0x1f4>
 8006e94:	7821      	ldrb	r1, [r4, #0]
 8006e96:	2203      	movs	r2, #3
 8006e98:	4650      	mov	r0, sl
 8006e9a:	f7f9 f9a9 	bl	80001f0 <memchr>
 8006e9e:	b138      	cbz	r0, 8006eb0 <_svfiprintf_r+0x150>
 8006ea0:	9b04      	ldr	r3, [sp, #16]
 8006ea2:	eba0 000a 	sub.w	r0, r0, sl
 8006ea6:	2240      	movs	r2, #64	@ 0x40
 8006ea8:	4082      	lsls	r2, r0
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	3401      	adds	r4, #1
 8006eae:	9304      	str	r3, [sp, #16]
 8006eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eb4:	4824      	ldr	r0, [pc, #144]	@ (8006f48 <_svfiprintf_r+0x1e8>)
 8006eb6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006eba:	2206      	movs	r2, #6
 8006ebc:	f7f9 f998 	bl	80001f0 <memchr>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d036      	beq.n	8006f32 <_svfiprintf_r+0x1d2>
 8006ec4:	4b21      	ldr	r3, [pc, #132]	@ (8006f4c <_svfiprintf_r+0x1ec>)
 8006ec6:	bb1b      	cbnz	r3, 8006f10 <_svfiprintf_r+0x1b0>
 8006ec8:	9b03      	ldr	r3, [sp, #12]
 8006eca:	3307      	adds	r3, #7
 8006ecc:	f023 0307 	bic.w	r3, r3, #7
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	9303      	str	r3, [sp, #12]
 8006ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed6:	4433      	add	r3, r6
 8006ed8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eda:	e76a      	b.n	8006db2 <_svfiprintf_r+0x52>
 8006edc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ee0:	460c      	mov	r4, r1
 8006ee2:	2001      	movs	r0, #1
 8006ee4:	e7a8      	b.n	8006e38 <_svfiprintf_r+0xd8>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	3401      	adds	r4, #1
 8006eea:	9305      	str	r3, [sp, #20]
 8006eec:	4619      	mov	r1, r3
 8006eee:	f04f 0c0a 	mov.w	ip, #10
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ef8:	3a30      	subs	r2, #48	@ 0x30
 8006efa:	2a09      	cmp	r2, #9
 8006efc:	d903      	bls.n	8006f06 <_svfiprintf_r+0x1a6>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d0c6      	beq.n	8006e90 <_svfiprintf_r+0x130>
 8006f02:	9105      	str	r1, [sp, #20]
 8006f04:	e7c4      	b.n	8006e90 <_svfiprintf_r+0x130>
 8006f06:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e7f0      	b.n	8006ef2 <_svfiprintf_r+0x192>
 8006f10:	ab03      	add	r3, sp, #12
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	462a      	mov	r2, r5
 8006f16:	4b0e      	ldr	r3, [pc, #56]	@ (8006f50 <_svfiprintf_r+0x1f0>)
 8006f18:	a904      	add	r1, sp, #16
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	f3af 8000 	nop.w
 8006f20:	1c42      	adds	r2, r0, #1
 8006f22:	4606      	mov	r6, r0
 8006f24:	d1d6      	bne.n	8006ed4 <_svfiprintf_r+0x174>
 8006f26:	89ab      	ldrh	r3, [r5, #12]
 8006f28:	065b      	lsls	r3, r3, #25
 8006f2a:	f53f af2d 	bmi.w	8006d88 <_svfiprintf_r+0x28>
 8006f2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f30:	e72c      	b.n	8006d8c <_svfiprintf_r+0x2c>
 8006f32:	ab03      	add	r3, sp, #12
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	462a      	mov	r2, r5
 8006f38:	4b05      	ldr	r3, [pc, #20]	@ (8006f50 <_svfiprintf_r+0x1f0>)
 8006f3a:	a904      	add	r1, sp, #16
 8006f3c:	4638      	mov	r0, r7
 8006f3e:	f000 f91b 	bl	8007178 <_printf_i>
 8006f42:	e7ed      	b.n	8006f20 <_svfiprintf_r+0x1c0>
 8006f44:	08008740 	.word	0x08008740
 8006f48:	0800874a 	.word	0x0800874a
 8006f4c:	00000000 	.word	0x00000000
 8006f50:	08006ca9 	.word	0x08006ca9
 8006f54:	08008746 	.word	0x08008746

08006f58 <sbrk_aligned>:
 8006f58:	b570      	push	{r4, r5, r6, lr}
 8006f5a:	4e0f      	ldr	r6, [pc, #60]	@ (8006f98 <sbrk_aligned+0x40>)
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	6831      	ldr	r1, [r6, #0]
 8006f60:	4605      	mov	r5, r0
 8006f62:	b911      	cbnz	r1, 8006f6a <sbrk_aligned+0x12>
 8006f64:	f000 fa7a 	bl	800745c <_sbrk_r>
 8006f68:	6030      	str	r0, [r6, #0]
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f000 fa75 	bl	800745c <_sbrk_r>
 8006f72:	1c43      	adds	r3, r0, #1
 8006f74:	d103      	bne.n	8006f7e <sbrk_aligned+0x26>
 8006f76:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	bd70      	pop	{r4, r5, r6, pc}
 8006f7e:	1cc4      	adds	r4, r0, #3
 8006f80:	f024 0403 	bic.w	r4, r4, #3
 8006f84:	42a0      	cmp	r0, r4
 8006f86:	d0f8      	beq.n	8006f7a <sbrk_aligned+0x22>
 8006f88:	1a21      	subs	r1, r4, r0
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	f000 fa66 	bl	800745c <_sbrk_r>
 8006f90:	3001      	adds	r0, #1
 8006f92:	d1f2      	bne.n	8006f7a <sbrk_aligned+0x22>
 8006f94:	e7ef      	b.n	8006f76 <sbrk_aligned+0x1e>
 8006f96:	bf00      	nop
 8006f98:	20025d60 	.word	0x20025d60

08006f9c <_malloc_r>:
 8006f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa0:	1ccd      	adds	r5, r1, #3
 8006fa2:	f025 0503 	bic.w	r5, r5, #3
 8006fa6:	3508      	adds	r5, #8
 8006fa8:	2d0c      	cmp	r5, #12
 8006faa:	bf38      	it	cc
 8006fac:	250c      	movcc	r5, #12
 8006fae:	2d00      	cmp	r5, #0
 8006fb0:	4606      	mov	r6, r0
 8006fb2:	db01      	blt.n	8006fb8 <_malloc_r+0x1c>
 8006fb4:	42a9      	cmp	r1, r5
 8006fb6:	d904      	bls.n	8006fc2 <_malloc_r+0x26>
 8006fb8:	230c      	movs	r3, #12
 8006fba:	6033      	str	r3, [r6, #0]
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007098 <_malloc_r+0xfc>
 8006fc6:	f000 f9f5 	bl	80073b4 <__malloc_lock>
 8006fca:	f8d8 3000 	ldr.w	r3, [r8]
 8006fce:	461c      	mov	r4, r3
 8006fd0:	bb44      	cbnz	r4, 8007024 <_malloc_r+0x88>
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f7ff ffbf 	bl	8006f58 <sbrk_aligned>
 8006fda:	1c43      	adds	r3, r0, #1
 8006fdc:	4604      	mov	r4, r0
 8006fde:	d158      	bne.n	8007092 <_malloc_r+0xf6>
 8006fe0:	f8d8 4000 	ldr.w	r4, [r8]
 8006fe4:	4627      	mov	r7, r4
 8006fe6:	2f00      	cmp	r7, #0
 8006fe8:	d143      	bne.n	8007072 <_malloc_r+0xd6>
 8006fea:	2c00      	cmp	r4, #0
 8006fec:	d04b      	beq.n	8007086 <_malloc_r+0xea>
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	4639      	mov	r1, r7
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	eb04 0903 	add.w	r9, r4, r3
 8006ff8:	f000 fa30 	bl	800745c <_sbrk_r>
 8006ffc:	4581      	cmp	r9, r0
 8006ffe:	d142      	bne.n	8007086 <_malloc_r+0xea>
 8007000:	6821      	ldr	r1, [r4, #0]
 8007002:	1a6d      	subs	r5, r5, r1
 8007004:	4629      	mov	r1, r5
 8007006:	4630      	mov	r0, r6
 8007008:	f7ff ffa6 	bl	8006f58 <sbrk_aligned>
 800700c:	3001      	adds	r0, #1
 800700e:	d03a      	beq.n	8007086 <_malloc_r+0xea>
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	442b      	add	r3, r5
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	f8d8 3000 	ldr.w	r3, [r8]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	bb62      	cbnz	r2, 8007078 <_malloc_r+0xdc>
 800701e:	f8c8 7000 	str.w	r7, [r8]
 8007022:	e00f      	b.n	8007044 <_malloc_r+0xa8>
 8007024:	6822      	ldr	r2, [r4, #0]
 8007026:	1b52      	subs	r2, r2, r5
 8007028:	d420      	bmi.n	800706c <_malloc_r+0xd0>
 800702a:	2a0b      	cmp	r2, #11
 800702c:	d917      	bls.n	800705e <_malloc_r+0xc2>
 800702e:	1961      	adds	r1, r4, r5
 8007030:	42a3      	cmp	r3, r4
 8007032:	6025      	str	r5, [r4, #0]
 8007034:	bf18      	it	ne
 8007036:	6059      	strne	r1, [r3, #4]
 8007038:	6863      	ldr	r3, [r4, #4]
 800703a:	bf08      	it	eq
 800703c:	f8c8 1000 	streq.w	r1, [r8]
 8007040:	5162      	str	r2, [r4, r5]
 8007042:	604b      	str	r3, [r1, #4]
 8007044:	4630      	mov	r0, r6
 8007046:	f000 f9bb 	bl	80073c0 <__malloc_unlock>
 800704a:	f104 000b 	add.w	r0, r4, #11
 800704e:	1d23      	adds	r3, r4, #4
 8007050:	f020 0007 	bic.w	r0, r0, #7
 8007054:	1ac2      	subs	r2, r0, r3
 8007056:	bf1c      	itt	ne
 8007058:	1a1b      	subne	r3, r3, r0
 800705a:	50a3      	strne	r3, [r4, r2]
 800705c:	e7af      	b.n	8006fbe <_malloc_r+0x22>
 800705e:	6862      	ldr	r2, [r4, #4]
 8007060:	42a3      	cmp	r3, r4
 8007062:	bf0c      	ite	eq
 8007064:	f8c8 2000 	streq.w	r2, [r8]
 8007068:	605a      	strne	r2, [r3, #4]
 800706a:	e7eb      	b.n	8007044 <_malloc_r+0xa8>
 800706c:	4623      	mov	r3, r4
 800706e:	6864      	ldr	r4, [r4, #4]
 8007070:	e7ae      	b.n	8006fd0 <_malloc_r+0x34>
 8007072:	463c      	mov	r4, r7
 8007074:	687f      	ldr	r7, [r7, #4]
 8007076:	e7b6      	b.n	8006fe6 <_malloc_r+0x4a>
 8007078:	461a      	mov	r2, r3
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	42a3      	cmp	r3, r4
 800707e:	d1fb      	bne.n	8007078 <_malloc_r+0xdc>
 8007080:	2300      	movs	r3, #0
 8007082:	6053      	str	r3, [r2, #4]
 8007084:	e7de      	b.n	8007044 <_malloc_r+0xa8>
 8007086:	230c      	movs	r3, #12
 8007088:	6033      	str	r3, [r6, #0]
 800708a:	4630      	mov	r0, r6
 800708c:	f000 f998 	bl	80073c0 <__malloc_unlock>
 8007090:	e794      	b.n	8006fbc <_malloc_r+0x20>
 8007092:	6005      	str	r5, [r0, #0]
 8007094:	e7d6      	b.n	8007044 <_malloc_r+0xa8>
 8007096:	bf00      	nop
 8007098:	20025d64 	.word	0x20025d64

0800709c <_printf_common>:
 800709c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a0:	4616      	mov	r6, r2
 80070a2:	4698      	mov	r8, r3
 80070a4:	688a      	ldr	r2, [r1, #8]
 80070a6:	690b      	ldr	r3, [r1, #16]
 80070a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070ac:	4293      	cmp	r3, r2
 80070ae:	bfb8      	it	lt
 80070b0:	4613      	movlt	r3, r2
 80070b2:	6033      	str	r3, [r6, #0]
 80070b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80070b8:	4607      	mov	r7, r0
 80070ba:	460c      	mov	r4, r1
 80070bc:	b10a      	cbz	r2, 80070c2 <_printf_common+0x26>
 80070be:	3301      	adds	r3, #1
 80070c0:	6033      	str	r3, [r6, #0]
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	0699      	lsls	r1, r3, #26
 80070c6:	bf42      	ittt	mi
 80070c8:	6833      	ldrmi	r3, [r6, #0]
 80070ca:	3302      	addmi	r3, #2
 80070cc:	6033      	strmi	r3, [r6, #0]
 80070ce:	6825      	ldr	r5, [r4, #0]
 80070d0:	f015 0506 	ands.w	r5, r5, #6
 80070d4:	d106      	bne.n	80070e4 <_printf_common+0x48>
 80070d6:	f104 0a19 	add.w	sl, r4, #25
 80070da:	68e3      	ldr	r3, [r4, #12]
 80070dc:	6832      	ldr	r2, [r6, #0]
 80070de:	1a9b      	subs	r3, r3, r2
 80070e0:	42ab      	cmp	r3, r5
 80070e2:	dc26      	bgt.n	8007132 <_printf_common+0x96>
 80070e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070e8:	6822      	ldr	r2, [r4, #0]
 80070ea:	3b00      	subs	r3, #0
 80070ec:	bf18      	it	ne
 80070ee:	2301      	movne	r3, #1
 80070f0:	0692      	lsls	r2, r2, #26
 80070f2:	d42b      	bmi.n	800714c <_printf_common+0xb0>
 80070f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070f8:	4641      	mov	r1, r8
 80070fa:	4638      	mov	r0, r7
 80070fc:	47c8      	blx	r9
 80070fe:	3001      	adds	r0, #1
 8007100:	d01e      	beq.n	8007140 <_printf_common+0xa4>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	6922      	ldr	r2, [r4, #16]
 8007106:	f003 0306 	and.w	r3, r3, #6
 800710a:	2b04      	cmp	r3, #4
 800710c:	bf02      	ittt	eq
 800710e:	68e5      	ldreq	r5, [r4, #12]
 8007110:	6833      	ldreq	r3, [r6, #0]
 8007112:	1aed      	subeq	r5, r5, r3
 8007114:	68a3      	ldr	r3, [r4, #8]
 8007116:	bf0c      	ite	eq
 8007118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800711c:	2500      	movne	r5, #0
 800711e:	4293      	cmp	r3, r2
 8007120:	bfc4      	itt	gt
 8007122:	1a9b      	subgt	r3, r3, r2
 8007124:	18ed      	addgt	r5, r5, r3
 8007126:	2600      	movs	r6, #0
 8007128:	341a      	adds	r4, #26
 800712a:	42b5      	cmp	r5, r6
 800712c:	d11a      	bne.n	8007164 <_printf_common+0xc8>
 800712e:	2000      	movs	r0, #0
 8007130:	e008      	b.n	8007144 <_printf_common+0xa8>
 8007132:	2301      	movs	r3, #1
 8007134:	4652      	mov	r2, sl
 8007136:	4641      	mov	r1, r8
 8007138:	4638      	mov	r0, r7
 800713a:	47c8      	blx	r9
 800713c:	3001      	adds	r0, #1
 800713e:	d103      	bne.n	8007148 <_printf_common+0xac>
 8007140:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007148:	3501      	adds	r5, #1
 800714a:	e7c6      	b.n	80070da <_printf_common+0x3e>
 800714c:	18e1      	adds	r1, r4, r3
 800714e:	1c5a      	adds	r2, r3, #1
 8007150:	2030      	movs	r0, #48	@ 0x30
 8007152:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007156:	4422      	add	r2, r4
 8007158:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800715c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007160:	3302      	adds	r3, #2
 8007162:	e7c7      	b.n	80070f4 <_printf_common+0x58>
 8007164:	2301      	movs	r3, #1
 8007166:	4622      	mov	r2, r4
 8007168:	4641      	mov	r1, r8
 800716a:	4638      	mov	r0, r7
 800716c:	47c8      	blx	r9
 800716e:	3001      	adds	r0, #1
 8007170:	d0e6      	beq.n	8007140 <_printf_common+0xa4>
 8007172:	3601      	adds	r6, #1
 8007174:	e7d9      	b.n	800712a <_printf_common+0x8e>
	...

08007178 <_printf_i>:
 8007178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800717c:	7e0f      	ldrb	r7, [r1, #24]
 800717e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007180:	2f78      	cmp	r7, #120	@ 0x78
 8007182:	4691      	mov	r9, r2
 8007184:	4680      	mov	r8, r0
 8007186:	460c      	mov	r4, r1
 8007188:	469a      	mov	sl, r3
 800718a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800718e:	d807      	bhi.n	80071a0 <_printf_i+0x28>
 8007190:	2f62      	cmp	r7, #98	@ 0x62
 8007192:	d80a      	bhi.n	80071aa <_printf_i+0x32>
 8007194:	2f00      	cmp	r7, #0
 8007196:	f000 80d1 	beq.w	800733c <_printf_i+0x1c4>
 800719a:	2f58      	cmp	r7, #88	@ 0x58
 800719c:	f000 80b8 	beq.w	8007310 <_printf_i+0x198>
 80071a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80071a8:	e03a      	b.n	8007220 <_printf_i+0xa8>
 80071aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80071ae:	2b15      	cmp	r3, #21
 80071b0:	d8f6      	bhi.n	80071a0 <_printf_i+0x28>
 80071b2:	a101      	add	r1, pc, #4	@ (adr r1, 80071b8 <_printf_i+0x40>)
 80071b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071b8:	08007211 	.word	0x08007211
 80071bc:	08007225 	.word	0x08007225
 80071c0:	080071a1 	.word	0x080071a1
 80071c4:	080071a1 	.word	0x080071a1
 80071c8:	080071a1 	.word	0x080071a1
 80071cc:	080071a1 	.word	0x080071a1
 80071d0:	08007225 	.word	0x08007225
 80071d4:	080071a1 	.word	0x080071a1
 80071d8:	080071a1 	.word	0x080071a1
 80071dc:	080071a1 	.word	0x080071a1
 80071e0:	080071a1 	.word	0x080071a1
 80071e4:	08007323 	.word	0x08007323
 80071e8:	0800724f 	.word	0x0800724f
 80071ec:	080072dd 	.word	0x080072dd
 80071f0:	080071a1 	.word	0x080071a1
 80071f4:	080071a1 	.word	0x080071a1
 80071f8:	08007345 	.word	0x08007345
 80071fc:	080071a1 	.word	0x080071a1
 8007200:	0800724f 	.word	0x0800724f
 8007204:	080071a1 	.word	0x080071a1
 8007208:	080071a1 	.word	0x080071a1
 800720c:	080072e5 	.word	0x080072e5
 8007210:	6833      	ldr	r3, [r6, #0]
 8007212:	1d1a      	adds	r2, r3, #4
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6032      	str	r2, [r6, #0]
 8007218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800721c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007220:	2301      	movs	r3, #1
 8007222:	e09c      	b.n	800735e <_printf_i+0x1e6>
 8007224:	6833      	ldr	r3, [r6, #0]
 8007226:	6820      	ldr	r0, [r4, #0]
 8007228:	1d19      	adds	r1, r3, #4
 800722a:	6031      	str	r1, [r6, #0]
 800722c:	0606      	lsls	r6, r0, #24
 800722e:	d501      	bpl.n	8007234 <_printf_i+0xbc>
 8007230:	681d      	ldr	r5, [r3, #0]
 8007232:	e003      	b.n	800723c <_printf_i+0xc4>
 8007234:	0645      	lsls	r5, r0, #25
 8007236:	d5fb      	bpl.n	8007230 <_printf_i+0xb8>
 8007238:	f9b3 5000 	ldrsh.w	r5, [r3]
 800723c:	2d00      	cmp	r5, #0
 800723e:	da03      	bge.n	8007248 <_printf_i+0xd0>
 8007240:	232d      	movs	r3, #45	@ 0x2d
 8007242:	426d      	negs	r5, r5
 8007244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007248:	4858      	ldr	r0, [pc, #352]	@ (80073ac <_printf_i+0x234>)
 800724a:	230a      	movs	r3, #10
 800724c:	e011      	b.n	8007272 <_printf_i+0xfa>
 800724e:	6821      	ldr	r1, [r4, #0]
 8007250:	6833      	ldr	r3, [r6, #0]
 8007252:	0608      	lsls	r0, r1, #24
 8007254:	f853 5b04 	ldr.w	r5, [r3], #4
 8007258:	d402      	bmi.n	8007260 <_printf_i+0xe8>
 800725a:	0649      	lsls	r1, r1, #25
 800725c:	bf48      	it	mi
 800725e:	b2ad      	uxthmi	r5, r5
 8007260:	2f6f      	cmp	r7, #111	@ 0x6f
 8007262:	4852      	ldr	r0, [pc, #328]	@ (80073ac <_printf_i+0x234>)
 8007264:	6033      	str	r3, [r6, #0]
 8007266:	bf14      	ite	ne
 8007268:	230a      	movne	r3, #10
 800726a:	2308      	moveq	r3, #8
 800726c:	2100      	movs	r1, #0
 800726e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007272:	6866      	ldr	r6, [r4, #4]
 8007274:	60a6      	str	r6, [r4, #8]
 8007276:	2e00      	cmp	r6, #0
 8007278:	db05      	blt.n	8007286 <_printf_i+0x10e>
 800727a:	6821      	ldr	r1, [r4, #0]
 800727c:	432e      	orrs	r6, r5
 800727e:	f021 0104 	bic.w	r1, r1, #4
 8007282:	6021      	str	r1, [r4, #0]
 8007284:	d04b      	beq.n	800731e <_printf_i+0x1a6>
 8007286:	4616      	mov	r6, r2
 8007288:	fbb5 f1f3 	udiv	r1, r5, r3
 800728c:	fb03 5711 	mls	r7, r3, r1, r5
 8007290:	5dc7      	ldrb	r7, [r0, r7]
 8007292:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007296:	462f      	mov	r7, r5
 8007298:	42bb      	cmp	r3, r7
 800729a:	460d      	mov	r5, r1
 800729c:	d9f4      	bls.n	8007288 <_printf_i+0x110>
 800729e:	2b08      	cmp	r3, #8
 80072a0:	d10b      	bne.n	80072ba <_printf_i+0x142>
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	07df      	lsls	r7, r3, #31
 80072a6:	d508      	bpl.n	80072ba <_printf_i+0x142>
 80072a8:	6923      	ldr	r3, [r4, #16]
 80072aa:	6861      	ldr	r1, [r4, #4]
 80072ac:	4299      	cmp	r1, r3
 80072ae:	bfde      	ittt	le
 80072b0:	2330      	movle	r3, #48	@ 0x30
 80072b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072b6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80072ba:	1b92      	subs	r2, r2, r6
 80072bc:	6122      	str	r2, [r4, #16]
 80072be:	f8cd a000 	str.w	sl, [sp]
 80072c2:	464b      	mov	r3, r9
 80072c4:	aa03      	add	r2, sp, #12
 80072c6:	4621      	mov	r1, r4
 80072c8:	4640      	mov	r0, r8
 80072ca:	f7ff fee7 	bl	800709c <_printf_common>
 80072ce:	3001      	adds	r0, #1
 80072d0:	d14a      	bne.n	8007368 <_printf_i+0x1f0>
 80072d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072d6:	b004      	add	sp, #16
 80072d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	f043 0320 	orr.w	r3, r3, #32
 80072e2:	6023      	str	r3, [r4, #0]
 80072e4:	4832      	ldr	r0, [pc, #200]	@ (80073b0 <_printf_i+0x238>)
 80072e6:	2778      	movs	r7, #120	@ 0x78
 80072e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	6831      	ldr	r1, [r6, #0]
 80072f0:	061f      	lsls	r7, r3, #24
 80072f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80072f6:	d402      	bmi.n	80072fe <_printf_i+0x186>
 80072f8:	065f      	lsls	r7, r3, #25
 80072fa:	bf48      	it	mi
 80072fc:	b2ad      	uxthmi	r5, r5
 80072fe:	6031      	str	r1, [r6, #0]
 8007300:	07d9      	lsls	r1, r3, #31
 8007302:	bf44      	itt	mi
 8007304:	f043 0320 	orrmi.w	r3, r3, #32
 8007308:	6023      	strmi	r3, [r4, #0]
 800730a:	b11d      	cbz	r5, 8007314 <_printf_i+0x19c>
 800730c:	2310      	movs	r3, #16
 800730e:	e7ad      	b.n	800726c <_printf_i+0xf4>
 8007310:	4826      	ldr	r0, [pc, #152]	@ (80073ac <_printf_i+0x234>)
 8007312:	e7e9      	b.n	80072e8 <_printf_i+0x170>
 8007314:	6823      	ldr	r3, [r4, #0]
 8007316:	f023 0320 	bic.w	r3, r3, #32
 800731a:	6023      	str	r3, [r4, #0]
 800731c:	e7f6      	b.n	800730c <_printf_i+0x194>
 800731e:	4616      	mov	r6, r2
 8007320:	e7bd      	b.n	800729e <_printf_i+0x126>
 8007322:	6833      	ldr	r3, [r6, #0]
 8007324:	6825      	ldr	r5, [r4, #0]
 8007326:	6961      	ldr	r1, [r4, #20]
 8007328:	1d18      	adds	r0, r3, #4
 800732a:	6030      	str	r0, [r6, #0]
 800732c:	062e      	lsls	r6, r5, #24
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	d501      	bpl.n	8007336 <_printf_i+0x1be>
 8007332:	6019      	str	r1, [r3, #0]
 8007334:	e002      	b.n	800733c <_printf_i+0x1c4>
 8007336:	0668      	lsls	r0, r5, #25
 8007338:	d5fb      	bpl.n	8007332 <_printf_i+0x1ba>
 800733a:	8019      	strh	r1, [r3, #0]
 800733c:	2300      	movs	r3, #0
 800733e:	6123      	str	r3, [r4, #16]
 8007340:	4616      	mov	r6, r2
 8007342:	e7bc      	b.n	80072be <_printf_i+0x146>
 8007344:	6833      	ldr	r3, [r6, #0]
 8007346:	1d1a      	adds	r2, r3, #4
 8007348:	6032      	str	r2, [r6, #0]
 800734a:	681e      	ldr	r6, [r3, #0]
 800734c:	6862      	ldr	r2, [r4, #4]
 800734e:	2100      	movs	r1, #0
 8007350:	4630      	mov	r0, r6
 8007352:	f7f8 ff4d 	bl	80001f0 <memchr>
 8007356:	b108      	cbz	r0, 800735c <_printf_i+0x1e4>
 8007358:	1b80      	subs	r0, r0, r6
 800735a:	6060      	str	r0, [r4, #4]
 800735c:	6863      	ldr	r3, [r4, #4]
 800735e:	6123      	str	r3, [r4, #16]
 8007360:	2300      	movs	r3, #0
 8007362:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007366:	e7aa      	b.n	80072be <_printf_i+0x146>
 8007368:	6923      	ldr	r3, [r4, #16]
 800736a:	4632      	mov	r2, r6
 800736c:	4649      	mov	r1, r9
 800736e:	4640      	mov	r0, r8
 8007370:	47d0      	blx	sl
 8007372:	3001      	adds	r0, #1
 8007374:	d0ad      	beq.n	80072d2 <_printf_i+0x15a>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	079b      	lsls	r3, r3, #30
 800737a:	d413      	bmi.n	80073a4 <_printf_i+0x22c>
 800737c:	68e0      	ldr	r0, [r4, #12]
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	4298      	cmp	r0, r3
 8007382:	bfb8      	it	lt
 8007384:	4618      	movlt	r0, r3
 8007386:	e7a6      	b.n	80072d6 <_printf_i+0x15e>
 8007388:	2301      	movs	r3, #1
 800738a:	4632      	mov	r2, r6
 800738c:	4649      	mov	r1, r9
 800738e:	4640      	mov	r0, r8
 8007390:	47d0      	blx	sl
 8007392:	3001      	adds	r0, #1
 8007394:	d09d      	beq.n	80072d2 <_printf_i+0x15a>
 8007396:	3501      	adds	r5, #1
 8007398:	68e3      	ldr	r3, [r4, #12]
 800739a:	9903      	ldr	r1, [sp, #12]
 800739c:	1a5b      	subs	r3, r3, r1
 800739e:	42ab      	cmp	r3, r5
 80073a0:	dcf2      	bgt.n	8007388 <_printf_i+0x210>
 80073a2:	e7eb      	b.n	800737c <_printf_i+0x204>
 80073a4:	2500      	movs	r5, #0
 80073a6:	f104 0619 	add.w	r6, r4, #25
 80073aa:	e7f5      	b.n	8007398 <_printf_i+0x220>
 80073ac:	08008751 	.word	0x08008751
 80073b0:	08008762 	.word	0x08008762

080073b4 <__malloc_lock>:
 80073b4:	4801      	ldr	r0, [pc, #4]	@ (80073bc <__malloc_lock+0x8>)
 80073b6:	f7ff bc75 	b.w	8006ca4 <__retarget_lock_acquire_recursive>
 80073ba:	bf00      	nop
 80073bc:	20025d5c 	.word	0x20025d5c

080073c0 <__malloc_unlock>:
 80073c0:	4801      	ldr	r0, [pc, #4]	@ (80073c8 <__malloc_unlock+0x8>)
 80073c2:	f7ff bc70 	b.w	8006ca6 <__retarget_lock_release_recursive>
 80073c6:	bf00      	nop
 80073c8:	20025d5c 	.word	0x20025d5c

080073cc <_realloc_r>:
 80073cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d0:	4607      	mov	r7, r0
 80073d2:	4614      	mov	r4, r2
 80073d4:	460d      	mov	r5, r1
 80073d6:	b921      	cbnz	r1, 80073e2 <_realloc_r+0x16>
 80073d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073dc:	4611      	mov	r1, r2
 80073de:	f7ff bddd 	b.w	8006f9c <_malloc_r>
 80073e2:	b92a      	cbnz	r2, 80073f0 <_realloc_r+0x24>
 80073e4:	f000 f858 	bl	8007498 <_free_r>
 80073e8:	4625      	mov	r5, r4
 80073ea:	4628      	mov	r0, r5
 80073ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073f0:	f000 f89c 	bl	800752c <_malloc_usable_size_r>
 80073f4:	4284      	cmp	r4, r0
 80073f6:	4606      	mov	r6, r0
 80073f8:	d802      	bhi.n	8007400 <_realloc_r+0x34>
 80073fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073fe:	d8f4      	bhi.n	80073ea <_realloc_r+0x1e>
 8007400:	4621      	mov	r1, r4
 8007402:	4638      	mov	r0, r7
 8007404:	f7ff fdca 	bl	8006f9c <_malloc_r>
 8007408:	4680      	mov	r8, r0
 800740a:	b908      	cbnz	r0, 8007410 <_realloc_r+0x44>
 800740c:	4645      	mov	r5, r8
 800740e:	e7ec      	b.n	80073ea <_realloc_r+0x1e>
 8007410:	42b4      	cmp	r4, r6
 8007412:	4622      	mov	r2, r4
 8007414:	4629      	mov	r1, r5
 8007416:	bf28      	it	cs
 8007418:	4632      	movcs	r2, r6
 800741a:	f000 f82f 	bl	800747c <memcpy>
 800741e:	4629      	mov	r1, r5
 8007420:	4638      	mov	r0, r7
 8007422:	f000 f839 	bl	8007498 <_free_r>
 8007426:	e7f1      	b.n	800740c <_realloc_r+0x40>

08007428 <memmove>:
 8007428:	4288      	cmp	r0, r1
 800742a:	b510      	push	{r4, lr}
 800742c:	eb01 0402 	add.w	r4, r1, r2
 8007430:	d902      	bls.n	8007438 <memmove+0x10>
 8007432:	4284      	cmp	r4, r0
 8007434:	4623      	mov	r3, r4
 8007436:	d807      	bhi.n	8007448 <memmove+0x20>
 8007438:	1e43      	subs	r3, r0, #1
 800743a:	42a1      	cmp	r1, r4
 800743c:	d008      	beq.n	8007450 <memmove+0x28>
 800743e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007442:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007446:	e7f8      	b.n	800743a <memmove+0x12>
 8007448:	4402      	add	r2, r0
 800744a:	4601      	mov	r1, r0
 800744c:	428a      	cmp	r2, r1
 800744e:	d100      	bne.n	8007452 <memmove+0x2a>
 8007450:	bd10      	pop	{r4, pc}
 8007452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800745a:	e7f7      	b.n	800744c <memmove+0x24>

0800745c <_sbrk_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	4d06      	ldr	r5, [pc, #24]	@ (8007478 <_sbrk_r+0x1c>)
 8007460:	2300      	movs	r3, #0
 8007462:	4604      	mov	r4, r0
 8007464:	4608      	mov	r0, r1
 8007466:	602b      	str	r3, [r5, #0]
 8007468:	f7fb fefc 	bl	8003264 <_sbrk>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d102      	bne.n	8007476 <_sbrk_r+0x1a>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	b103      	cbz	r3, 8007476 <_sbrk_r+0x1a>
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	bd38      	pop	{r3, r4, r5, pc}
 8007478:	20025d68 	.word	0x20025d68

0800747c <memcpy>:
 800747c:	440a      	add	r2, r1
 800747e:	4291      	cmp	r1, r2
 8007480:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007484:	d100      	bne.n	8007488 <memcpy+0xc>
 8007486:	4770      	bx	lr
 8007488:	b510      	push	{r4, lr}
 800748a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800748e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007492:	4291      	cmp	r1, r2
 8007494:	d1f9      	bne.n	800748a <memcpy+0xe>
 8007496:	bd10      	pop	{r4, pc}

08007498 <_free_r>:
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	4605      	mov	r5, r0
 800749c:	2900      	cmp	r1, #0
 800749e:	d041      	beq.n	8007524 <_free_r+0x8c>
 80074a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074a4:	1f0c      	subs	r4, r1, #4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	bfb8      	it	lt
 80074aa:	18e4      	addlt	r4, r4, r3
 80074ac:	f7ff ff82 	bl	80073b4 <__malloc_lock>
 80074b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007528 <_free_r+0x90>)
 80074b2:	6813      	ldr	r3, [r2, #0]
 80074b4:	b933      	cbnz	r3, 80074c4 <_free_r+0x2c>
 80074b6:	6063      	str	r3, [r4, #4]
 80074b8:	6014      	str	r4, [r2, #0]
 80074ba:	4628      	mov	r0, r5
 80074bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074c0:	f7ff bf7e 	b.w	80073c0 <__malloc_unlock>
 80074c4:	42a3      	cmp	r3, r4
 80074c6:	d908      	bls.n	80074da <_free_r+0x42>
 80074c8:	6820      	ldr	r0, [r4, #0]
 80074ca:	1821      	adds	r1, r4, r0
 80074cc:	428b      	cmp	r3, r1
 80074ce:	bf01      	itttt	eq
 80074d0:	6819      	ldreq	r1, [r3, #0]
 80074d2:	685b      	ldreq	r3, [r3, #4]
 80074d4:	1809      	addeq	r1, r1, r0
 80074d6:	6021      	streq	r1, [r4, #0]
 80074d8:	e7ed      	b.n	80074b6 <_free_r+0x1e>
 80074da:	461a      	mov	r2, r3
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	b10b      	cbz	r3, 80074e4 <_free_r+0x4c>
 80074e0:	42a3      	cmp	r3, r4
 80074e2:	d9fa      	bls.n	80074da <_free_r+0x42>
 80074e4:	6811      	ldr	r1, [r2, #0]
 80074e6:	1850      	adds	r0, r2, r1
 80074e8:	42a0      	cmp	r0, r4
 80074ea:	d10b      	bne.n	8007504 <_free_r+0x6c>
 80074ec:	6820      	ldr	r0, [r4, #0]
 80074ee:	4401      	add	r1, r0
 80074f0:	1850      	adds	r0, r2, r1
 80074f2:	4283      	cmp	r3, r0
 80074f4:	6011      	str	r1, [r2, #0]
 80074f6:	d1e0      	bne.n	80074ba <_free_r+0x22>
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	6053      	str	r3, [r2, #4]
 80074fe:	4408      	add	r0, r1
 8007500:	6010      	str	r0, [r2, #0]
 8007502:	e7da      	b.n	80074ba <_free_r+0x22>
 8007504:	d902      	bls.n	800750c <_free_r+0x74>
 8007506:	230c      	movs	r3, #12
 8007508:	602b      	str	r3, [r5, #0]
 800750a:	e7d6      	b.n	80074ba <_free_r+0x22>
 800750c:	6820      	ldr	r0, [r4, #0]
 800750e:	1821      	adds	r1, r4, r0
 8007510:	428b      	cmp	r3, r1
 8007512:	bf04      	itt	eq
 8007514:	6819      	ldreq	r1, [r3, #0]
 8007516:	685b      	ldreq	r3, [r3, #4]
 8007518:	6063      	str	r3, [r4, #4]
 800751a:	bf04      	itt	eq
 800751c:	1809      	addeq	r1, r1, r0
 800751e:	6021      	streq	r1, [r4, #0]
 8007520:	6054      	str	r4, [r2, #4]
 8007522:	e7ca      	b.n	80074ba <_free_r+0x22>
 8007524:	bd38      	pop	{r3, r4, r5, pc}
 8007526:	bf00      	nop
 8007528:	20025d64 	.word	0x20025d64

0800752c <_malloc_usable_size_r>:
 800752c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007530:	1f18      	subs	r0, r3, #4
 8007532:	2b00      	cmp	r3, #0
 8007534:	bfbc      	itt	lt
 8007536:	580b      	ldrlt	r3, [r1, r0]
 8007538:	18c0      	addlt	r0, r0, r3
 800753a:	4770      	bx	lr

0800753c <_init>:
 800753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753e:	bf00      	nop
 8007540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007542:	bc08      	pop	{r3}
 8007544:	469e      	mov	lr, r3
 8007546:	4770      	bx	lr

08007548 <_fini>:
 8007548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754a:	bf00      	nop
 800754c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800754e:	bc08      	pop	{r3}
 8007550:	469e      	mov	lr, r3
 8007552:	4770      	bx	lr
