
ECEN2370_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a60  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001220  08007c10  08007c10  00008c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e30  08008e30  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008e30  08008e30  00009e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e38  08008e38  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e38  08008e38  00009e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e3c  08008e3c  00009e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008e40  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a06c  2**0
                  CONTENTS
 10 .bss          00025cfc  2000006c  2000006c  0000a06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025d68  20025d68  0000a06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000154c3  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003683  00000000  00000000  0001f55f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  00022be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001062  00000000  00000000  00024118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027778  00000000  00000000  0002517a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001942c  00000000  00000000  0004c8f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3262  00000000  00000000  00065d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00148f80  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d30  00000000  00000000  00148fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008a  00000000  00000000  0014ecf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007bf8 	.word	0x08007bf8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08007bf8 	.word	0x08007bf8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	db0b      	blt.n	80005e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f003 021f 	and.w	r2, r3, #31
 80005d4:	4907      	ldr	r1, [pc, #28]	@ (80005f4 <__NVIC_EnableIRQ+0x38>)
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	095b      	lsrs	r3, r3, #5
 80005dc:	2001      	movs	r0, #1
 80005de:	fa00 f202 	lsl.w	r2, r0, r2
 80005e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000e100 	.word	0xe000e100

080005f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	2b00      	cmp	r3, #0
 8000608:	db12      	blt.n	8000630 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f003 021f 	and.w	r2, r3, #31
 8000610:	490a      	ldr	r1, [pc, #40]	@ (800063c <__NVIC_DisableIRQ+0x44>)
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	095b      	lsrs	r3, r3, #5
 8000618:	2001      	movs	r0, #1
 800061a:	fa00 f202 	lsl.w	r2, r0, r2
 800061e:	3320      	adds	r3, #32
 8000620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000624:	f3bf 8f4f 	dsb	sy
}
 8000628:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800062a:	f3bf 8f6f 	isb	sy
}
 800062e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000e100 	.word	0xe000e100

08000640 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	2b00      	cmp	r3, #0
 8000650:	db0c      	blt.n	800066c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	f003 021f 	and.w	r2, r3, #31
 8000658:	4907      	ldr	r1, [pc, #28]	@ (8000678 <__NVIC_ClearPendingIRQ+0x38>)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	095b      	lsrs	r3, r3, #5
 8000660:	2001      	movs	r0, #1
 8000662:	fa00 f202 	lsl.w	r2, r0, r2
 8000666:	3360      	adds	r3, #96	@ 0x60
 8000668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000e100 	.word	0xe000e100

0800067c <ApplicationInit>:

#if COMPILE_TOUCH_FUNCTIONS == 1
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000680:	f003 f946 	bl	8003910 <initialise_monitor_handles>
    buttonInit();
 8000684:	f000 f816 	bl	80006b4 <buttonInit>

    LTCD__Init();
 8000688:	f001 f86e 	bl	8001768 <LTCD__Init>
    LTCD_Layer_Init(0);
 800068c:	2000      	movs	r0, #0
 800068e:	f001 f82b 	bl	80016e8 <LTCD_Layer_Init>
    LCD_Clear(0, LCD_COLOR_WHITE);
 8000692:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000696:	2000      	movs	r0, #0
 8000698:	f001 fa14 	bl	8001ac4 <LCD_Clear>
    LCD_Connect_Four_Init();
 800069c:	f001 fa72 	bl	8001b84 <LCD_Connect_Four_Init>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80006a0:	f001 fa58 	bl	8001b54 <InitializeLCDTouch>

	// This is the orientation for the board to be directly up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80006a4:	4b02      	ldr	r3, [pc, #8]	@ (80006b0 <ApplicationInit+0x34>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000008c 	.word	0x2000008c

080006b4 <buttonInit>:

void buttonInit(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

	#if COMPILE_BUTTON_INTERRUPTS == 1
	button_Interrupt_Init();
 80006b8:	f000 f90c 	bl	80008d4 <button_Interrupt_Init>
	#else
	button_Init();
	#endif
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <checkIfTouchScreenPressed>:

#if COMPILE_TOUCH_FUNCTIONS == 1

uint8_t checkIfTouchScreenPressed(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

	if(returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80006c4:	480d      	ldr	r0, [pc, #52]	@ (80006fc <checkIfTouchScreenPressed+0x3c>)
 80006c6:	f001 fa50 	bl	8001b6a <returnTouchStateAndLocation>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d111      	bne.n	80006f4 <checkIfTouchScreenPressed+0x34>
		/* The coordinates are inverted from the StaticTouchData struct,
		 * So we need to un-invert them when we pass it into our function to check which game button
		 * is pressed. In this case, the buttons are fairly centered so I ignored inverting the x-coordinate.
		 * */
		if(gameButtonPressed(StaticTouchData.x, LCD_PIXEL_HEIGHT - StaticTouchData.y)) {
 80006d0:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <checkIfTouchScreenPressed+0x3c>)
 80006d2:	881a      	ldrh	r2, [r3, #0]
 80006d4:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <checkIfTouchScreenPressed+0x3c>)
 80006d6:	885b      	ldrh	r3, [r3, #2]
 80006d8:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80006dc:	b29b      	uxth	r3, r3
 80006de:	4619      	mov	r1, r3
 80006e0:	4610      	mov	r0, r2
 80006e2:	f000 f80d 	bl	8000700 <gameButtonPressed>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d003      	beq.n	80006f4 <checkIfTouchScreenPressed+0x34>
			triggerGameButtonResponse();
 80006ec:	f000 f854 	bl	8000798 <triggerGameButtonResponse>
			return TRUE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	e000      	b.n	80006f6 <checkIfTouchScreenPressed+0x36>
		}
	}
	return FALSE;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000008c 	.word	0x2000008c

08000700 <gameButtonPressed>:

uint8_t gameButtonPressed(uint16_t xInput, uint16_t yInput) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af02      	add	r7, sp, #8
 8000706:	4603      	mov	r3, r0
 8000708:	460a      	mov	r2, r1
 800070a:	80fb      	strh	r3, [r7, #6]
 800070c:	4613      	mov	r3, r2
 800070e:	80bb      	strh	r3, [r7, #4]

	if((!gameSelect && xInput >= BUTTON_ONE_X_LOWER && xInput <= BUTTON_ONE_X_UPPER) && (yInput >= BUTTON_ONE_Y_LOWER && yInput <= BUTTON_ONE_Y_UPPER)) {
 8000710:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <gameButtonPressed+0x94>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d119      	bne.n	800074c <gameButtonPressed+0x4c>
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	2b40      	cmp	r3, #64	@ 0x40
 800071c:	d916      	bls.n	800074c <gameButtonPressed+0x4c>
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	2baf      	cmp	r3, #175	@ 0xaf
 8000722:	d813      	bhi.n	800074c <gameButtonPressed+0x4c>
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	2b77      	cmp	r3, #119	@ 0x77
 8000728:	d910      	bls.n	800074c <gameButtonPressed+0x4c>
 800072a:	88bb      	ldrh	r3, [r7, #4]
 800072c:	2baa      	cmp	r3, #170	@ 0xaa
 800072e:	d80d      	bhi.n	800074c <gameButtonPressed+0x4c>
		LCD_Draw_Game_Button(BUTTON_ONE_X_LOWER, BUTTON_ONE_X_UPPER - BUTTON_ONE_X_LOWER, BUTTON_ONE_Y_LOWER, BUTTON_ONE_Y_UPPER - BUTTON_ONE_Y_LOWER, LCD_COLOR_GREEN);
 8000730:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2332      	movs	r3, #50	@ 0x32
 8000738:	2278      	movs	r2, #120	@ 0x78
 800073a:	216e      	movs	r1, #110	@ 0x6e
 800073c:	2041      	movs	r0, #65	@ 0x41
 800073e:	f001 fa2d 	bl	8001b9c <LCD_Draw_Game_Button>
		gameSelect = AI_MODE_SELECT;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <gameButtonPressed+0x94>)
 8000744:	2201      	movs	r2, #1
 8000746:	701a      	strb	r2, [r3, #0]
		return TRUE;
 8000748:	2301      	movs	r3, #1
 800074a:	e01f      	b.n	800078c <gameButtonPressed+0x8c>
	}

	/* Handles both selecting "Two Player Mode" and the "Play Again" button */
	else if((xInput >= BUTTON_TWO_X_LOWER && xInput <= BUTTON_TWO_X_UPPER) && (yInput >= BUTTON_TWO_Y_LOWER && yInput <= BUTTON_TWO_Y_UPPER)) {
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	2b40      	cmp	r3, #64	@ 0x40
 8000750:	d91b      	bls.n	800078a <gameButtonPressed+0x8a>
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	2baf      	cmp	r3, #175	@ 0xaf
 8000756:	d818      	bhi.n	800078a <gameButtonPressed+0x8a>
 8000758:	88bb      	ldrh	r3, [r7, #4]
 800075a:	2bd1      	cmp	r3, #209	@ 0xd1
 800075c:	d915      	bls.n	800078a <gameButtonPressed+0x8a>
 800075e:	88bb      	ldrh	r3, [r7, #4]
 8000760:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8000764:	d811      	bhi.n	800078a <gameButtonPressed+0x8a>
		LCD_Draw_Game_Button(BUTTON_TWO_X_LOWER, BUTTON_TWO_X_UPPER - BUTTON_TWO_X_LOWER, BUTTON_TWO_Y_LOWER, BUTTON_TWO_Y_UPPER - BUTTON_TWO_Y_LOWER, LCD_COLOR_GREEN);
 8000766:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2332      	movs	r3, #50	@ 0x32
 800076e:	22d2      	movs	r2, #210	@ 0xd2
 8000770:	216e      	movs	r1, #110	@ 0x6e
 8000772:	2041      	movs	r0, #65	@ 0x41
 8000774:	f001 fa12 	bl	8001b9c <LCD_Draw_Game_Button>
		if(!gameSelect) {
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <gameButtonPressed+0x94>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d102      	bne.n	8000786 <gameButtonPressed+0x86>
			gameSelect = TWO_PLAYER_SELECT;
 8000780:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <gameButtonPressed+0x94>)
 8000782:	2202      	movs	r2, #2
 8000784:	701a      	strb	r2, [r3, #0]
		}
		return TRUE;
 8000786:	2301      	movs	r3, #1
 8000788:	e000      	b.n	800078c <gameButtonPressed+0x8c>
	}

	return FALSE;
 800078a:	2300      	movs	r3, #0
}
 800078c:	4618      	mov	r0, r3
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000088 	.word	0x20000088

08000798 <triggerGameButtonResponse>:

void triggerGameButtonResponse(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

	setGameMode(gameSelect);
 800079c:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <triggerGameButtonResponse+0x28>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f8e9 	bl	8000978 <setGameMode>
	HAL_Delay(750);
 80007a6:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80007aa:	f003 f99d 	bl	8003ae8 <HAL_Delay>
    LCD_Clear(0, LCD_COLOR_WHITE);
 80007ae:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80007b2:	2000      	movs	r0, #0
 80007b4:	f001 f986 	bl	8001ac4 <LCD_Clear>
	startNewGame();
 80007b8:	f000 f912 	bl	80009e0 <startNewGame>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000088 	.word	0x20000088

080007c4 <waitForUserResponse>:

#endif // COMPILE_TOUCH_FUNCTIONS

/* Game Functions */

void waitForUserResponse(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	#if COMPILE_TOUCH_FUNCTIONS == 1
	while(!checkIfTouchScreenPressed()) {
 80007c8:	bf00      	nop
 80007ca:	f7ff ff79 	bl	80006c0 <checkIfTouchScreenPressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d0fa      	beq.n	80007ca <waitForUserResponse+0x6>
		;
	}
	#endif
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}

080007da <LCD_Display_Start_Screen>:

void LCD_Display_Start_Screen(void) {
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_WHITE);
 80007de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80007e2:	2000      	movs	r0, #0
 80007e4:	f001 f96e 	bl	8001ac4 <LCD_Clear>
	displayStartScreen();
 80007e8:	f001 fa61 	bl	8001cae <displayStartScreen>
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <LCD_Display_Stats_Screen>:

void LCD_Display_Stats_Screen(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

    HAL_Delay(750);
 80007f4:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80007f8:	f003 f976 	bl	8003ae8 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 80007fc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000800:	2000      	movs	r0, #0
 8000802:	f001 f95f 	bl	8001ac4 <LCD_Clear>
	displayStatsScreen();
 8000806:	f001 faf9 	bl	8001dfc <displayStatsScreen>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <displayMenu>:

void displayMenu(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

	if(!gameSelect) {
 8000814:	4b05      	ldr	r3, [pc, #20]	@ (800082c <displayMenu+0x1c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d102      	bne.n	8000822 <displayMenu+0x12>
		LCD_Display_Start_Screen();
 800081c:	f7ff ffdd 	bl	80007da <LCD_Display_Start_Screen>
	}
	else {
		LCD_Display_Stats_Screen();
	}
}
 8000820:	e001      	b.n	8000826 <displayMenu+0x16>
		LCD_Display_Stats_Screen();
 8000822:	f7ff ffe5 	bl	80007f0 <LCD_Display_Stats_Screen>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000088 	.word	0x20000088

08000830 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	__NVIC_DisableIRQ(BUTTON_IRQ_NUM);
 8000834:	2006      	movs	r0, #6
 8000836:	f7ff fedf 	bl	80005f8 <__NVIC_DisableIRQ>
	/* Drop Coin. The offset accounts for the logic used to draw the coin on the LCD display, which does not match
	 * the indices of the matrix that holds the data for the game board. */
	if(canPlaceCoin(gameBoard, gameCoin.col)) {
 800083a:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <EXTI0_IRQHandler+0x70>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	4619      	mov	r1, r3
 8000840:	4818      	ldr	r0, [pc, #96]	@ (80008a4 <EXTI0_IRQHandler+0x74>)
 8000842:	f000 f9e3 	bl	8000c0c <canPlaceCoin>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d01d      	beq.n	8000888 <EXTI0_IRQHandler+0x58>
		clearFloatingCoin((gameCoin.col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, gameCoin.yPos);
 800084c:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <EXTI0_IRQHandler+0x70>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	b29b      	uxth	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	0112      	lsls	r2, r2, #4
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	b29b      	uxth	r3, r3
 800085e:	4a10      	ldr	r2, [pc, #64]	@ (80008a0 <EXTI0_IRQHandler+0x70>)
 8000860:	8852      	ldrh	r2, [r2, #2]
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fab6 	bl	8001dd6 <clearFloatingCoin>
		placeCoin(gameBoard, gameCoin.row, gameCoin.col);
 800086a:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <EXTI0_IRQHandler+0x70>)
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	4a0c      	ldr	r2, [pc, #48]	@ (80008a0 <EXTI0_IRQHandler+0x70>)
 8000870:	7812      	ldrb	r2, [r2, #0]
 8000872:	4619      	mov	r1, r3
 8000874:	480b      	ldr	r0, [pc, #44]	@ (80008a4 <EXTI0_IRQHandler+0x74>)
 8000876:	f000 f963 	bl	8000b40 <placeCoin>
		__NVIC_ClearPendingIRQ(BUTTON_IRQ_NUM);
 800087a:	2006      	movs	r0, #6
 800087c:	f7ff fee0 	bl	8000640 <__NVIC_ClearPendingIRQ>
		clearPendingEXTI(BUTTON_PIN_NUM);
 8000880:	2001      	movs	r0, #1
 8000882:	f000 fe41 	bl	8001508 <clearPendingEXTI>
	else {
		__NVIC_ClearPendingIRQ(BUTTON_IRQ_NUM);
		clearPendingEXTI(BUTTON_PIN_NUM);
		__NVIC_EnableIRQ(BUTTON_IRQ_NUM);
	}
}
 8000886:	e008      	b.n	800089a <EXTI0_IRQHandler+0x6a>
		__NVIC_ClearPendingIRQ(BUTTON_IRQ_NUM);
 8000888:	2006      	movs	r0, #6
 800088a:	f7ff fed9 	bl	8000640 <__NVIC_ClearPendingIRQ>
		clearPendingEXTI(BUTTON_PIN_NUM);
 800088e:	2001      	movs	r0, #1
 8000890:	f000 fe3a 	bl	8001508 <clearPendingEXTI>
		__NVIC_EnableIRQ(BUTTON_IRQ_NUM);
 8000894:	2006      	movs	r0, #6
 8000896:	f7ff fe91 	bl	80005bc <__NVIC_EnableIRQ>
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000d0 	.word	0x200000d0
 80008a4:	200000a0 	.word	0x200000a0

080008a8 <TIM2_IRQHandler>:

void TIM2_IRQHandler (void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

	__NVIC_DisableIRQ(TIM2_IRQ_NUM);
 80008ac:	201c      	movs	r0, #28
 80008ae:	f7ff fea3 	bl	80005f8 <__NVIC_DisableIRQ>
	numSecondsElapsedInGame++;
 80008b2:	4b07      	ldr	r3, [pc, #28]	@ (80008d0 <TIM2_IRQHandler+0x28>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	4a05      	ldr	r2, [pc, #20]	@ (80008d0 <TIM2_IRQHandler+0x28>)
 80008ba:	6013      	str	r3, [r2, #0]
	__NVIC_ClearPendingIRQ(TIM2_IRQ_NUM);
 80008bc:	201c      	movs	r0, #28
 80008be:	f7ff febf 	bl	8000640 <__NVIC_ClearPendingIRQ>
	clearPendingTIM2();
 80008c2:	f000 fe39 	bl	8001538 <clearPendingTIM2>
	__NVIC_EnableIRQ(TIM2_IRQ_NUM);
 80008c6:	201c      	movs	r0, #28
 80008c8:	f7ff fe78 	bl	80005bc <__NVIC_EnableIRQ>
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200000cc 	.word	0x200000cc

080008d4 <button_Interrupt_Init>:
#include "Button_Driver.h"

#if COMPILE_BUTTON_INTERRUPTS == 1
void button_Interrupt_Init() {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef buttonConfig;
	buttonConfig.Mode = GPIO_MODE_IT_RISING;
 80008da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008de:	613b      	str	r3, [r7, #16]
	buttonConfig.Pin = BUTTON_PIN_NUM;
 80008e0:	2301      	movs	r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
	buttonConfig.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <button_Interrupt_Init+0x60>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f0:	4a10      	ldr	r2, [pc, #64]	@ (8000934 <button_Interrupt_Init+0x60>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <button_Interrupt_Init+0x60>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <button_Interrupt_Init+0x60>)
 800090a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090c:	4a09      	ldr	r2, [pc, #36]	@ (8000934 <button_Interrupt_Init+0x60>)
 800090e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000912:	6453      	str	r3, [r2, #68]	@ 0x44
 8000914:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <button_Interrupt_Init+0x60>)
 8000916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &buttonConfig);
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4619      	mov	r1, r3
 8000926:	4804      	ldr	r0, [pc, #16]	@ (8000938 <button_Interrupt_Init+0x64>)
 8000928:	f003 f9e8 	bl	8003cfc <HAL_GPIO_Init>

}
 800092c:	bf00      	nop
 800092e:	3720      	adds	r7, #32
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000

0800093c <__NVIC_EnableIRQ>:
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	2b00      	cmp	r3, #0
 800094c:	db0b      	blt.n	8000966 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	f003 021f 	and.w	r2, r3, #31
 8000954:	4907      	ldr	r1, [pc, #28]	@ (8000974 <__NVIC_EnableIRQ+0x38>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	095b      	lsrs	r3, r3, #5
 800095c:	2001      	movs	r0, #1
 800095e:	fa00 f202 	lsl.w	r2, r0, r2
 8000962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000e100 	.word	0xe000e100

08000978 <setGameMode>:
uint8_t redWinCount = 0;
uint32_t numSecondsElapsedInGame = 0;
coin_t gameCoin;


void setGameMode(uint8_t mode) {
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]

	if(mode == AI_MODE_SELECT || TWO_PLAYER_SELECT) {
		sessionGameMode = mode;
 8000982:	4a04      	ldr	r2, [pc, #16]	@ (8000994 <setGameMode+0x1c>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	7013      	strb	r3, [r2, #0]
	}
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	20000094 	.word	0x20000094

08000998 <resetBoard>:


void resetBoard(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	memset(gameBoard, 0, sizeof(gameBoard));
 800099c:	222a      	movs	r2, #42	@ 0x2a
 800099e:	2100      	movs	r1, #0
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <resetBoard+0x14>)
 80009a2:	f006 fcab 	bl	80072fc <memset>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000a0 	.word	0x200000a0

080009b0 <resetCoinPos>:


void resetCoinPos(void) {
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
	gameCoin.col = COIN_DEFAULT_COL;
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <resetCoinPos+0x28>)
 80009b6:	2203      	movs	r2, #3
 80009b8:	701a      	strb	r2, [r3, #0]
	gameCoin.row = COIN_DEFAULT_ROW;
 80009ba:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <resetCoinPos+0x28>)
 80009bc:	2200      	movs	r2, #0
 80009be:	705a      	strb	r2, [r3, #1]
	gameCoin.yPos = COIN_DEFAULT_Y;
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <resetCoinPos+0x28>)
 80009c2:	2228      	movs	r2, #40	@ 0x28
 80009c4:	805a      	strh	r2, [r3, #2]
	coinDropped = FALSE;
 80009c6:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <resetCoinPos+0x2c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	200000d0 	.word	0x200000d0
 80009dc:	20000096 	.word	0x20000096

080009e0 <startNewGame>:


void startNewGame(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	resetBoard();
 80009e4:	f7ff ffd8 	bl	8000998 <resetBoard>
	gameOver = FALSE;
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <startNewGame+0x24>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
    numSecondsElapsedInGame = 0;
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <startNewGame+0x28>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
	playerTurn = YELLOW;
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <startNewGame+0x2c>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
	playGame();
 80009fa:	f000 fb63 	bl	80010c4 <playGame>
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000095 	.word	0x20000095
 8000a08:	200000cc 	.word	0x200000cc
 8000a0c:	20000000 	.word	0x20000000

08000a10 <incrementWinCount>:


void incrementWinCount(void) {
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

	if(playerTurn == YELLOW) {
 8000a14:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <incrementWinCount+0x38>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d106      	bne.n	8000a2a <incrementWinCount+0x1a>
		yellowWinCount++;
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <incrementWinCount+0x3c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <incrementWinCount+0x3c>)
 8000a26:	701a      	strb	r2, [r3, #0]
 8000a28:	e005      	b.n	8000a36 <incrementWinCount+0x26>
	}
	else {
		redWinCount++;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <incrementWinCount+0x40>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <incrementWinCount+0x40>)
 8000a34:	701a      	strb	r2, [r3, #0]
	}
	gameOver = TRUE;
 8000a36:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <incrementWinCount+0x44>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	200000ca 	.word	0x200000ca
 8000a50:	200000cb 	.word	0x200000cb
 8000a54:	20000095 	.word	0x20000095

08000a58 <checkIfUserMovedCoin>:


/* Checks which side of the screen is pressed, as well as if we are still
 * within the bounds of the board.
 * */
void checkIfUserMovedCoin(void) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	if(returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000a5c:	4814      	ldr	r0, [pc, #80]	@ (8000ab0 <checkIfUserMovedCoin+0x58>)
 8000a5e:	f001 f884 	bl	8001b6a <returnTouchStateAndLocation>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d121      	bne.n	8000aac <checkIfUserMovedCoin+0x54>
		HAL_Delay(200);
 8000a68:	20c8      	movs	r0, #200	@ 0xc8
 8000a6a:	f003 f83d 	bl	8003ae8 <HAL_Delay>
		if(StaticTouchData.x > LCD_PIXEL_WIDTH / 2 && gameCoin.col > 0) {
 8000a6e:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <checkIfUserMovedCoin+0x58>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	2b78      	cmp	r3, #120	@ 0x78
 8000a74:	d90b      	bls.n	8000a8e <checkIfUserMovedCoin+0x36>
 8000a76:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <checkIfUserMovedCoin+0x5c>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d007      	beq.n	8000a8e <checkIfUserMovedCoin+0x36>
			moveCoin(gameCoin.col - 1);
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <checkIfUserMovedCoin+0x5c>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f816 	bl	8000ab8 <moveCoin>
		}
		else if(StaticTouchData.x < LCD_PIXEL_WIDTH / 2 && gameCoin.col < 6) {
			moveCoin(gameCoin.col + 1);
		}
	}
}
 8000a8c:	e00e      	b.n	8000aac <checkIfUserMovedCoin+0x54>
		else if(StaticTouchData.x < LCD_PIXEL_WIDTH / 2 && gameCoin.col < 6) {
 8000a8e:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <checkIfUserMovedCoin+0x58>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	2b77      	cmp	r3, #119	@ 0x77
 8000a94:	d80a      	bhi.n	8000aac <checkIfUserMovedCoin+0x54>
 8000a96:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <checkIfUserMovedCoin+0x5c>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b05      	cmp	r3, #5
 8000a9c:	d806      	bhi.n	8000aac <checkIfUserMovedCoin+0x54>
			moveCoin(gameCoin.col + 1);
 8000a9e:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <checkIfUserMovedCoin+0x5c>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f806 	bl	8000ab8 <moveCoin>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000098 	.word	0x20000098
 8000ab4:	200000d0 	.word	0x200000d0

08000ab8 <moveCoin>:


void moveCoin(uint8_t col) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	clearFloatingCoin((gameCoin.col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, gameCoin.yPos);
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b38 <moveCoin+0x80>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	461a      	mov	r2, r3
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4a18      	ldr	r2, [pc, #96]	@ (8000b38 <moveCoin+0x80>)
 8000ad6:	8852      	ldrh	r2, [r2, #2]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 f97b 	bl	8001dd6 <clearFloatingCoin>
	gameCoin.col = col;
 8000ae0:	4a15      	ldr	r2, [pc, #84]	@ (8000b38 <moveCoin+0x80>)
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	7013      	strb	r3, [r2, #0]

	if(playerTurn == YELLOW) {
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <moveCoin+0x84>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d110      	bne.n	8000b10 <moveCoin+0x58>
		LCD_Display_Coin((gameCoin.col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_YELLOW);
 8000aee:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <moveCoin+0x80>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	4a0d      	ldr	r2, [pc, #52]	@ (8000b38 <moveCoin+0x80>)
 8000b02:	8851      	ldrh	r1, [r2, #2]
 8000b04:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 f8bd 	bl	8001c88 <LCD_Display_Coin>
	}
	else {
		LCD_Display_Coin((gameCoin.col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_RED);
	}
}
 8000b0e:	e00f      	b.n	8000b30 <moveCoin+0x78>
		LCD_Display_Coin((gameCoin.col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_RED);
 8000b10:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <moveCoin+0x80>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	3301      	adds	r3, #1
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	4a05      	ldr	r2, [pc, #20]	@ (8000b38 <moveCoin+0x80>)
 8000b24:	8851      	ldrh	r1, [r2, #2]
 8000b26:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 f8ac 	bl	8001c88 <LCD_Display_Coin>
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200000d0 	.word	0x200000d0
 8000b3c:	20000000 	.word	0x20000000

08000b40 <placeCoin>:


void placeCoin(uint8_t board[NUM_ROWS][NUM_COLS], uint8_t row, uint8_t col) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	70fb      	strb	r3, [r7, #3]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	70bb      	strb	r3, [r7, #2]

	if(board[row][col]) {
 8000b50:	78fa      	ldrb	r2, [r7, #3]
 8000b52:	4613      	mov	r3, r2
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	1a9b      	subs	r3, r3, r2
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	441a      	add	r2, r3
 8000b5c:	78bb      	ldrb	r3, [r7, #2]
 8000b5e:	5cd3      	ldrb	r3, [r2, r3]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d146      	bne.n	8000bf2 <placeCoin+0xb2>
		return;
	}

	board[row][col] = playerTurn;
 8000b64:	78fa      	ldrb	r2, [r7, #3]
 8000b66:	4613      	mov	r3, r2
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	1a9b      	subs	r3, r3, r2
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	441a      	add	r2, r3
 8000b70:	78bb      	ldrb	r3, [r7, #2]
 8000b72:	4923      	ldr	r1, [pc, #140]	@ (8000c00 <placeCoin+0xc0>)
 8000b74:	7809      	ldrb	r1, [r1, #0]
 8000b76:	54d1      	strb	r1, [r2, r3]
	coinDropped = TRUE;
 8000b78:	4b22      	ldr	r3, [pc, #136]	@ (8000c04 <placeCoin+0xc4>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]

	if(playerTurn == YELLOW) {
 8000b7e:	4b20      	ldr	r3, [pc, #128]	@ (8000c00 <placeCoin+0xc0>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d118      	bne.n	8000bb8 <placeCoin+0x78>
		LCD_Display_Coin((col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, LCD_PIXEL_HEIGHT - BORDER_Y_OFFSET - (row + COIN_GAME_LOGIC_OFFSET) * BOARD_Y_OFFSET, LCD_COLOR_YELLOW);
 8000b86:	78bb      	ldrb	r3, [r7, #2]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	b298      	uxth	r0, r3
 8000b96:	78fb      	ldrb	r3, [r7, #3]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	011b      	lsls	r3, r3, #4
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	f203 133b 	addw	r3, r3, #315	@ 0x13b
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f001 f869 	bl	8001c88 <LCD_Display_Coin>
	}
	else if(sessionGameMode == TWO_PLAYER_SELECT){
		LCD_Display_Coin((col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, LCD_PIXEL_HEIGHT - BORDER_Y_OFFSET - (row + COIN_GAME_LOGIC_OFFSET) * BOARD_Y_OFFSET, LCD_COLOR_RED);
	}

	return;
 8000bb6:	e01e      	b.n	8000bf6 <placeCoin+0xb6>
	else if(sessionGameMode == TWO_PLAYER_SELECT){
 8000bb8:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <placeCoin+0xc8>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d11a      	bne.n	8000bf6 <placeCoin+0xb6>
		LCD_Display_Coin((col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, LCD_PIXEL_HEIGHT - BORDER_Y_OFFSET - (row + COIN_GAME_LOGIC_OFFSET) * BOARD_Y_OFFSET, LCD_COLOR_RED);
 8000bc0:	78bb      	ldrb	r3, [r7, #2]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	0112      	lsls	r2, r2, #4
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	b298      	uxth	r0, r3
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	011b      	lsls	r3, r3, #4
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	f203 133b 	addw	r3, r3, #315	@ 0x13b
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000bea:	4619      	mov	r1, r3
 8000bec:	f001 f84c 	bl	8001c88 <LCD_Display_Coin>
	return;
 8000bf0:	e001      	b.n	8000bf6 <placeCoin+0xb6>
		return;
 8000bf2:	bf00      	nop
 8000bf4:	e000      	b.n	8000bf8 <placeCoin+0xb8>
	return;
 8000bf6:	bf00      	nop
}
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000096 	.word	0x20000096
 8000c08:	20000094 	.word	0x20000094

08000c0c <canPlaceCoin>:


uint8_t canPlaceCoin(uint8_t board[NUM_ROWS][NUM_COLS], uint8_t col) {
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]

	for(int row = 0; row < NUM_ROWS; row++) {
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	e012      	b.n	8000c44 <canPlaceCoin+0x38>
		if(!board[row][col]) {
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	4613      	mov	r3, r2
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	1a9b      	subs	r3, r3, r2
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	441a      	add	r2, r3
 8000c2a:	78fb      	ldrb	r3, [r7, #3]
 8000c2c:	5cd3      	ldrb	r3, [r2, r3]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d105      	bne.n	8000c3e <canPlaceCoin+0x32>
			gameCoin.row = row;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <canPlaceCoin+0x4c>)
 8000c38:	705a      	strb	r2, [r3, #1]
			return TRUE;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e006      	b.n	8000c4c <canPlaceCoin+0x40>
	for(int row = 0; row < NUM_ROWS; row++) {
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	3301      	adds	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2b05      	cmp	r3, #5
 8000c48:	dde9      	ble.n	8000c1e <canPlaceCoin+0x12>
		}
	}
	return FALSE;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	200000d0 	.word	0x200000d0

08000c5c <getScoreByDirection>:


uint8_t getScoreByDirection(uint8_t board[NUM_ROWS][NUM_COLS], uint8_t row, uint8_t col, uint8_t rowDelta, uint8_t colDelta, uint8_t player) {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	4608      	mov	r0, r1
 8000c66:	4611      	mov	r1, r2
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	70fb      	strb	r3, [r7, #3]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	70bb      	strb	r3, [r7, #2]
 8000c72:	4613      	mov	r3, r2
 8000c74:	707b      	strb	r3, [r7, #1]
	uint8_t score = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]

    for (uint8_t count = 0; count < 4; count++) {
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73bb      	strb	r3, [r7, #14]
 8000c7e:	e034      	b.n	8000cea <getScoreByDirection+0x8e>
        if (row < NUM_ROWS && row >= 0 && col < NUM_COLS && col >= 0) {
 8000c80:	78fb      	ldrb	r3, [r7, #3]
 8000c82:	2b05      	cmp	r3, #5
 8000c84:	d823      	bhi.n	8000cce <getScoreByDirection+0x72>
 8000c86:	78bb      	ldrb	r3, [r7, #2]
 8000c88:	2b06      	cmp	r3, #6
 8000c8a:	d820      	bhi.n	8000cce <getScoreByDirection+0x72>
            if (board[row][col] == player) {
 8000c8c:	78fa      	ldrb	r2, [r7, #3]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	1a9b      	subs	r3, r3, r2
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	441a      	add	r2, r3
 8000c98:	78bb      	ldrb	r3, [r7, #2]
 8000c9a:	5cd3      	ldrb	r3, [r2, r3]
 8000c9c:	7f3a      	ldrb	r2, [r7, #28]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d103      	bne.n	8000caa <getScoreByDirection+0x4e>
                score++;
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
            if (board[row][col] == player) {
 8000ca8:	e013      	b.n	8000cd2 <getScoreByDirection+0x76>
            }
            else if (board[row][col] == (player % 2) + 1) {
 8000caa:	78fa      	ldrb	r2, [r7, #3]
 8000cac:	4613      	mov	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	1a9b      	subs	r3, r3, r2
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	441a      	add	r2, r3
 8000cb6:	78bb      	ldrb	r3, [r7, #2]
 8000cb8:	5cd3      	ldrb	r3, [r2, r3]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	7f3b      	ldrb	r3, [r7, #28]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d104      	bne.n	8000cd2 <getScoreByDirection+0x76>
            	score = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]
            if (board[row][col] == player) {
 8000ccc:	e001      	b.n	8000cd2 <getScoreByDirection+0x76>
            }
        }
        else {
        	return score;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	e00f      	b.n	8000cf2 <getScoreByDirection+0x96>
            if (board[row][col] == player) {
 8000cd2:	bf00      	nop
        }
        row += rowDelta;
 8000cd4:	78fa      	ldrb	r2, [r7, #3]
 8000cd6:	787b      	ldrb	r3, [r7, #1]
 8000cd8:	4413      	add	r3, r2
 8000cda:	70fb      	strb	r3, [r7, #3]
        col += colDelta;
 8000cdc:	78ba      	ldrb	r2, [r7, #2]
 8000cde:	7e3b      	ldrb	r3, [r7, #24]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	70bb      	strb	r3, [r7, #2]
    for (uint8_t count = 0; count < 4; count++) {
 8000ce4:	7bbb      	ldrb	r3, [r7, #14]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	73bb      	strb	r3, [r7, #14]
 8000cea:	7bbb      	ldrb	r3, [r7, #14]
 8000cec:	2b03      	cmp	r3, #3
 8000cee:	d9c7      	bls.n	8000c80 <getScoreByDirection+0x24>
    };
    return score;
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <checkWinner>:
/* First check if theres a win condition by checking the last piece placed.
 * If no win condition, check for the case that a draw has occured,
 * (all pieces in column are full).
 * Otherwise, return false.
 */
uint8_t checkWinner(uint8_t board[NUM_ROWS][NUM_COLS], uint8_t row, uint8_t column, uint8_t player) {
 8000cfe:	b480      	push	{r7}
 8000d00:	b085      	sub	sp, #20
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	4608      	mov	r0, r1
 8000d08:	4611      	mov	r1, r2
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	70fb      	strb	r3, [r7, #3]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70bb      	strb	r3, [r7, #2]
 8000d14:	4613      	mov	r3, r2
 8000d16:	707b      	strb	r3, [r7, #1]

	/* Horizontal check */
	for(uint8_t col = 0; col < NUM_COLS - 3; col++) {
 8000d18:	2300      	movs	r3, #0
 8000d1a:	73fb      	strb	r3, [r7, #15]
 8000d1c:	e03c      	b.n	8000d98 <checkWinner+0x9a>
		for(uint8_t row = 0; row < NUM_ROWS; row++) {
 8000d1e:	2300      	movs	r3, #0
 8000d20:	73bb      	strb	r3, [r7, #14]
 8000d22:	e033      	b.n	8000d8c <checkWinner+0x8e>
			if(board[row][col] == player && board[row][col + 1] == player && board[row][col + 2] == player && board[row][col + 3] == player) {
 8000d24:	7bba      	ldrb	r2, [r7, #14]
 8000d26:	4613      	mov	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	1a9b      	subs	r3, r3, r2
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	441a      	add	r2, r3
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	5cd3      	ldrb	r3, [r2, r3]
 8000d34:	787a      	ldrb	r2, [r7, #1]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d125      	bne.n	8000d86 <checkWinner+0x88>
 8000d3a:	7bba      	ldrb	r2, [r7, #14]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	1a9b      	subs	r3, r3, r2
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	441a      	add	r2, r3
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	5cd3      	ldrb	r3, [r2, r3]
 8000d4c:	787a      	ldrb	r2, [r7, #1]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d119      	bne.n	8000d86 <checkWinner+0x88>
 8000d52:	7bba      	ldrb	r2, [r7, #14]
 8000d54:	4613      	mov	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	1a9b      	subs	r3, r3, r2
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	441a      	add	r2, r3
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	3302      	adds	r3, #2
 8000d62:	5cd3      	ldrb	r3, [r2, r3]
 8000d64:	787a      	ldrb	r2, [r7, #1]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d10d      	bne.n	8000d86 <checkWinner+0x88>
 8000d6a:	7bba      	ldrb	r2, [r7, #14]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	1a9b      	subs	r3, r3, r2
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	441a      	add	r2, r3
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	3303      	adds	r3, #3
 8000d7a:	5cd3      	ldrb	r3, [r2, r3]
 8000d7c:	787a      	ldrb	r2, [r7, #1]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d101      	bne.n	8000d86 <checkWinner+0x88>
				return TRUE;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e0db      	b.n	8000f3e <checkWinner+0x240>
		for(uint8_t row = 0; row < NUM_ROWS; row++) {
 8000d86:	7bbb      	ldrb	r3, [r7, #14]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	73bb      	strb	r3, [r7, #14]
 8000d8c:	7bbb      	ldrb	r3, [r7, #14]
 8000d8e:	2b05      	cmp	r3, #5
 8000d90:	d9c8      	bls.n	8000d24 <checkWinner+0x26>
	for(uint8_t col = 0; col < NUM_COLS - 3; col++) {
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	3301      	adds	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d9bf      	bls.n	8000d1e <checkWinner+0x20>
			}
		}
	}

	/* Vertical check */
	for(uint8_t col = 0; col < NUM_COLS; col++) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	737b      	strb	r3, [r7, #13]
 8000da2:	e03c      	b.n	8000e1e <checkWinner+0x120>
		for(uint8_t row = 0; row < NUM_ROWS - 3; row++) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	733b      	strb	r3, [r7, #12]
 8000da8:	e033      	b.n	8000e12 <checkWinner+0x114>
			if(board[row][col] == player && board[row + 1][col] == player && board[row + 2][col] == player && board[row + 3][col] == player) {
 8000daa:	7b3a      	ldrb	r2, [r7, #12]
 8000dac:	4613      	mov	r3, r2
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	1a9b      	subs	r3, r3, r2
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	441a      	add	r2, r3
 8000db6:	7b7b      	ldrb	r3, [r7, #13]
 8000db8:	5cd3      	ldrb	r3, [r2, r3]
 8000dba:	787a      	ldrb	r2, [r7, #1]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d125      	bne.n	8000e0c <checkWinner+0x10e>
 8000dc0:	7b3b      	ldrb	r3, [r7, #12]
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	1a9b      	subs	r3, r3, r2
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	441a      	add	r2, r3
 8000dce:	7b7b      	ldrb	r3, [r7, #13]
 8000dd0:	5cd3      	ldrb	r3, [r2, r3]
 8000dd2:	787a      	ldrb	r2, [r7, #1]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d119      	bne.n	8000e0c <checkWinner+0x10e>
 8000dd8:	7b3a      	ldrb	r2, [r7, #12]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	1a9b      	subs	r3, r3, r2
 8000de0:	330e      	adds	r3, #14
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	441a      	add	r2, r3
 8000de6:	7b7b      	ldrb	r3, [r7, #13]
 8000de8:	5cd3      	ldrb	r3, [r2, r3]
 8000dea:	787a      	ldrb	r2, [r7, #1]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d10d      	bne.n	8000e0c <checkWinner+0x10e>
 8000df0:	7b3a      	ldrb	r2, [r7, #12]
 8000df2:	4613      	mov	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	1a9b      	subs	r3, r3, r2
 8000df8:	3315      	adds	r3, #21
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	441a      	add	r2, r3
 8000dfe:	7b7b      	ldrb	r3, [r7, #13]
 8000e00:	5cd3      	ldrb	r3, [r2, r3]
 8000e02:	787a      	ldrb	r2, [r7, #1]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d101      	bne.n	8000e0c <checkWinner+0x10e>
				return TRUE;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e098      	b.n	8000f3e <checkWinner+0x240>
		for(uint8_t row = 0; row < NUM_ROWS - 3; row++) {
 8000e0c:	7b3b      	ldrb	r3, [r7, #12]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	733b      	strb	r3, [r7, #12]
 8000e12:	7b3b      	ldrb	r3, [r7, #12]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d9c8      	bls.n	8000daa <checkWinner+0xac>
	for(uint8_t col = 0; col < NUM_COLS; col++) {
 8000e18:	7b7b      	ldrb	r3, [r7, #13]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	737b      	strb	r3, [r7, #13]
 8000e1e:	7b7b      	ldrb	r3, [r7, #13]
 8000e20:	2b06      	cmp	r3, #6
 8000e22:	d9bf      	bls.n	8000da4 <checkWinner+0xa6>
			}
		}
	}

	/* Ascending Diagonal check */
	for(uint8_t col = 0; col < NUM_COLS - 3; col++) {
 8000e24:	2300      	movs	r3, #0
 8000e26:	72fb      	strb	r3, [r7, #11]
 8000e28:	e03f      	b.n	8000eaa <checkWinner+0x1ac>
		for(uint8_t row = 0; row < NUM_ROWS - 3; row++) {
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	72bb      	strb	r3, [r7, #10]
 8000e2e:	e036      	b.n	8000e9e <checkWinner+0x1a0>
			if(board[row][col] == player && board[row + 1][col + 1] == player && board[row + 2][col + 2] == player && board[row + 3][col + 3] == player) {
 8000e30:	7aba      	ldrb	r2, [r7, #10]
 8000e32:	4613      	mov	r3, r2
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	1a9b      	subs	r3, r3, r2
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	441a      	add	r2, r3
 8000e3c:	7afb      	ldrb	r3, [r7, #11]
 8000e3e:	5cd3      	ldrb	r3, [r2, r3]
 8000e40:	787a      	ldrb	r2, [r7, #1]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d128      	bne.n	8000e98 <checkWinner+0x19a>
 8000e46:	7abb      	ldrb	r3, [r7, #10]
 8000e48:	1c5a      	adds	r2, r3, #1
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	1a9b      	subs	r3, r3, r2
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	441a      	add	r2, r3
 8000e54:	7afb      	ldrb	r3, [r7, #11]
 8000e56:	3301      	adds	r3, #1
 8000e58:	5cd3      	ldrb	r3, [r2, r3]
 8000e5a:	787a      	ldrb	r2, [r7, #1]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d11b      	bne.n	8000e98 <checkWinner+0x19a>
 8000e60:	7aba      	ldrb	r2, [r7, #10]
 8000e62:	4613      	mov	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	1a9b      	subs	r3, r3, r2
 8000e68:	330e      	adds	r3, #14
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	441a      	add	r2, r3
 8000e6e:	7afb      	ldrb	r3, [r7, #11]
 8000e70:	3302      	adds	r3, #2
 8000e72:	5cd3      	ldrb	r3, [r2, r3]
 8000e74:	787a      	ldrb	r2, [r7, #1]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d10e      	bne.n	8000e98 <checkWinner+0x19a>
 8000e7a:	7aba      	ldrb	r2, [r7, #10]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	1a9b      	subs	r3, r3, r2
 8000e82:	3315      	adds	r3, #21
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	441a      	add	r2, r3
 8000e88:	7afb      	ldrb	r3, [r7, #11]
 8000e8a:	3303      	adds	r3, #3
 8000e8c:	5cd3      	ldrb	r3, [r2, r3]
 8000e8e:	787a      	ldrb	r2, [r7, #1]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d101      	bne.n	8000e98 <checkWinner+0x19a>
				return TRUE;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e052      	b.n	8000f3e <checkWinner+0x240>
		for(uint8_t row = 0; row < NUM_ROWS - 3; row++) {
 8000e98:	7abb      	ldrb	r3, [r7, #10]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	72bb      	strb	r3, [r7, #10]
 8000e9e:	7abb      	ldrb	r3, [r7, #10]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d9c5      	bls.n	8000e30 <checkWinner+0x132>
	for(uint8_t col = 0; col < NUM_COLS - 3; col++) {
 8000ea4:	7afb      	ldrb	r3, [r7, #11]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	72fb      	strb	r3, [r7, #11]
 8000eaa:	7afb      	ldrb	r3, [r7, #11]
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	d9bc      	bls.n	8000e2a <checkWinner+0x12c>
			}
		}
	}

	/* Descending Diagonal check*/
	for(uint8_t col = 0; col < NUM_COLS - 3; col++) {
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	727b      	strb	r3, [r7, #9]
 8000eb4:	e03f      	b.n	8000f36 <checkWinner+0x238>
		for(uint8_t row = 3; row < NUM_ROWS; row++) {
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	723b      	strb	r3, [r7, #8]
 8000eba:	e036      	b.n	8000f2a <checkWinner+0x22c>
			if(board[row][col] == player && board[row - 1][col + 1] == player && board[row - 2][col + 2] == player && board[row - 3][col + 3] == player) {
 8000ebc:	7a3a      	ldrb	r2, [r7, #8]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	1a9b      	subs	r3, r3, r2
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	441a      	add	r2, r3
 8000ec8:	7a7b      	ldrb	r3, [r7, #9]
 8000eca:	5cd3      	ldrb	r3, [r2, r3]
 8000ecc:	787a      	ldrb	r2, [r7, #1]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d128      	bne.n	8000f24 <checkWinner+0x226>
 8000ed2:	7a3a      	ldrb	r2, [r7, #8]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	1a9b      	subs	r3, r3, r2
 8000eda:	3b07      	subs	r3, #7
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	441a      	add	r2, r3
 8000ee0:	7a7b      	ldrb	r3, [r7, #9]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	5cd3      	ldrb	r3, [r2, r3]
 8000ee6:	787a      	ldrb	r2, [r7, #1]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d11b      	bne.n	8000f24 <checkWinner+0x226>
 8000eec:	7a3a      	ldrb	r2, [r7, #8]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	1a9b      	subs	r3, r3, r2
 8000ef4:	3b0e      	subs	r3, #14
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	441a      	add	r2, r3
 8000efa:	7a7b      	ldrb	r3, [r7, #9]
 8000efc:	3302      	adds	r3, #2
 8000efe:	5cd3      	ldrb	r3, [r2, r3]
 8000f00:	787a      	ldrb	r2, [r7, #1]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d10e      	bne.n	8000f24 <checkWinner+0x226>
 8000f06:	7a3a      	ldrb	r2, [r7, #8]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	1a9b      	subs	r3, r3, r2
 8000f0e:	3b15      	subs	r3, #21
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	441a      	add	r2, r3
 8000f14:	7a7b      	ldrb	r3, [r7, #9]
 8000f16:	3303      	adds	r3, #3
 8000f18:	5cd3      	ldrb	r3, [r2, r3]
 8000f1a:	787a      	ldrb	r2, [r7, #1]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d101      	bne.n	8000f24 <checkWinner+0x226>
				return TRUE;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e00c      	b.n	8000f3e <checkWinner+0x240>
		for(uint8_t row = 3; row < NUM_ROWS; row++) {
 8000f24:	7a3b      	ldrb	r3, [r7, #8]
 8000f26:	3301      	adds	r3, #1
 8000f28:	723b      	strb	r3, [r7, #8]
 8000f2a:	7a3b      	ldrb	r3, [r7, #8]
 8000f2c:	2b05      	cmp	r3, #5
 8000f2e:	d9c5      	bls.n	8000ebc <checkWinner+0x1be>
	for(uint8_t col = 0; col < NUM_COLS - 3; col++) {
 8000f30:	7a7b      	ldrb	r3, [r7, #9]
 8000f32:	3301      	adds	r3, #1
 8000f34:	727b      	strb	r3, [r7, #9]
 8000f36:	7a7b      	ldrb	r3, [r7, #9]
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d9bc      	bls.n	8000eb6 <checkWinner+0x1b8>
			}
		}
	}

	return FALSE;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <checkTie>:

void checkTie(void) {
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
	/* Tie condition check */
	for(uint8_t col = 0; col < NUM_COLS; col++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	e009      	b.n	8000f6c <checkTie+0x20>
		if(!gameBoard[NUM_ROWS - COIN_GAME_LOGIC_OFFSET][col]) {
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f88 <checkTie+0x3c>)
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d009      	beq.n	8000f7a <checkTie+0x2e>
	for(uint8_t col = 0; col < NUM_COLS; col++) {
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d9f2      	bls.n	8000f58 <checkTie+0xc>
			return;
		}
	}
	gameOver = TRUE;
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <checkTie+0x40>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	e000      	b.n	8000f7c <checkTie+0x30>
			return;
 8000f7a:	bf00      	nop
}
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200000a0 	.word	0x200000a0
 8000f8c:	20000095 	.word	0x20000095

08000f90 <playTurn>:
/* During human player turn, wait for touch screen input to select
 * where coin will drop. Between each input, redraw coin in position.
 * When button is pressed, coin will drop. This means we enable interrupts
 * for the button in this loop, then disable them if a coin can be placed.
 * */
void playTurn(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af04      	add	r7, sp, #16
	resetCoinPos();
 8000f96:	f7ff fd0b 	bl	80009b0 <resetCoinPos>

	if(playerTurn == YELLOW) {
 8000f9a:	4b45      	ldr	r3, [pc, #276]	@ (80010b0 <playTurn+0x120>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d11a      	bne.n	8000fd8 <playTurn+0x48>
		LCD_Display_Coin((gameCoin.col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_YELLOW);
 8000fa2:	4b44      	ldr	r3, [pc, #272]	@ (80010b4 <playTurn+0x124>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	461a      	mov	r2, r3
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	4a3f      	ldr	r2, [pc, #252]	@ (80010b4 <playTurn+0x124>)
 8000fb6:	8851      	ldrh	r1, [r2, #2]
 8000fb8:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fe63 	bl	8001c88 <LCD_Display_Coin>
		__NVIC_EnableIRQ(BUTTON_IRQ_NUM);
 8000fc2:	2006      	movs	r0, #6
 8000fc4:	f7ff fcba 	bl	800093c <__NVIC_EnableIRQ>
		while(!coinDropped) {
 8000fc8:	e001      	b.n	8000fce <playTurn+0x3e>
			checkIfUserMovedCoin();
 8000fca:	f7ff fd45 	bl	8000a58 <checkIfUserMovedCoin>
		while(!coinDropped) {
 8000fce:	4b3a      	ldr	r3, [pc, #232]	@ (80010b8 <playTurn+0x128>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0f9      	beq.n	8000fca <playTurn+0x3a>
				checkIfUserMovedCoin();
			}
		}
	}

}
 8000fd6:	e067      	b.n	80010a8 <playTurn+0x118>
		LCD_Display_Coin((gameCoin.col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, gameCoin.yPos, LCD_COLOR_RED);
 8000fd8:	4b36      	ldr	r3, [pc, #216]	@ (80010b4 <playTurn+0x124>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	4a32      	ldr	r2, [pc, #200]	@ (80010b4 <playTurn+0x124>)
 8000fec:	8851      	ldrh	r1, [r2, #2]
 8000fee:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fe48 	bl	8001c88 <LCD_Display_Coin>
		if(sessionGameMode == AI_MODE_SELECT) {
 8000ff8:	4b30      	ldr	r3, [pc, #192]	@ (80010bc <playTurn+0x12c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d145      	bne.n	800108c <playTurn+0xfc>
			utilityScore_t AIMove = alphaBeta(gameBoard, 0, MIN_SCORE, MAX_SCORE, -1, -1, RED, YELLOW);
 8001000:	2301      	movs	r3, #1
 8001002:	9303      	str	r3, [sp, #12]
 8001004:	2302      	movs	r3, #2
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	23ff      	movs	r3, #255	@ 0xff
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	23ff      	movs	r3, #255	@ 0xff
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	237f      	movs	r3, #127	@ 0x7f
 8001012:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8001016:	2100      	movs	r1, #0
 8001018:	4829      	ldr	r0, [pc, #164]	@ (80010c0 <playTurn+0x130>)
 800101a:	f000 f931 	bl	8001280 <alphaBeta>
 800101e:	4603      	mov	r3, r0
 8001020:	80bb      	strh	r3, [r7, #4]
			gameCoin.col = AIMove.col;
 8001022:	797a      	ldrb	r2, [r7, #5]
 8001024:	4b23      	ldr	r3, [pc, #140]	@ (80010b4 <playTurn+0x124>)
 8001026:	701a      	strb	r2, [r3, #0]
			if(canPlaceCoin(gameBoard, gameCoin.col)) {
 8001028:	4b22      	ldr	r3, [pc, #136]	@ (80010b4 <playTurn+0x124>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	4824      	ldr	r0, [pc, #144]	@ (80010c0 <playTurn+0x130>)
 8001030:	f7ff fdec 	bl	8000c0c <canPlaceCoin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d022      	beq.n	8001080 <playTurn+0xf0>
				placeCoin(gameBoard, gameCoin.row, gameCoin.col);
 800103a:	4b1e      	ldr	r3, [pc, #120]	@ (80010b4 <playTurn+0x124>)
 800103c:	785b      	ldrb	r3, [r3, #1]
 800103e:	4a1d      	ldr	r2, [pc, #116]	@ (80010b4 <playTurn+0x124>)
 8001040:	7812      	ldrb	r2, [r2, #0]
 8001042:	4619      	mov	r1, r3
 8001044:	481e      	ldr	r0, [pc, #120]	@ (80010c0 <playTurn+0x130>)
 8001046:	f7ff fd7b 	bl	8000b40 <placeCoin>
				LCD_Display_Coin((gameCoin.col + COIN_GAME_LOGIC_OFFSET) * BOARD_X_OFFSET, LCD_PIXEL_HEIGHT - BORDER_Y_OFFSET - (gameCoin.row + COIN_GAME_LOGIC_OFFSET) * BOARD_Y_OFFSET, LCD_COLOR_RED);
 800104a:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <playTurn+0x124>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	b29b      	uxth	r3, r3
 8001052:	461a      	mov	r2, r3
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	b298      	uxth	r0, r3
 800105c:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <playTurn+0x124>)
 800105e:	785b      	ldrb	r3, [r3, #1]
 8001060:	3301      	adds	r3, #1
 8001062:	b29b      	uxth	r3, r3
 8001064:	461a      	mov	r2, r3
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	b29b      	uxth	r3, r3
 800106e:	f203 133b 	addw	r3, r3, #315	@ 0x13b
 8001072:	b29b      	uxth	r3, r3
 8001074:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001078:	4619      	mov	r1, r3
 800107a:	f000 fe05 	bl	8001c88 <LCD_Display_Coin>
}
 800107e:	e013      	b.n	80010a8 <playTurn+0x118>
			    LCD_Clear(0, LCD_COLOR_RED);
 8001080:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8001084:	2000      	movs	r0, #0
 8001086:	f000 fd1d 	bl	8001ac4 <LCD_Clear>
}
 800108a:	e00d      	b.n	80010a8 <playTurn+0x118>
		else if(sessionGameMode == TWO_PLAYER_SELECT){
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <playTurn+0x12c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d109      	bne.n	80010a8 <playTurn+0x118>
			__NVIC_EnableIRQ(BUTTON_IRQ_NUM);
 8001094:	2006      	movs	r0, #6
 8001096:	f7ff fc51 	bl	800093c <__NVIC_EnableIRQ>
			while(!coinDropped) {
 800109a:	e001      	b.n	80010a0 <playTurn+0x110>
				checkIfUserMovedCoin();
 800109c:	f7ff fcdc 	bl	8000a58 <checkIfUserMovedCoin>
			while(!coinDropped) {
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <playTurn+0x128>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0f9      	beq.n	800109c <playTurn+0x10c>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000000 	.word	0x20000000
 80010b4:	200000d0 	.word	0x200000d0
 80010b8:	20000096 	.word	0x20000096
 80010bc:	20000094 	.word	0x20000094
 80010c0:	200000a0 	.word	0x200000a0

080010c4 <playGame>:


void playGame(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

	LCD_Draw_Board_Structure();
 80010c8:	f000 fda7 	bl	8001c1a <LCD_Draw_Board_Structure>
    HAL_TIM_Base_Start_IT(&htim2);
 80010cc:	4814      	ldr	r0, [pc, #80]	@ (8001120 <playGame+0x5c>)
 80010ce:	f005 fdcb 	bl	8006c68 <HAL_TIM_Base_Start_IT>
	while(!gameOver) {
 80010d2:	e01b      	b.n	800110c <playGame+0x48>
		playTurn();
 80010d4:	f7ff ff5c 	bl	8000f90 <playTurn>
		if(checkWinner(gameBoard, gameCoin.row, gameCoin.col, playerTurn)) {
 80010d8:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <playGame+0x60>)
 80010da:	7859      	ldrb	r1, [r3, #1]
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <playGame+0x60>)
 80010de:	781a      	ldrb	r2, [r3, #0]
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <playGame+0x64>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4811      	ldr	r0, [pc, #68]	@ (800112c <playGame+0x68>)
 80010e6:	f7ff fe0a 	bl	8000cfe <checkWinner>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <playGame+0x32>
			incrementWinCount();
 80010f0:	f7ff fc8e 	bl	8000a10 <incrementWinCount>
 80010f4:	e001      	b.n	80010fa <playGame+0x36>
		}
		else {
			checkTie();
 80010f6:	f7ff ff29 	bl	8000f4c <checkTie>
		}
		playerTurn = (playerTurn == YELLOW) ? RED : YELLOW;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <playGame+0x64>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d101      	bne.n	8001106 <playGame+0x42>
 8001102:	2202      	movs	r2, #2
 8001104:	e000      	b.n	8001108 <playGame+0x44>
 8001106:	2201      	movs	r2, #1
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <playGame+0x64>)
 800110a:	701a      	strb	r2, [r3, #0]
	while(!gameOver) {
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <playGame+0x6c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0df      	beq.n	80010d4 <playGame+0x10>
	}
    HAL_TIM_Base_Stop_IT(&htim2);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <playGame+0x5c>)
 8001116:	f005 fe17 	bl	8006d48 <HAL_TIM_Base_Stop_IT>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20025b78 	.word	0x20025b78
 8001124:	200000d0 	.word	0x200000d0
 8001128:	20000000 	.word	0x20000000
 800112c:	200000a0 	.word	0x200000a0
 8001130:	20000095 	.word	0x20000095

08001134 <getScoreOfPosition>:


int8_t getScoreOfPosition(uint8_t board[NUM_ROWS][NUM_COLS], uint8_t row, uint8_t col, uint8_t player) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af02      	add	r7, sp, #8
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	4608      	mov	r0, r1
 800113e:	4611      	mov	r1, r2
 8001140:	461a      	mov	r2, r3
 8001142:	4603      	mov	r3, r0
 8001144:	70fb      	strb	r3, [r7, #3]
 8001146:	460b      	mov	r3, r1
 8001148:	70bb      	strb	r3, [r7, #2]
 800114a:	4613      	mov	r3, r2
 800114c:	707b      	strb	r3, [r7, #1]

	if(checkWinner(board, row, col, player)) {
 800114e:	787b      	ldrb	r3, [r7, #1]
 8001150:	78ba      	ldrb	r2, [r7, #2]
 8001152:	78f9      	ldrb	r1, [r7, #3]
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff fdd2 	bl	8000cfe <checkWinner>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <getScoreOfPosition+0x30>
		return MAX_SCORE;
 8001160:	237f      	movs	r3, #127	@ 0x7f
 8001162:	e086      	b.n	8001272 <getScoreOfPosition+0x13e>
	}

	int8_t score = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	73bb      	strb	r3, [r7, #14]

	/* Horizontal Scores */
	score += getScoreByDirection(board, row, col, 0, 1, player);
 8001168:	78ba      	ldrb	r2, [r7, #2]
 800116a:	78f9      	ldrb	r1, [r7, #3]
 800116c:	787b      	ldrb	r3, [r7, #1]
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	2301      	movs	r3, #1
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2300      	movs	r3, #0
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff fd70 	bl	8000c5c <getScoreByDirection>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	7bbb      	ldrb	r3, [r7, #14]
 8001182:	4413      	add	r3, r2
 8001184:	b2db      	uxtb	r3, r3
 8001186:	73bb      	strb	r3, [r7, #14]
	score += getScoreByDirection(board, row, col, 0, -1, player);
 8001188:	78ba      	ldrb	r2, [r7, #2]
 800118a:	78f9      	ldrb	r1, [r7, #3]
 800118c:	787b      	ldrb	r3, [r7, #1]
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	23ff      	movs	r3, #255	@ 0xff
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2300      	movs	r3, #0
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff fd60 	bl	8000c5c <getScoreByDirection>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	4413      	add	r3, r2
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	73bb      	strb	r3, [r7, #14]

	/* Vertical Score */
	score += getScoreByDirection(board, row, col, -1, 0, player);
 80011a8:	78ba      	ldrb	r2, [r7, #2]
 80011aa:	78f9      	ldrb	r1, [r7, #3]
 80011ac:	787b      	ldrb	r3, [r7, #1]
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	2300      	movs	r3, #0
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	23ff      	movs	r3, #255	@ 0xff
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fd50 	bl	8000c5c <getScoreByDirection>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	7bbb      	ldrb	r3, [r7, #14]
 80011c2:	4413      	add	r3, r2
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	73bb      	strb	r3, [r7, #14]

	/* Descending Diagonal Score */
	score += getScoreByDirection(board, row, col, 1, -1, player);
 80011c8:	78ba      	ldrb	r2, [r7, #2]
 80011ca:	78f9      	ldrb	r1, [r7, #3]
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	23ff      	movs	r3, #255	@ 0xff
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2301      	movs	r3, #1
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fd40 	bl	8000c5c <getScoreByDirection>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	4413      	add	r3, r2
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	73bb      	strb	r3, [r7, #14]
	score += getScoreByDirection(board, row, col, -1, 1, player);
 80011e8:	78ba      	ldrb	r2, [r7, #2]
 80011ea:	78f9      	ldrb	r1, [r7, #3]
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	2301      	movs	r3, #1
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	23ff      	movs	r3, #255	@ 0xff
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fd30 	bl	8000c5c <getScoreByDirection>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	4413      	add	r3, r2
 8001204:	b2db      	uxtb	r3, r3
 8001206:	73bb      	strb	r3, [r7, #14]

	/* Ascending Diagonal Score */
	score += getScoreByDirection(board, row, col, 1, 1, player);
 8001208:	78ba      	ldrb	r2, [r7, #2]
 800120a:	78f9      	ldrb	r1, [r7, #3]
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	2301      	movs	r3, #1
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2301      	movs	r3, #1
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff fd20 	bl	8000c5c <getScoreByDirection>
 800121c:	4603      	mov	r3, r0
 800121e:	461a      	mov	r2, r3
 8001220:	7bbb      	ldrb	r3, [r7, #14]
 8001222:	4413      	add	r3, r2
 8001224:	b2db      	uxtb	r3, r3
 8001226:	73bb      	strb	r3, [r7, #14]
	score += getScoreByDirection(board, row, col, -1, -1, player);
 8001228:	78ba      	ldrb	r2, [r7, #2]
 800122a:	78f9      	ldrb	r1, [r7, #3]
 800122c:	787b      	ldrb	r3, [r7, #1]
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	23ff      	movs	r3, #255	@ 0xff
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	23ff      	movs	r3, #255	@ 0xff
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fd10 	bl	8000c5c <getScoreByDirection>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	4413      	add	r3, r2
 8001244:	b2db      	uxtb	r3, r3
 8001246:	73bb      	strb	r3, [r7, #14]

	/* Tie condition check */
	for(uint8_t col = 0; col < NUM_COLS; col++) {
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e00c      	b.n	8001268 <getScoreOfPosition+0x134>
		if(!gameBoard[NUM_ROWS - COIN_GAME_LOGIC_OFFSET][col]) {
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <getScoreOfPosition+0x148>)
 8001252:	4413      	add	r3, r2
 8001254:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <getScoreOfPosition+0x12e>
			return score;
 800125c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001260:	e007      	b.n	8001272 <getScoreOfPosition+0x13e>
	for(uint8_t col = 0; col < NUM_COLS; col++) {
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	3301      	adds	r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b06      	cmp	r3, #6
 800126c:	d9ef      	bls.n	800124e <getScoreOfPosition+0x11a>
		}
	}

	return TIE_SCORE;
 800126e:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200000a0 	.word	0x200000a0

08001280 <alphaBeta>:


/* MiniMax algorithm with alpha-beta pruning. Maximizing player
 * will always be Red in this context, as that will be the AI.
 */
utilityScore_t alphaBeta(uint8_t board[NUM_ROWS][NUM_COLS], uint8_t depth, int8_t alpha, int8_t beta, uint8_t row, uint8_t col, uint8_t playerToMove, uint8_t prevPlayer) {
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b099      	sub	sp, #100	@ 0x64
 8001284:	af04      	add	r7, sp, #16
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	4608      	mov	r0, r1
 800128a:	4611      	mov	r1, r2
 800128c:	461a      	mov	r2, r3
 800128e:	4603      	mov	r3, r0
 8001290:	70fb      	strb	r3, [r7, #3]
 8001292:	460b      	mov	r3, r1
 8001294:	70bb      	strb	r3, [r7, #2]
 8001296:	4613      	mov	r3, r2
 8001298:	707b      	strb	r3, [r7, #1]

	utilityScore_t scoreAndMove = { .col = 0, .score = 0 };
 800129a:	2300      	movs	r3, #0
 800129c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 80012a0:	2300      	movs	r3, #0
 80012a2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

	if(row != -1) {
		scoreAndMove.score = getScoreOfPosition(board, row, col, prevPlayer);
 80012a6:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80012aa:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 80012ae:	f897 1068 	ldrb.w	r1, [r7, #104]	@ 0x68
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ff3e 	bl	8001134 <getScoreOfPosition>
 80012b8:	4603      	mov	r3, r0
 80012ba:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

		/* Calculate utility of the terminal node in our minimax tree. */
		if(depth == MAX_DEPTH_SEARCH || scoreAndMove.score == MAX_SCORE || scoreAndMove.score == TIE_SCORE) {
 80012be:	78fb      	ldrb	r3, [r7, #3]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d003      	beq.n	80012cc <alphaBeta+0x4c>
 80012c4:	f997 3040 	ldrsb.w	r3, [r7, #64]	@ 0x40
 80012c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80012ca:	d11c      	bne.n	8001306 <alphaBeta+0x86>
			/* Player is maximizing, so just return the score calculated. */
			if(prevPlayer == RED) {
 80012cc:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d104      	bne.n	80012de <alphaBeta+0x5e>

				return scoreAndMove;
 80012d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80012d8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80012dc:	e104      	b.n	80014e8 <alphaBeta+0x268>
			}

			/* Enemy player won, so set the weight heavily low. */
			if(scoreAndMove.score == MAX_SCORE) {
 80012de:	f997 3040 	ldrsb.w	r3, [r7, #64]	@ 0x40
 80012e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80012e4:	d102      	bne.n	80012ec <alphaBeta+0x6c>

				scoreAndMove.score = MIN_SCORE;
 80012e6:	2380      	movs	r3, #128	@ 0x80
 80012e8:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
			}

			scoreAndMove.score = -scoreAndMove.score;
 80012ec:	f997 3040 	ldrsb.w	r3, [r7, #64]	@ 0x40
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	425b      	negs	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
			return scoreAndMove;
 80012fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001300:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8001304:	e0f0      	b.n	80014e8 <alphaBeta+0x268>
		}
	}

	/* If maximizing and not terminal, search for the maximum in this branch. */
	if(playerToMove == RED) {
 8001306:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800130a:	2b02      	cmp	r3, #2
 800130c:	d174      	bne.n	80013f8 <alphaBeta+0x178>
		/* Set to min score possible to find max score of this branch */
		scoreAndMove.score = MIN_SCORE;
 800130e:	2380      	movs	r3, #128	@ 0x80
 8001310:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
		uint8_t boardCopy[NUM_ROWS][NUM_COLS];

		for(int col = 0; col < NUM_COLS; col++) {
 8001314:	2300      	movs	r3, #0
 8001316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001318:	e06a      	b.n	80013f0 <alphaBeta+0x170>
			if(canPlaceCoin(board, col)) {
 800131a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4619      	mov	r1, r3
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff fc73 	bl	8000c0c <canPlaceCoin>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d05e      	beq.n	80013ea <alphaBeta+0x16a>
				uint8_t row = gameCoin.row;
 800132c:	4b75      	ldr	r3, [pc, #468]	@ (8001504 <alphaBeta+0x284>)
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
				memcpy(boardCopy, board, NUM_ROWS * NUM_COLS * sizeof(uint8_t));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	461c      	mov	r4, r3
 8001338:	f107 060c 	add.w	r6, r7, #12
 800133c:	f104 0c20 	add.w	ip, r4, #32
 8001340:	4635      	mov	r5, r6
 8001342:	4623      	mov	r3, r4
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	6859      	ldr	r1, [r3, #4]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800134e:	3410      	adds	r4, #16
 8001350:	3610      	adds	r6, #16
 8001352:	4564      	cmp	r4, ip
 8001354:	d1f4      	bne.n	8001340 <alphaBeta+0xc0>
 8001356:	4633      	mov	r3, r6
 8001358:	4622      	mov	r2, r4
 800135a:	6810      	ldr	r0, [r2, #0]
 800135c:	6851      	ldr	r1, [r2, #4]
 800135e:	c303      	stmia	r3!, {r0, r1}
 8001360:	8912      	ldrh	r2, [r2, #8]
 8001362:	801a      	strh	r2, [r3, #0]
				placeCoin(boardCopy, row, col);
 8001364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001366:	b2da      	uxtb	r2, r3
 8001368:	f897 1046 	ldrb.w	r1, [r7, #70]	@ 0x46
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fbe5 	bl	8000b40 <placeCoin>
				utilityScore_t branchScore = alphaBeta(boardCopy, depth + 1, alpha, beta, row, col, YELLOW, RED);
 8001376:	78fb      	ldrb	r3, [r7, #3]
 8001378:	3301      	adds	r3, #1
 800137a:	b2d9      	uxtb	r1, r3
 800137c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f997 4001 	ldrsb.w	r4, [r7, #1]
 8001384:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8001388:	f107 000c 	add.w	r0, r7, #12
 800138c:	2502      	movs	r5, #2
 800138e:	9503      	str	r5, [sp, #12]
 8001390:	2501      	movs	r5, #1
 8001392:	9502      	str	r5, [sp, #8]
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	4623      	mov	r3, r4
 800139e:	f7ff ff6f 	bl	8001280 <alphaBeta>
 80013a2:	4603      	mov	r3, r0
 80013a4:	87bb      	strh	r3, [r7, #60]	@ 0x3c

				if(branchScore.score > scoreAndMove.score) {
 80013a6:	f997 203c 	ldrsb.w	r2, [r7, #60]	@ 0x3c
 80013aa:	f997 3040 	ldrsb.w	r3, [r7, #64]	@ 0x40
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dd10      	ble.n	80013d4 <alphaBeta+0x154>
					scoreAndMove.score = branchScore.score;
 80013b2:	f997 303c 	ldrsb.w	r3, [r7, #60]	@ 0x3c
 80013b6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
					scoreAndMove.col = col;
 80013ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
					if(scoreAndMove.score > alpha) {
 80013c2:	f997 3040 	ldrsb.w	r3, [r7, #64]	@ 0x40
 80013c6:	f997 2002 	ldrsb.w	r2, [r7, #2]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	da02      	bge.n	80013d4 <alphaBeta+0x154>
						alpha = scoreAndMove.score;
 80013ce:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80013d2:	70bb      	strb	r3, [r7, #2]
					}
				}

				if(alpha >= beta) {
 80013d4:	f997 2002 	ldrsb.w	r2, [r7, #2]
 80013d8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80013dc:	429a      	cmp	r2, r3
 80013de:	db04      	blt.n	80013ea <alphaBeta+0x16a>
					return scoreAndMove;
 80013e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80013e4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80013e8:	e07e      	b.n	80014e8 <alphaBeta+0x268>
		for(int col = 0; col < NUM_COLS; col++) {
 80013ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013ec:	3301      	adds	r3, #1
 80013ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	dd91      	ble.n	800131a <alphaBeta+0x9a>
 80013f6:	e073      	b.n	80014e0 <alphaBeta+0x260>
	}

	/* Else, minimizing score in this branch */
	else {
		/* Set to max score possible to find min score of this branch */
		scoreAndMove.score = MAX_SCORE;
 80013f8:	237f      	movs	r3, #127	@ 0x7f
 80013fa:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
		uint8_t boardCopy[NUM_ROWS][NUM_COLS];

		for(int col = 0; col < NUM_COLS; col++) {
 80013fe:	2300      	movs	r3, #0
 8001400:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001402:	e06a      	b.n	80014da <alphaBeta+0x25a>
			if(canPlaceCoin(board, col)) {
 8001404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001406:	b2db      	uxtb	r3, r3
 8001408:	4619      	mov	r1, r3
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fbfe 	bl	8000c0c <canPlaceCoin>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d05e      	beq.n	80014d4 <alphaBeta+0x254>
				uint8_t row = gameCoin.row;
 8001416:	4b3b      	ldr	r3, [pc, #236]	@ (8001504 <alphaBeta+0x284>)
 8001418:	785b      	ldrb	r3, [r3, #1]
 800141a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				memcpy(boardCopy, board, NUM_ROWS * NUM_COLS * sizeof(uint8_t));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	461c      	mov	r4, r3
 8001422:	f107 060c 	add.w	r6, r7, #12
 8001426:	f104 0c20 	add.w	ip, r4, #32
 800142a:	4635      	mov	r5, r6
 800142c:	4623      	mov	r3, r4
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	6859      	ldr	r1, [r3, #4]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001438:	3410      	adds	r4, #16
 800143a:	3610      	adds	r6, #16
 800143c:	4564      	cmp	r4, ip
 800143e:	d1f4      	bne.n	800142a <alphaBeta+0x1aa>
 8001440:	4633      	mov	r3, r6
 8001442:	4622      	mov	r2, r4
 8001444:	6810      	ldr	r0, [r2, #0]
 8001446:	6851      	ldr	r1, [r2, #4]
 8001448:	c303      	stmia	r3!, {r0, r1}
 800144a:	8912      	ldrh	r2, [r2, #8]
 800144c:	801a      	strh	r2, [r3, #0]
				placeCoin(boardCopy, row, col);
 800144e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001450:	b2da      	uxtb	r2, r3
 8001452:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fb70 	bl	8000b40 <placeCoin>
				utilityScore_t branchScore = alphaBeta(boardCopy, depth + 1, alpha, beta, row, col, RED, YELLOW);
 8001460:	78fb      	ldrb	r3, [r7, #3]
 8001462:	3301      	adds	r3, #1
 8001464:	b2d9      	uxtb	r1, r3
 8001466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001468:	b2db      	uxtb	r3, r3
 800146a:	f997 4001 	ldrsb.w	r4, [r7, #1]
 800146e:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8001472:	f107 000c 	add.w	r0, r7, #12
 8001476:	2501      	movs	r5, #1
 8001478:	9503      	str	r5, [sp, #12]
 800147a:	2502      	movs	r5, #2
 800147c:	9502      	str	r5, [sp, #8]
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	4623      	mov	r3, r4
 8001488:	f7ff fefa 	bl	8001280 <alphaBeta>
 800148c:	4603      	mov	r3, r0
 800148e:	873b      	strh	r3, [r7, #56]	@ 0x38

				if(branchScore.score < scoreAndMove.score) {
 8001490:	f997 2038 	ldrsb.w	r2, [r7, #56]	@ 0x38
 8001494:	f997 3040 	ldrsb.w	r3, [r7, #64]	@ 0x40
 8001498:	429a      	cmp	r2, r3
 800149a:	da10      	bge.n	80014be <alphaBeta+0x23e>
					scoreAndMove.score = branchScore.score;
 800149c:	f997 3038 	ldrsb.w	r3, [r7, #56]	@ 0x38
 80014a0:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
					scoreAndMove.col = col;
 80014a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
					if(scoreAndMove.score < beta) {
 80014ac:	f997 3040 	ldrsb.w	r3, [r7, #64]	@ 0x40
 80014b0:	f997 2001 	ldrsb.w	r2, [r7, #1]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dd02      	ble.n	80014be <alphaBeta+0x23e>
						beta = scoreAndMove.score;
 80014b8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80014bc:	707b      	strb	r3, [r7, #1]
					}
				}

				if(beta <= alpha) {
 80014be:	f997 2001 	ldrsb.w	r2, [r7, #1]
 80014c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dc04      	bgt.n	80014d4 <alphaBeta+0x254>
					return scoreAndMove;
 80014ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80014ce:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80014d2:	e009      	b.n	80014e8 <alphaBeta+0x268>
		for(int col = 0; col < NUM_COLS; col++) {
 80014d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014d6:	3301      	adds	r3, #1
 80014d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80014da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014dc:	2b06      	cmp	r3, #6
 80014de:	dd91      	ble.n	8001404 <alphaBeta+0x184>
				}
			}
		}
	}

	return scoreAndMove;
 80014e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80014e4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
}
 80014e8:	2300      	movs	r3, #0
 80014ea:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80014ee:	f362 0307 	bfi	r3, r2, #0, #8
 80014f2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80014f6:	f362 230f 	bfi	r3, r2, #8, #8
 80014fa:	4618      	mov	r0, r3
 80014fc:	3754      	adds	r7, #84	@ 0x54
 80014fe:	46bd      	mov	sp, r7
 8001500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001502:	bf00      	nop
 8001504:	200000d0 	.word	0x200000d0

08001508 <clearPendingEXTI>:
	if(IRQNumber < 32) {
		NVIC->ICPR[0] = (1 << IRQNumber);
	}
}

void clearPendingEXTI(uint8_t pinNumber) {
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]

	EXTI->PR |= (1 << pinNumber);
 8001512:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <clearPendingEXTI+0x2c>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	79fa      	ldrb	r2, [r7, #7]
 8001518:	2101      	movs	r1, #1
 800151a:	fa01 f202 	lsl.w	r2, r1, r2
 800151e:	4611      	mov	r1, r2
 8001520:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <clearPendingEXTI+0x2c>)
 8001522:	430b      	orrs	r3, r1
 8001524:	6153      	str	r3, [r2, #20]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40013c00 	.word	0x40013c00

08001538 <clearPendingTIM2>:

void clearPendingTIM2() {
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

	TIM2->SR &= ~(CLEAR_TIM << TIM_UIF_OFFSET);
 800153c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	6113      	str	r3, [r2, #16]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	@ 0x30
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
 8001562:	4b5a      	ldr	r3, [pc, #360]	@ (80016cc <LCD_GPIO_Init+0x174>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	4a59      	ldr	r2, [pc, #356]	@ (80016cc <LCD_GPIO_Init+0x174>)
 8001568:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800156c:	6453      	str	r3, [r2, #68]	@ 0x44
 800156e:	4b57      	ldr	r3, [pc, #348]	@ (80016cc <LCD_GPIO_Init+0x174>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	4b53      	ldr	r3, [pc, #332]	@ (80016cc <LCD_GPIO_Init+0x174>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a52      	ldr	r2, [pc, #328]	@ (80016cc <LCD_GPIO_Init+0x174>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b50      	ldr	r3, [pc, #320]	@ (80016cc <LCD_GPIO_Init+0x174>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b4c      	ldr	r3, [pc, #304]	@ (80016cc <LCD_GPIO_Init+0x174>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a4b      	ldr	r2, [pc, #300]	@ (80016cc <LCD_GPIO_Init+0x174>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b49      	ldr	r3, [pc, #292]	@ (80016cc <LCD_GPIO_Init+0x174>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b45      	ldr	r3, [pc, #276]	@ (80016cc <LCD_GPIO_Init+0x174>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a44      	ldr	r2, [pc, #272]	@ (80016cc <LCD_GPIO_Init+0x174>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b42      	ldr	r3, [pc, #264]	@ (80016cc <LCD_GPIO_Init+0x174>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	4b3e      	ldr	r3, [pc, #248]	@ (80016cc <LCD_GPIO_Init+0x174>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a3d      	ldr	r2, [pc, #244]	@ (80016cc <LCD_GPIO_Init+0x174>)
 80015d8:	f043 0308 	orr.w	r3, r3, #8
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b3b      	ldr	r3, [pc, #236]	@ (80016cc <LCD_GPIO_Init+0x174>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	4b37      	ldr	r3, [pc, #220]	@ (80016cc <LCD_GPIO_Init+0x174>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a36      	ldr	r2, [pc, #216]	@ (80016cc <LCD_GPIO_Init+0x174>)
 80015f4:	f043 0320 	orr.w	r3, r3, #32
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b34      	ldr	r3, [pc, #208]	@ (80016cc <LCD_GPIO_Init+0x174>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0320 	and.w	r3, r3, #32
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	4b30      	ldr	r3, [pc, #192]	@ (80016cc <LCD_GPIO_Init+0x174>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	4a2f      	ldr	r2, [pc, #188]	@ (80016cc <LCD_GPIO_Init+0x174>)
 8001610:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001614:	6313      	str	r3, [r2, #48]	@ 0x30
 8001616:	4b2d      	ldr	r3, [pc, #180]	@ (80016cc <LCD_GPIO_Init+0x174>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001622:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001626:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001630:	2302      	movs	r3, #2
 8001632:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001634:	230e      	movs	r3, #14
 8001636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	4824      	ldr	r0, [pc, #144]	@ (80016d0 <LCD_GPIO_Init+0x178>)
 8001640:	f002 fb5c 	bl	8003cfc <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001644:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001648:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	4619      	mov	r1, r3
 8001650:	4820      	ldr	r0, [pc, #128]	@ (80016d4 <LCD_GPIO_Init+0x17c>)
 8001652:	f002 fb53 	bl	8003cfc <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001656:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800165a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	481d      	ldr	r0, [pc, #116]	@ (80016d8 <LCD_GPIO_Init+0x180>)
 8001664:	f002 fb4a 	bl	8003cfc <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001668:	2348      	movs	r3, #72	@ 0x48
 800166a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	481a      	ldr	r0, [pc, #104]	@ (80016dc <LCD_GPIO_Init+0x184>)
 8001674:	f002 fb42 	bl	8003cfc <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001678:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800167c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	4816      	ldr	r0, [pc, #88]	@ (80016e0 <LCD_GPIO_Init+0x188>)
 8001686:	f002 fb39 	bl	8003cfc <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800168a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800168e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4619      	mov	r1, r3
 8001696:	4813      	ldr	r0, [pc, #76]	@ (80016e4 <LCD_GPIO_Init+0x18c>)
 8001698:	f002 fb30 	bl	8003cfc <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800169c:	2303      	movs	r3, #3
 800169e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80016a0:	2309      	movs	r3, #9
 80016a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	480a      	ldr	r0, [pc, #40]	@ (80016d4 <LCD_GPIO_Init+0x17c>)
 80016ac:	f002 fb26 	bl	8003cfc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80016b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4809      	ldr	r0, [pc, #36]	@ (80016e4 <LCD_GPIO_Init+0x18c>)
 80016be:	f002 fb1d 	bl	8003cfc <HAL_GPIO_Init>
}
 80016c2:	bf00      	nop
 80016c4:	3730      	adds	r7, #48	@ 0x30
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000
 80016d4:	40020400 	.word	0x40020400
 80016d8:	40020800 	.word	0x40020800
 80016dc:	40020c00 	.word	0x40020c00
 80016e0:	40021400 	.word	0x40021400
 80016e4:	40021800 	.word	0x40021800

080016e8 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b090      	sub	sp, #64	@ 0x40
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80016f6:	23f0      	movs	r3, #240	@ 0xf0
 80016f8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80016fe:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001702:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001704:	2302      	movs	r3, #2
 8001706:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001708:	23ff      	movs	r3, #255	@ 0xff
 800170a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001710:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001714:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001716:	2305      	movs	r3, #5
 8001718:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001720:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <LTCD_Layer_Init+0x78>)
 8001722:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001724:	23f0      	movs	r3, #240	@ 0xf0
 8001726:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001728:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800172c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001740:	79fa      	ldrb	r2, [r7, #7]
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	4619      	mov	r1, r3
 8001748:	4806      	ldr	r0, [pc, #24]	@ (8001764 <LTCD_Layer_Init+0x7c>)
 800174a:	f003 ff19 	bl	8005580 <HAL_LTDC_ConfigLayer>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001754:	f000 f9f8 	bl	8001b48 <LCD_Error_Handler>
	}
}
 8001758:	bf00      	nop
 800175a:	3740      	adds	r7, #64	@ 0x40
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200001b8 	.word	0x200001b8
 8001764:	200000d4 	.word	0x200000d4

08001768 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800176c:	4b2a      	ldr	r3, [pc, #168]	@ (8001818 <LTCD__Init+0xb0>)
 800176e:	4a2b      	ldr	r2, [pc, #172]	@ (800181c <LTCD__Init+0xb4>)
 8001770:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001772:	4b29      	ldr	r3, [pc, #164]	@ (8001818 <LTCD__Init+0xb0>)
 8001774:	2209      	movs	r2, #9
 8001776:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001778:	4b27      	ldr	r3, [pc, #156]	@ (8001818 <LTCD__Init+0xb0>)
 800177a:	2201      	movs	r2, #1
 800177c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800177e:	4b26      	ldr	r3, [pc, #152]	@ (8001818 <LTCD__Init+0xb0>)
 8001780:	221d      	movs	r2, #29
 8001782:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001784:	4b24      	ldr	r3, [pc, #144]	@ (8001818 <LTCD__Init+0xb0>)
 8001786:	2203      	movs	r2, #3
 8001788:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800178a:	4b23      	ldr	r3, [pc, #140]	@ (8001818 <LTCD__Init+0xb0>)
 800178c:	f240 120d 	movw	r2, #269	@ 0x10d
 8001790:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001792:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <LTCD__Init+0xb0>)
 8001794:	f240 1243 	movw	r2, #323	@ 0x143
 8001798:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800179a:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <LTCD__Init+0xb0>)
 800179c:	f240 1217 	movw	r2, #279	@ 0x117
 80017a0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80017a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001818 <LTCD__Init+0xb0>)
 80017a4:	f240 1247 	movw	r2, #327	@ 0x147
 80017a8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80017aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <LTCD__Init+0xb0>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80017b2:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <LTCD__Init+0xb0>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80017ba:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <LTCD__Init+0xb0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80017c2:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <LTCD__Init+0xb8>)
 80017c4:	2208      	movs	r2, #8
 80017c6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80017c8:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <LTCD__Init+0xb8>)
 80017ca:	22c0      	movs	r2, #192	@ 0xc0
 80017cc:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80017ce:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <LTCD__Init+0xb8>)
 80017d0:	2204      	movs	r2, #4
 80017d2:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80017d4:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <LTCD__Init+0xb8>)
 80017d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017da:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80017dc:	4810      	ldr	r0, [pc, #64]	@ (8001820 <LTCD__Init+0xb8>)
 80017de:	f004 fd29 	bl	8006234 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80017e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <LTCD__Init+0xb0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <LTCD__Init+0xb0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <LTCD__Init+0xb0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017f4:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <LTCD__Init+0xb0>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80017fa:	f7ff fead 	bl	8001558 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80017fe:	4806      	ldr	r0, [pc, #24]	@ (8001818 <LTCD__Init+0xb0>)
 8001800:	f003 fdee 	bl	80053e0 <HAL_LTDC_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800180a:	f000 f99d 	bl	8001b48 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800180e:	f000 fbf7 	bl	8002000 <ili9341_Init>
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200000d4 	.word	0x200000d4
 800181c:	40016800 	.word	0x40016800
 8001820:	2000017c 	.word	0x2000017c

08001824 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	80fb      	strh	r3, [r7, #6]
 800182e:	460b      	mov	r3, r1
 8001830:	80bb      	strh	r3, [r7, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001836:	88ba      	ldrh	r2, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	461a      	mov	r2, r3
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	4413      	add	r3, r2
 8001846:	4905      	ldr	r1, [pc, #20]	@ (800185c <LCD_Draw_Pixel+0x38>)
 8001848:	887a      	ldrh	r2, [r7, #2]
 800184a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	200001b8 	.word	0x200001b8

08001860 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I don't think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	4604      	mov	r4, r0
 8001868:	4608      	mov	r0, r1
 800186a:	4611      	mov	r1, r2
 800186c:	461a      	mov	r2, r3
 800186e:	4623      	mov	r3, r4
 8001870:	80fb      	strh	r3, [r7, #6]
 8001872:	4603      	mov	r3, r0
 8001874:	80bb      	strh	r3, [r7, #4]
 8001876:	460b      	mov	r3, r1
 8001878:	807b      	strh	r3, [r7, #2]
 800187a:	4613      	mov	r3, r2
 800187c:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	425b      	negs	r3, r3
 8001882:	b29b      	uxth	r3, r3
 8001884:	81fb      	strh	r3, [r7, #14]
 8001886:	e034      	b.n	80018f2 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001888:	887b      	ldrh	r3, [r7, #2]
 800188a:	425b      	negs	r3, r3
 800188c:	b29b      	uxth	r3, r3
 800188e:	81bb      	strh	r3, [r7, #12]
 8001890:	e024      	b.n	80018dc <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8001892:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001896:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800189a:	fb03 f202 	mul.w	r2, r3, r2
 800189e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018a2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80018a6:	fb01 f303 	mul.w	r3, r1, r3
 80018aa:	441a      	add	r2, r3
 80018ac:	887b      	ldrh	r3, [r7, #2]
 80018ae:	8879      	ldrh	r1, [r7, #2]
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	429a      	cmp	r2, r3
 80018b6:	dc0b      	bgt.n	80018d0 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 80018b8:	89ba      	ldrh	r2, [r7, #12]
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	4413      	add	r3, r2
 80018be:	b298      	uxth	r0, r3
 80018c0:	89fa      	ldrh	r2, [r7, #14]
 80018c2:	88bb      	ldrh	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	883a      	ldrh	r2, [r7, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7ff ffaa 	bl	8001824 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 80018d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	3301      	adds	r3, #1
 80018d8:	b29b      	uxth	r3, r3
 80018da:	81bb      	strh	r3, [r7, #12]
 80018dc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	ddd5      	ble.n	8001892 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 80018e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3301      	adds	r3, #1
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	81fb      	strh	r3, [r7, #14]
 80018f2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	ddc5      	ble.n	8001888 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bd90      	pop	{r4, r7, pc}

08001906 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001906:	b590      	push	{r4, r7, lr}
 8001908:	b085      	sub	sp, #20
 800190a:	af00      	add	r7, sp, #0
 800190c:	4604      	mov	r4, r0
 800190e:	4608      	mov	r0, r1
 8001910:	4611      	mov	r1, r2
 8001912:	461a      	mov	r2, r3
 8001914:	4623      	mov	r3, r4
 8001916:	80fb      	strh	r3, [r7, #6]
 8001918:	4603      	mov	r3, r0
 800191a:	80bb      	strh	r3, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
 8001920:	4613      	mov	r3, r2
 8001922:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001924:	2300      	movs	r3, #0
 8001926:	81fb      	strh	r3, [r7, #14]
 8001928:	e00b      	b.n	8001942 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 800192a:	89fa      	ldrh	r2, [r7, #14]
 800192c:	88bb      	ldrh	r3, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	b299      	uxth	r1, r3
 8001932:	883a      	ldrh	r2, [r7, #0]
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff74 	bl	8001824 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 800193c:	89fb      	ldrh	r3, [r7, #14]
 800193e:	3301      	adds	r3, #1
 8001940:	81fb      	strh	r3, [r7, #14]
 8001942:	89fa      	ldrh	r2, [r7, #14]
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	429a      	cmp	r2, r3
 8001948:	d3ef      	bcc.n	800192a <LCD_Draw_Vertical_Line+0x24>
  }
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bd90      	pop	{r4, r7, pc}

08001954 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color) {
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	4604      	mov	r4, r0
 800195c:	4608      	mov	r0, r1
 800195e:	4611      	mov	r1, r2
 8001960:	461a      	mov	r2, r3
 8001962:	4623      	mov	r3, r4
 8001964:	80fb      	strh	r3, [r7, #6]
 8001966:	4603      	mov	r3, r0
 8001968:	80bb      	strh	r3, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	807b      	strh	r3, [r7, #2]
 800196e:	4613      	mov	r3, r2
 8001970:	803b      	strh	r3, [r7, #0]

	  for (uint16_t i = 0; i < len; i++)
 8001972:	2300      	movs	r3, #0
 8001974:	81fb      	strh	r3, [r7, #14]
 8001976:	e00b      	b.n	8001990 <LCD_Draw_Horizontal_Line+0x3c>
	  {
		  LCD_Draw_Pixel(x + i, y, color);
 8001978:	88fa      	ldrh	r2, [r7, #6]
 800197a:	89fb      	ldrh	r3, [r7, #14]
 800197c:	4413      	add	r3, r2
 800197e:	b29b      	uxth	r3, r3
 8001980:	883a      	ldrh	r2, [r7, #0]
 8001982:	88b9      	ldrh	r1, [r7, #4]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff4d 	bl	8001824 <LCD_Draw_Pixel>
	  for (uint16_t i = 0; i < len; i++)
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	3301      	adds	r3, #1
 800198e:	81fb      	strh	r3, [r7, #14]
 8001990:	89fa      	ldrh	r2, [r7, #14]
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	429a      	cmp	r2, r3
 8001996:	d3ef      	bcc.n	8001978 <LCD_Draw_Horizontal_Line+0x24>
	  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd90      	pop	{r4, r7, pc}
	...

080019a4 <LCD_Draw_Char>:
	}
}

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	603a      	str	r2, [r7, #0]
 80019ae:	80fb      	strh	r3, [r7, #6]
 80019b0:	460b      	mov	r3, r1
 80019b2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e04c      	b.n	8001a5c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	e03f      	b.n	8001a48 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	4b27      	ldr	r3, [pc, #156]	@ (8001a74 <LCD_Draw_Char+0xd0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	889b      	ldrh	r3, [r3, #4]
 80019da:	4a27      	ldr	r2, [pc, #156]	@ (8001a78 <LCD_Draw_Char+0xd4>)
 80019dc:	fba2 2303 	umull	r2, r3, r2, r3
 80019e0:	08db      	lsrs	r3, r3, #3
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	2280      	movs	r2, #128	@ 0x80
 80019e8:	409a      	lsls	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	fa42 f303 	asr.w	r3, r2, r3
 80019f0:	400b      	ands	r3, r1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d104      	bne.n	8001a00 <LCD_Draw_Char+0x5c>
 80019f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a74 <LCD_Draw_Char+0xd0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	889b      	ldrh	r3, [r3, #4]
 80019fc:	2b0c      	cmp	r3, #12
 80019fe:	d920      	bls.n	8001a42 <LCD_Draw_Char+0x9e>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	fa42 f303 	asr.w	r3, r2, r3
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d104      	bne.n	8001a24 <LCD_Draw_Char+0x80>
 8001a1a:	4b16      	ldr	r3, [pc, #88]	@ (8001a74 <LCD_Draw_Char+0xd0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	889b      	ldrh	r3, [r3, #4]
 8001a20:	2b0c      	cmp	r3, #12
 8001a22:	d80e      	bhi.n	8001a42 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overwrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b298      	uxth	r0, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	88bb      	ldrh	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4a10      	ldr	r2, [pc, #64]	@ (8001a7c <LCD_Draw_Char+0xd8>)
 8001a3a:	8812      	ldrh	r2, [r2, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff fef1 	bl	8001824 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	3301      	adds	r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <LCD_Draw_Char+0xd0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	889b      	ldrh	r3, [r3, #4]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d3b8      	bcc.n	80019c8 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <LCD_Draw_Char+0xd0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	88db      	ldrh	r3, [r3, #6]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d3ab      	bcc.n	80019c2 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200001ac 	.word	0x200001ac
 8001a78:	aaaaaaab 	.word	0xaaaaaaab
 8001a7c:	20000002 	.word	0x20000002

08001a80 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	80fb      	strh	r3, [r7, #6]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	80bb      	strh	r3, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	3b20      	subs	r3, #32
 8001a96:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <LCD_DisplayChar+0x40>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	4907      	ldr	r1, [pc, #28]	@ (8001ac0 <LCD_DisplayChar+0x40>)
 8001aa2:	6809      	ldr	r1, [r1, #0]
 8001aa4:	88c9      	ldrh	r1, [r1, #6]
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	441a      	add	r2, r3
 8001aae:	88b9      	ldrh	r1, [r7, #4]
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff76 	bl	80019a4 <LCD_Draw_Char>
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200001ac 	.word	0x200001ac

08001ac4 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	460a      	mov	r2, r1
 8001ace:	71fb      	strb	r3, [r7, #7]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10e      	bne.n	8001af8 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	e007      	b.n	8001af0 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001ae0:	4908      	ldr	r1, [pc, #32]	@ (8001b04 <LCD_Clear+0x40>)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	88ba      	ldrh	r2, [r7, #4]
 8001ae6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3301      	adds	r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001af6:	d3f3      	bcc.n	8001ae0 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	200001b8 	.word	0x200001b8

08001b08 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001b12:	4a04      	ldr	r2, [pc, #16]	@ (8001b24 <LCD_SetTextColor+0x1c>)
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	8013      	strh	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	20000002 	.word	0x20000002

08001b28 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001b30:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <LCD_SetFont+0x1c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	200001ac 	.word	0x200001ac

08001b48 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <LCD_Error_Handler+0x8>

08001b54 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001b58:	f001 fb8f 	bl	800327a <STMPE811_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d001      	beq.n	8001b66 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialization
 8001b62:	bf00      	nop
 8001b64:	e7fd      	b.n	8001b62 <InitializeLCDTouch+0xe>
  }
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f001 fc39 	bl	80033ea <STMPE811_ReadTouch>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <LCD_Connect_Four_Init>:
#endif // COMPILE_TOUCH_FUNCTIONS

/* Functions added for Connect Four gameplay */

/* Initializes the text color and font for the Connect Four game. */
void LCD_Connect_Four_Init(void) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff ffbd 	bl	8001b08 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001b8e:	4802      	ldr	r0, [pc, #8]	@ (8001b98 <LCD_Connect_Four_Init+0x14>)
 8001b90:	f7ff ffca 	bl	8001b28 <LCD_SetFont>
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000004 	.word	0x20000004

08001b9c <LCD_Draw_Game_Button>:

void LCD_Draw_Game_Button(uint8_t xLower, uint8_t len, uint8_t yLower, uint8_t height, uint16_t color) {
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	4608      	mov	r0, r1
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4623      	mov	r3, r4
 8001bac:	71fb      	strb	r3, [r7, #7]
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71bb      	strb	r3, [r7, #6]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	717b      	strb	r3, [r7, #5]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	713b      	strb	r3, [r7, #4]
	LCD_Draw_Vertical_Line(xLower, yLower, height, color);
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	b298      	uxth	r0, r3
 8001bbe:	797b      	ldrb	r3, [r7, #5]
 8001bc0:	b299      	uxth	r1, r3
 8001bc2:	793b      	ldrb	r3, [r7, #4]
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	8b3b      	ldrh	r3, [r7, #24]
 8001bc8:	f7ff fe9d 	bl	8001906 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(xLower + len, yLower, height, color);
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	79bb      	ldrb	r3, [r7, #6]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b298      	uxth	r0, r3
 8001bd8:	797b      	ldrb	r3, [r7, #5]
 8001bda:	b299      	uxth	r1, r3
 8001bdc:	793b      	ldrb	r3, [r7, #4]
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	8b3b      	ldrh	r3, [r7, #24]
 8001be2:	f7ff fe90 	bl	8001906 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(xLower, yLower, len, color);
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	b298      	uxth	r0, r3
 8001bea:	797b      	ldrb	r3, [r7, #5]
 8001bec:	b299      	uxth	r1, r3
 8001bee:	79bb      	ldrb	r3, [r7, #6]
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	8b3b      	ldrh	r3, [r7, #24]
 8001bf4:	f7ff feae 	bl	8001954 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(xLower, yLower + height, len, color);
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	b298      	uxth	r0, r3
 8001bfc:	797b      	ldrb	r3, [r7, #5]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	793b      	ldrb	r3, [r7, #4]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	b299      	uxth	r1, r3
 8001c08:	79bb      	ldrb	r3, [r7, #6]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	8b3b      	ldrh	r3, [r7, #24]
 8001c0e:	f7ff fea1 	bl	8001954 <LCD_Draw_Horizontal_Line>
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd90      	pop	{r4, r7, pc}

08001c1a <LCD_Draw_Board_Structure>:

void LCD_Draw_Board_Structure(void) {
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0

	for(int i = 0; i <= NUM_COLS; i++) {
 8001c20:	2300      	movs	r3, #0
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	e010      	b.n	8001c48 <LCD_Draw_Board_Structure+0x2e>

		LCD_Draw_Vertical_Line(BOARD_LEFT_BOUND + (i * BOARD_SQUARE_LENGTH), BOARD_TOP_BOUND, BOARD_BOTTOM_BOUND - BOARD_TOP_BOUND, LCD_COLOR_BLACK);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	0112      	lsls	r2, r2, #4
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	330f      	adds	r3, #15
 8001c36:	b298      	uxth	r0, r3
 8001c38:	2300      	movs	r3, #0
 8001c3a:	22be      	movs	r2, #190	@ 0xbe
 8001c3c:	216e      	movs	r1, #110	@ 0x6e
 8001c3e:	f7ff fe62 	bl	8001906 <LCD_Draw_Vertical_Line>
	for(int i = 0; i <= NUM_COLS; i++) {
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3301      	adds	r3, #1
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b07      	cmp	r3, #7
 8001c4c:	ddeb      	ble.n	8001c26 <LCD_Draw_Board_Structure+0xc>
	}

	for(int j = 0; j <= NUM_ROWS; j++) {
 8001c4e:	2300      	movs	r3, #0
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	e011      	b.n	8001c78 <LCD_Draw_Board_Structure+0x5e>
		LCD_Draw_Horizontal_Line(BOARD_LEFT_BOUND, BOARD_BOTTOM_BOUND - (j * BOARD_SQUARE_LENGTH), BOARD_RIGHT_BOUND - BOARD_LEFT_BOUND, LCD_COLOR_BLACK);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001c66:	b299      	uxth	r1, r3
 8001c68:	2300      	movs	r3, #0
 8001c6a:	22d2      	movs	r2, #210	@ 0xd2
 8001c6c:	200f      	movs	r0, #15
 8001c6e:	f7ff fe71 	bl	8001954 <LCD_Draw_Horizontal_Line>
	for(int j = 0; j <= NUM_ROWS; j++) {
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	ddea      	ble.n	8001c54 <LCD_Draw_Board_Structure+0x3a>
	}

}
 8001c7e:	bf00      	nop
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <LCD_Display_Coin>:

void LCD_Display_Coin(uint16_t xPos, uint16_t yPos, uint16_t color) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
 8001c92:	460b      	mov	r3, r1
 8001c94:	80bb      	strh	r3, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	807b      	strh	r3, [r7, #2]

	LCD_Draw_Circle_Fill(xPos, yPos, COIN_RADIUS, color);
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	88b9      	ldrh	r1, [r7, #4]
 8001c9e:	88f8      	ldrh	r0, [r7, #6]
 8001ca0:	220c      	movs	r2, #12
 8001ca2:	f7ff fddd 	bl	8001860 <LCD_Draw_Circle_Fill>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <displayStartScreen>:

void displayStartScreen(void) {
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af02      	add	r7, sp, #8
	HAL_Delay(1000);
 8001cb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cb8:	f001 ff16 	bl	8003ae8 <HAL_Delay>

	/* Connect Four */
	LCD_DisplayChar(69, 30, 'C');
 8001cbc:	2243      	movs	r2, #67	@ 0x43
 8001cbe:	211e      	movs	r1, #30
 8001cc0:	2045      	movs	r0, #69	@ 0x45
 8001cc2:	f7ff fedd 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(85, 28, 'o');
 8001cc6:	226f      	movs	r2, #111	@ 0x6f
 8001cc8:	211c      	movs	r1, #28
 8001cca:	2055      	movs	r0, #85	@ 0x55
 8001ccc:	f7ff fed8 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(100, 31, 'n');
 8001cd0:	226e      	movs	r2, #110	@ 0x6e
 8001cd2:	211f      	movs	r1, #31
 8001cd4:	2064      	movs	r0, #100	@ 0x64
 8001cd6:	f7ff fed3 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(115, 27, 'n');
 8001cda:	226e      	movs	r2, #110	@ 0x6e
 8001cdc:	211b      	movs	r1, #27
 8001cde:	2073      	movs	r0, #115	@ 0x73
 8001ce0:	f7ff fece 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(130, 31, 'e');
 8001ce4:	2265      	movs	r2, #101	@ 0x65
 8001ce6:	211f      	movs	r1, #31
 8001ce8:	2082      	movs	r0, #130	@ 0x82
 8001cea:	f7ff fec9 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(145, 29, 'c');
 8001cee:	2263      	movs	r2, #99	@ 0x63
 8001cf0:	211d      	movs	r1, #29
 8001cf2:	2091      	movs	r0, #145	@ 0x91
 8001cf4:	f7ff fec4 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(159, 32, 't');
 8001cf8:	2274      	movs	r2, #116	@ 0x74
 8001cfa:	2120      	movs	r1, #32
 8001cfc:	209f      	movs	r0, #159	@ 0x9f
 8001cfe:	f7ff febf 	bl	8001a80 <LCD_DisplayChar>

	LCD_DisplayChar(95, 60, 'F');
 8001d02:	2246      	movs	r2, #70	@ 0x46
 8001d04:	213c      	movs	r1, #60	@ 0x3c
 8001d06:	205f      	movs	r0, #95	@ 0x5f
 8001d08:	f7ff feba 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(110, 60, 'o');
 8001d0c:	226f      	movs	r2, #111	@ 0x6f
 8001d0e:	213c      	movs	r1, #60	@ 0x3c
 8001d10:	206e      	movs	r0, #110	@ 0x6e
 8001d12:	f7ff feb5 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(125, 60, 'u');
 8001d16:	2275      	movs	r2, #117	@ 0x75
 8001d18:	213c      	movs	r1, #60	@ 0x3c
 8001d1a:	207d      	movs	r0, #125	@ 0x7d
 8001d1c:	f7ff feb0 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(140, 60, 'r');
 8001d20:	2272      	movs	r2, #114	@ 0x72
 8001d22:	213c      	movs	r1, #60	@ 0x3c
 8001d24:	208c      	movs	r0, #140	@ 0x8c
 8001d26:	f7ff feab 	bl	8001a80 <LCD_DisplayChar>

	/* "Button" display for playing against an AI */
	LCD_Draw_Game_Button(BUTTON_ONE_X_LOWER, BUTTON_ONE_X_UPPER - BUTTON_ONE_X_LOWER, BUTTON_ONE_Y_LOWER, BUTTON_ONE_Y_UPPER - BUTTON_ONE_Y_LOWER, LCD_COLOR_MAGENTA);
 8001d2a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2332      	movs	r3, #50	@ 0x32
 8001d32:	2278      	movs	r2, #120	@ 0x78
 8001d34:	216e      	movs	r1, #110	@ 0x6e
 8001d36:	2041      	movs	r0, #65	@ 0x41
 8001d38:	f7ff ff30 	bl	8001b9c <LCD_Draw_Game_Button>
	LCD_DisplayChar(82, 135, 'A');
 8001d3c:	2241      	movs	r2, #65	@ 0x41
 8001d3e:	2187      	movs	r1, #135	@ 0x87
 8001d40:	2052      	movs	r0, #82	@ 0x52
 8001d42:	f7ff fe9d 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(92, 135, 'I');
 8001d46:	2249      	movs	r2, #73	@ 0x49
 8001d48:	2187      	movs	r1, #135	@ 0x87
 8001d4a:	205c      	movs	r0, #92	@ 0x5c
 8001d4c:	f7ff fe98 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(107, 135, 'M');
 8001d50:	224d      	movs	r2, #77	@ 0x4d
 8001d52:	2187      	movs	r1, #135	@ 0x87
 8001d54:	206b      	movs	r0, #107	@ 0x6b
 8001d56:	f7ff fe93 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(122, 135, 'o');
 8001d5a:	226f      	movs	r2, #111	@ 0x6f
 8001d5c:	2187      	movs	r1, #135	@ 0x87
 8001d5e:	207a      	movs	r0, #122	@ 0x7a
 8001d60:	f7ff fe8e 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(133, 135, 'd');
 8001d64:	2264      	movs	r2, #100	@ 0x64
 8001d66:	2187      	movs	r1, #135	@ 0x87
 8001d68:	2085      	movs	r0, #133	@ 0x85
 8001d6a:	f7ff fe89 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(144, 135, 'e');
 8001d6e:	2265      	movs	r2, #101	@ 0x65
 8001d70:	2187      	movs	r1, #135	@ 0x87
 8001d72:	2090      	movs	r0, #144	@ 0x90
 8001d74:	f7ff fe84 	bl	8001a80 <LCD_DisplayChar>

	/* "Button" display for two player mode */
	LCD_Draw_Game_Button(BUTTON_TWO_X_LOWER, BUTTON_TWO_X_UPPER - BUTTON_TWO_X_LOWER, BUTTON_TWO_Y_LOWER, BUTTON_TWO_Y_UPPER - BUTTON_TWO_Y_LOWER, LCD_COLOR_MAGENTA);
 8001d78:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2332      	movs	r3, #50	@ 0x32
 8001d80:	22d2      	movs	r2, #210	@ 0xd2
 8001d82:	216e      	movs	r1, #110	@ 0x6e
 8001d84:	2041      	movs	r0, #65	@ 0x41
 8001d86:	f7ff ff09 	bl	8001b9c <LCD_Draw_Game_Button>
	LCD_DisplayChar(77, 225, '2');
 8001d8a:	2232      	movs	r2, #50	@ 0x32
 8001d8c:	21e1      	movs	r1, #225	@ 0xe1
 8001d8e:	204d      	movs	r0, #77	@ 0x4d
 8001d90:	f7ff fe76 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(97, 225, 'P');
 8001d94:	2250      	movs	r2, #80	@ 0x50
 8001d96:	21e1      	movs	r1, #225	@ 0xe1
 8001d98:	2061      	movs	r0, #97	@ 0x61
 8001d9a:	f7ff fe71 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(107, 225, 'l');
 8001d9e:	226c      	movs	r2, #108	@ 0x6c
 8001da0:	21e1      	movs	r1, #225	@ 0xe1
 8001da2:	206b      	movs	r0, #107	@ 0x6b
 8001da4:	f7ff fe6c 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(116, 225, 'a');
 8001da8:	2261      	movs	r2, #97	@ 0x61
 8001daa:	21e1      	movs	r1, #225	@ 0xe1
 8001dac:	2074      	movs	r0, #116	@ 0x74
 8001dae:	f7ff fe67 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(126, 225, 'y');
 8001db2:	2279      	movs	r2, #121	@ 0x79
 8001db4:	21e1      	movs	r1, #225	@ 0xe1
 8001db6:	207e      	movs	r0, #126	@ 0x7e
 8001db8:	f7ff fe62 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(138, 225, 'e');
 8001dbc:	2265      	movs	r2, #101	@ 0x65
 8001dbe:	21e1      	movs	r1, #225	@ 0xe1
 8001dc0:	208a      	movs	r0, #138	@ 0x8a
 8001dc2:	f7ff fe5d 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(149, 225, 'r');
 8001dc6:	2272      	movs	r2, #114	@ 0x72
 8001dc8:	21e1      	movs	r1, #225	@ 0xe1
 8001dca:	2095      	movs	r0, #149	@ 0x95
 8001dcc:	f7ff fe58 	bl	8001a80 <LCD_DisplayChar>

}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <clearFloatingCoin>:


void clearFloatingCoin(uint16_t xPos, uint16_t yPos) {
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	460a      	mov	r2, r1
 8001de0:	80fb      	strh	r3, [r7, #6]
 8001de2:	4613      	mov	r3, r2
 8001de4:	80bb      	strh	r3, [r7, #4]

	LCD_Draw_Circle_Fill(xPos, yPos, COIN_RADIUS, LCD_COLOR_WHITE);
 8001de6:	88b9      	ldrh	r1, [r7, #4]
 8001de8:	88f8      	ldrh	r0, [r7, #6]
 8001dea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dee:	220c      	movs	r2, #12
 8001df0:	f7ff fd36 	bl	8001860 <LCD_Draw_Circle_Fill>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <displayStatsScreen>:

void displayStatsScreen(void) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af02      	add	r7, sp, #8

	HAL_Delay(750);
 8001e02:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001e06:	f001 fe6f 	bl	8003ae8 <HAL_Delay>
	LCD_DisplayChar(69, 20, 'S');
 8001e0a:	2253      	movs	r2, #83	@ 0x53
 8001e0c:	2114      	movs	r1, #20
 8001e0e:	2045      	movs	r0, #69	@ 0x45
 8001e10:	f7ff fe36 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(85, 18, 'c');
 8001e14:	2263      	movs	r2, #99	@ 0x63
 8001e16:	2112      	movs	r1, #18
 8001e18:	2055      	movs	r0, #85	@ 0x55
 8001e1a:	f7ff fe31 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(100, 21, 'o');
 8001e1e:	226f      	movs	r2, #111	@ 0x6f
 8001e20:	2115      	movs	r1, #21
 8001e22:	2064      	movs	r0, #100	@ 0x64
 8001e24:	f7ff fe2c 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(115, 17, 'r');
 8001e28:	2272      	movs	r2, #114	@ 0x72
 8001e2a:	2111      	movs	r1, #17
 8001e2c:	2073      	movs	r0, #115	@ 0x73
 8001e2e:	f7ff fe27 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(130, 21, 'e');
 8001e32:	2265      	movs	r2, #101	@ 0x65
 8001e34:	2115      	movs	r1, #21
 8001e36:	2082      	movs	r0, #130	@ 0x82
 8001e38:	f7ff fe22 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(145, 19, 's');
 8001e3c:	2273      	movs	r2, #115	@ 0x73
 8001e3e:	2113      	movs	r1, #19
 8001e40:	2091      	movs	r0, #145	@ 0x91
 8001e42:	f7ff fe1d 	bl	8001a80 <LCD_DisplayChar>

	LCD_DisplayChar(40, 70, 'Y');
 8001e46:	2259      	movs	r2, #89	@ 0x59
 8001e48:	2146      	movs	r1, #70	@ 0x46
 8001e4a:	2028      	movs	r0, #40	@ 0x28
 8001e4c:	f7ff fe18 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(53, 70, 'e');
 8001e50:	2265      	movs	r2, #101	@ 0x65
 8001e52:	2146      	movs	r1, #70	@ 0x46
 8001e54:	2035      	movs	r0, #53	@ 0x35
 8001e56:	f7ff fe13 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(63, 70, 'l');
 8001e5a:	226c      	movs	r2, #108	@ 0x6c
 8001e5c:	2146      	movs	r1, #70	@ 0x46
 8001e5e:	203f      	movs	r0, #63	@ 0x3f
 8001e60:	f7ff fe0e 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(70, 70, 'l');
 8001e64:	226c      	movs	r2, #108	@ 0x6c
 8001e66:	2146      	movs	r1, #70	@ 0x46
 8001e68:	2046      	movs	r0, #70	@ 0x46
 8001e6a:	f7ff fe09 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(79, 70, 'o');
 8001e6e:	226f      	movs	r2, #111	@ 0x6f
 8001e70:	2146      	movs	r1, #70	@ 0x46
 8001e72:	204f      	movs	r0, #79	@ 0x4f
 8001e74:	f7ff fe04 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(95, 70, 'w');
 8001e78:	2277      	movs	r2, #119	@ 0x77
 8001e7a:	2146      	movs	r1, #70	@ 0x46
 8001e7c:	205f      	movs	r0, #95	@ 0x5f
 8001e7e:	f7ff fdff 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(110, 70, ':');
 8001e82:	223a      	movs	r2, #58	@ 0x3a
 8001e84:	2146      	movs	r1, #70	@ 0x46
 8001e86:	206e      	movs	r0, #110	@ 0x6e
 8001e88:	f7ff fdfa 	bl	8001a80 <LCD_DisplayChar>
	drawFromUnsignedInteger(130, 70, yellowWinCount);
 8001e8c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f8c <displayStatsScreen+0x190>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	2146      	movs	r1, #70	@ 0x46
 8001e94:	2082      	movs	r0, #130	@ 0x82
 8001e96:	f000 f87f 	bl	8001f98 <drawFromUnsignedInteger>

	LCD_DisplayChar(67, 95, 'R');
 8001e9a:	2252      	movs	r2, #82	@ 0x52
 8001e9c:	215f      	movs	r1, #95	@ 0x5f
 8001e9e:	2043      	movs	r0, #67	@ 0x43
 8001ea0:	f7ff fdee 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(82, 95, 'e');
 8001ea4:	2265      	movs	r2, #101	@ 0x65
 8001ea6:	215f      	movs	r1, #95	@ 0x5f
 8001ea8:	2052      	movs	r0, #82	@ 0x52
 8001eaa:	f7ff fde9 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(95, 95, 'd');
 8001eae:	2264      	movs	r2, #100	@ 0x64
 8001eb0:	215f      	movs	r1, #95	@ 0x5f
 8001eb2:	205f      	movs	r0, #95	@ 0x5f
 8001eb4:	f7ff fde4 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(110, 95, ':');
 8001eb8:	223a      	movs	r2, #58	@ 0x3a
 8001eba:	215f      	movs	r1, #95	@ 0x5f
 8001ebc:	206e      	movs	r0, #110	@ 0x6e
 8001ebe:	f7ff fddf 	bl	8001a80 <LCD_DisplayChar>
	drawFromUnsignedInteger(130, 95, redWinCount);
 8001ec2:	4b33      	ldr	r3, [pc, #204]	@ (8001f90 <displayStatsScreen+0x194>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	215f      	movs	r1, #95	@ 0x5f
 8001eca:	2082      	movs	r0, #130	@ 0x82
 8001ecc:	f000 f864 	bl	8001f98 <drawFromUnsignedInteger>

	LCD_DisplayChar(30, 140, 'T');
 8001ed0:	2254      	movs	r2, #84	@ 0x54
 8001ed2:	218c      	movs	r1, #140	@ 0x8c
 8001ed4:	201e      	movs	r0, #30
 8001ed6:	f7ff fdd3 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(40, 140, 'i');
 8001eda:	2269      	movs	r2, #105	@ 0x69
 8001edc:	218c      	movs	r1, #140	@ 0x8c
 8001ede:	2028      	movs	r0, #40	@ 0x28
 8001ee0:	f7ff fdce 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(50, 140, 'm');
 8001ee4:	226d      	movs	r2, #109	@ 0x6d
 8001ee6:	218c      	movs	r1, #140	@ 0x8c
 8001ee8:	2032      	movs	r0, #50	@ 0x32
 8001eea:	f7ff fdc9 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(65, 140, 'e');
 8001eee:	2265      	movs	r2, #101	@ 0x65
 8001ef0:	218c      	movs	r1, #140	@ 0x8c
 8001ef2:	2041      	movs	r0, #65	@ 0x41
 8001ef4:	f7ff fdc4 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(77, 140, '(');
 8001ef8:	2228      	movs	r2, #40	@ 0x28
 8001efa:	218c      	movs	r1, #140	@ 0x8c
 8001efc:	204d      	movs	r0, #77	@ 0x4d
 8001efe:	f7ff fdbf 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(86, 140, 's');
 8001f02:	2273      	movs	r2, #115	@ 0x73
 8001f04:	218c      	movs	r1, #140	@ 0x8c
 8001f06:	2056      	movs	r0, #86	@ 0x56
 8001f08:	f7ff fdba 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(95, 140, ')');
 8001f0c:	2229      	movs	r2, #41	@ 0x29
 8001f0e:	218c      	movs	r1, #140	@ 0x8c
 8001f10:	205f      	movs	r0, #95	@ 0x5f
 8001f12:	f7ff fdb5 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(110, 140, ':');
 8001f16:	223a      	movs	r2, #58	@ 0x3a
 8001f18:	218c      	movs	r1, #140	@ 0x8c
 8001f1a:	206e      	movs	r0, #110	@ 0x6e
 8001f1c:	f7ff fdb0 	bl	8001a80 <LCD_DisplayChar>
	drawFromUnsignedInteger(130, 140, numSecondsElapsedInGame);
 8001f20:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <displayStatsScreen+0x198>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	218c      	movs	r1, #140	@ 0x8c
 8001f28:	2082      	movs	r0, #130	@ 0x82
 8001f2a:	f000 f835 	bl	8001f98 <drawFromUnsignedInteger>


	/* "Button" display for two player mode */
	LCD_Draw_Game_Button(BUTTON_TWO_X_LOWER, BUTTON_TWO_X_UPPER - BUTTON_TWO_X_LOWER, BUTTON_TWO_Y_LOWER, BUTTON_TWO_Y_UPPER - BUTTON_TWO_Y_LOWER, LCD_COLOR_MAGENTA);
 8001f2e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2332      	movs	r3, #50	@ 0x32
 8001f36:	22d2      	movs	r2, #210	@ 0xd2
 8001f38:	216e      	movs	r1, #110	@ 0x6e
 8001f3a:	2041      	movs	r0, #65	@ 0x41
 8001f3c:	f7ff fe2e 	bl	8001b9c <LCD_Draw_Game_Button>
	LCD_DisplayChar(75, 225, 'O');
 8001f40:	224f      	movs	r2, #79	@ 0x4f
 8001f42:	21e1      	movs	r1, #225	@ 0xe1
 8001f44:	204b      	movs	r0, #75	@ 0x4b
 8001f46:	f7ff fd9b 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(90, 225, 'n');
 8001f4a:	226e      	movs	r2, #110	@ 0x6e
 8001f4c:	21e1      	movs	r1, #225	@ 0xe1
 8001f4e:	205a      	movs	r0, #90	@ 0x5a
 8001f50:	f7ff fd96 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(102, 225, 'e');
 8001f54:	2265      	movs	r2, #101	@ 0x65
 8001f56:	21e1      	movs	r1, #225	@ 0xe1
 8001f58:	2066      	movs	r0, #102	@ 0x66
 8001f5a:	f7ff fd91 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(120, 225, 'M');
 8001f5e:	224d      	movs	r2, #77	@ 0x4d
 8001f60:	21e1      	movs	r1, #225	@ 0xe1
 8001f62:	2078      	movs	r0, #120	@ 0x78
 8001f64:	f7ff fd8c 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(135, 225, 'o');
 8001f68:	226f      	movs	r2, #111	@ 0x6f
 8001f6a:	21e1      	movs	r1, #225	@ 0xe1
 8001f6c:	2087      	movs	r0, #135	@ 0x87
 8001f6e:	f7ff fd87 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(145, 225, 'r');
 8001f72:	2272      	movs	r2, #114	@ 0x72
 8001f74:	21e1      	movs	r1, #225	@ 0xe1
 8001f76:	2091      	movs	r0, #145	@ 0x91
 8001f78:	f7ff fd82 	bl	8001a80 <LCD_DisplayChar>
	LCD_DisplayChar(153, 225, 'e');
 8001f7c:	2265      	movs	r2, #101	@ 0x65
 8001f7e:	21e1      	movs	r1, #225	@ 0xe1
 8001f80:	2099      	movs	r0, #153	@ 0x99
 8001f82:	f7ff fd7d 	bl	8001a80 <LCD_DisplayChar>


}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	200000ca 	.word	0x200000ca
 8001f90:	200000cb 	.word	0x200000cb
 8001f94:	200000cc 	.word	0x200000cc

08001f98 <drawFromUnsignedInteger>:

void drawFromUnsignedInteger(uint16_t xPos, uint16_t yPos, uint32_t number) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	603a      	str	r2, [r7, #0]
 8001fa2:	80fb      	strh	r3, [r7, #6]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	80bb      	strh	r3, [r7, #4]

	sprintf(buffer, "%lu", number);
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	4913      	ldr	r1, [pc, #76]	@ (8001ff8 <drawFromUnsignedInteger+0x60>)
 8001fac:	4813      	ldr	r0, [pc, #76]	@ (8001ffc <drawFromUnsignedInteger+0x64>)
 8001fae:	f005 f983 	bl	80072b8 <siprintf>
	uint8_t i = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
	while(buffer[i]) {
 8001fb6:	e014      	b.n	8001fe2 <drawFromUnsignedInteger+0x4a>
		LCD_DisplayChar(xPos + (i * CHARACTER_OFFSET), yPos, buffer[i]);
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	0052      	lsls	r2, r2, #1
 8001fc0:	441a      	add	r2, r3
 8001fc2:	0092      	lsls	r2, r2, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	4413      	add	r3, r2
 8001fcc:	b298      	uxth	r0, r3
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ffc <drawFromUnsignedInteger+0x64>)
 8001fd2:	5cd2      	ldrb	r2, [r2, r3]
 8001fd4:	88bb      	ldrh	r3, [r7, #4]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f7ff fd52 	bl	8001a80 <LCD_DisplayChar>
		i++;
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
	while(buffer[i]) {
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	4a05      	ldr	r2, [pc, #20]	@ (8001ffc <drawFromUnsignedInteger+0x64>)
 8001fe6:	5cd3      	ldrb	r3, [r2, r3]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1e5      	bne.n	8001fb8 <drawFromUnsignedInteger+0x20>
	}

}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	08007c10 	.word	0x08007c10
 8001ffc:	200001b0 	.word	0x200001b0

08002000 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002004:	f000 f9fe 	bl	8002404 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8002008:	20ca      	movs	r0, #202	@ 0xca
 800200a:	f000 f943 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800200e:	20c3      	movs	r0, #195	@ 0xc3
 8002010:	f000 f94d 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8002014:	2008      	movs	r0, #8
 8002016:	f000 f94a 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800201a:	2050      	movs	r0, #80	@ 0x50
 800201c:	f000 f947 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8002020:	20cf      	movs	r0, #207	@ 0xcf
 8002022:	f000 f937 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8002026:	2000      	movs	r0, #0
 8002028:	f000 f941 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 800202c:	20c1      	movs	r0, #193	@ 0xc1
 800202e:	f000 f93e 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8002032:	2030      	movs	r0, #48	@ 0x30
 8002034:	f000 f93b 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8002038:	20ed      	movs	r0, #237	@ 0xed
 800203a:	f000 f92b 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 800203e:	2064      	movs	r0, #100	@ 0x64
 8002040:	f000 f935 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8002044:	2003      	movs	r0, #3
 8002046:	f000 f932 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800204a:	2012      	movs	r0, #18
 800204c:	f000 f92f 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8002050:	2081      	movs	r0, #129	@ 0x81
 8002052:	f000 f92c 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8002056:	20e8      	movs	r0, #232	@ 0xe8
 8002058:	f000 f91c 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 800205c:	2085      	movs	r0, #133	@ 0x85
 800205e:	f000 f926 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002062:	2000      	movs	r0, #0
 8002064:	f000 f923 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002068:	2078      	movs	r0, #120	@ 0x78
 800206a:	f000 f920 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 800206e:	20cb      	movs	r0, #203	@ 0xcb
 8002070:	f000 f910 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8002074:	2039      	movs	r0, #57	@ 0x39
 8002076:	f000 f91a 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800207a:	202c      	movs	r0, #44	@ 0x2c
 800207c:	f000 f917 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002080:	2000      	movs	r0, #0
 8002082:	f000 f914 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8002086:	2034      	movs	r0, #52	@ 0x34
 8002088:	f000 f911 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 800208c:	2002      	movs	r0, #2
 800208e:	f000 f90e 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8002092:	20f7      	movs	r0, #247	@ 0xf7
 8002094:	f000 f8fe 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8002098:	2020      	movs	r0, #32
 800209a:	f000 f908 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 800209e:	20ea      	movs	r0, #234	@ 0xea
 80020a0:	f000 f8f8 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f000 f902 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f000 f8ff 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80020b0:	20b1      	movs	r0, #177	@ 0xb1
 80020b2:	f000 f8ef 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f000 f8f9 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80020bc:	201b      	movs	r0, #27
 80020be:	f000 f8f6 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80020c2:	20b6      	movs	r0, #182	@ 0xb6
 80020c4:	f000 f8e6 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80020c8:	200a      	movs	r0, #10
 80020ca:	f000 f8f0 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80020ce:	20a2      	movs	r0, #162	@ 0xa2
 80020d0:	f000 f8ed 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80020d4:	20c0      	movs	r0, #192	@ 0xc0
 80020d6:	f000 f8dd 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80020da:	2010      	movs	r0, #16
 80020dc:	f000 f8e7 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80020e0:	20c1      	movs	r0, #193	@ 0xc1
 80020e2:	f000 f8d7 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80020e6:	2010      	movs	r0, #16
 80020e8:	f000 f8e1 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80020ec:	20c5      	movs	r0, #197	@ 0xc5
 80020ee:	f000 f8d1 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80020f2:	2045      	movs	r0, #69	@ 0x45
 80020f4:	f000 f8db 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80020f8:	2015      	movs	r0, #21
 80020fa:	f000 f8d8 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80020fe:	20c7      	movs	r0, #199	@ 0xc7
 8002100:	f000 f8c8 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8002104:	2090      	movs	r0, #144	@ 0x90
 8002106:	f000 f8d2 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800210a:	2036      	movs	r0, #54	@ 0x36
 800210c:	f000 f8c2 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8002110:	20c8      	movs	r0, #200	@ 0xc8
 8002112:	f000 f8cc 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8002116:	20f2      	movs	r0, #242	@ 0xf2
 8002118:	f000 f8bc 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800211c:	2000      	movs	r0, #0
 800211e:	f000 f8c6 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8002122:	20b0      	movs	r0, #176	@ 0xb0
 8002124:	f000 f8b6 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8002128:	20c2      	movs	r0, #194	@ 0xc2
 800212a:	f000 f8c0 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800212e:	20b6      	movs	r0, #182	@ 0xb6
 8002130:	f000 f8b0 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002134:	200a      	movs	r0, #10
 8002136:	f000 f8ba 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800213a:	20a7      	movs	r0, #167	@ 0xa7
 800213c:	f000 f8b7 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8002140:	2027      	movs	r0, #39	@ 0x27
 8002142:	f000 f8b4 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002146:	2004      	movs	r0, #4
 8002148:	f000 f8b1 	bl	80022ae <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 800214c:	202a      	movs	r0, #42	@ 0x2a
 800214e:	f000 f8a1 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002152:	2000      	movs	r0, #0
 8002154:	f000 f8ab 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002158:	2000      	movs	r0, #0
 800215a:	f000 f8a8 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800215e:	2000      	movs	r0, #0
 8002160:	f000 f8a5 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8002164:	20ef      	movs	r0, #239	@ 0xef
 8002166:	f000 f8a2 	bl	80022ae <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800216a:	202b      	movs	r0, #43	@ 0x2b
 800216c:	f000 f892 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002170:	2000      	movs	r0, #0
 8002172:	f000 f89c 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002176:	2000      	movs	r0, #0
 8002178:	f000 f899 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 800217c:	2001      	movs	r0, #1
 800217e:	f000 f896 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8002182:	203f      	movs	r0, #63	@ 0x3f
 8002184:	f000 f893 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8002188:	20f6      	movs	r0, #246	@ 0xf6
 800218a:	f000 f883 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800218e:	2001      	movs	r0, #1
 8002190:	f000 f88d 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002194:	2000      	movs	r0, #0
 8002196:	f000 f88a 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800219a:	2006      	movs	r0, #6
 800219c:	f000 f887 	bl	80022ae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80021a0:	202c      	movs	r0, #44	@ 0x2c
 80021a2:	f000 f877 	bl	8002294 <ili9341_Write_Reg>
  LCD_Delay(200);
 80021a6:	20c8      	movs	r0, #200	@ 0xc8
 80021a8:	f000 f9e8 	bl	800257c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80021ac:	2026      	movs	r0, #38	@ 0x26
 80021ae:	f000 f871 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f000 f87b 	bl	80022ae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80021b8:	20e0      	movs	r0, #224	@ 0xe0
 80021ba:	f000 f86b 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80021be:	200f      	movs	r0, #15
 80021c0:	f000 f875 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80021c4:	2029      	movs	r0, #41	@ 0x29
 80021c6:	f000 f872 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80021ca:	2024      	movs	r0, #36	@ 0x24
 80021cc:	f000 f86f 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80021d0:	200c      	movs	r0, #12
 80021d2:	f000 f86c 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80021d6:	200e      	movs	r0, #14
 80021d8:	f000 f869 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80021dc:	2009      	movs	r0, #9
 80021de:	f000 f866 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80021e2:	204e      	movs	r0, #78	@ 0x4e
 80021e4:	f000 f863 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80021e8:	2078      	movs	r0, #120	@ 0x78
 80021ea:	f000 f860 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80021ee:	203c      	movs	r0, #60	@ 0x3c
 80021f0:	f000 f85d 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80021f4:	2009      	movs	r0, #9
 80021f6:	f000 f85a 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80021fa:	2013      	movs	r0, #19
 80021fc:	f000 f857 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002200:	2005      	movs	r0, #5
 8002202:	f000 f854 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8002206:	2017      	movs	r0, #23
 8002208:	f000 f851 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800220c:	2011      	movs	r0, #17
 800220e:	f000 f84e 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002212:	2000      	movs	r0, #0
 8002214:	f000 f84b 	bl	80022ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002218:	20e1      	movs	r0, #225	@ 0xe1
 800221a:	f000 f83b 	bl	8002294 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800221e:	2000      	movs	r0, #0
 8002220:	f000 f845 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8002224:	2016      	movs	r0, #22
 8002226:	f000 f842 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800222a:	201b      	movs	r0, #27
 800222c:	f000 f83f 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002230:	2004      	movs	r0, #4
 8002232:	f000 f83c 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002236:	2011      	movs	r0, #17
 8002238:	f000 f839 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800223c:	2007      	movs	r0, #7
 800223e:	f000 f836 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8002242:	2031      	movs	r0, #49	@ 0x31
 8002244:	f000 f833 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002248:	2033      	movs	r0, #51	@ 0x33
 800224a:	f000 f830 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 800224e:	2042      	movs	r0, #66	@ 0x42
 8002250:	f000 f82d 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002254:	2005      	movs	r0, #5
 8002256:	f000 f82a 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800225a:	200c      	movs	r0, #12
 800225c:	f000 f827 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002260:	200a      	movs	r0, #10
 8002262:	f000 f824 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8002266:	2028      	movs	r0, #40	@ 0x28
 8002268:	f000 f821 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 800226c:	202f      	movs	r0, #47	@ 0x2f
 800226e:	f000 f81e 	bl	80022ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8002272:	200f      	movs	r0, #15
 8002274:	f000 f81b 	bl	80022ae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002278:	2011      	movs	r0, #17
 800227a:	f000 f80b 	bl	8002294 <ili9341_Write_Reg>
  LCD_Delay(200);
 800227e:	20c8      	movs	r0, #200	@ 0xc8
 8002280:	f000 f97c 	bl	800257c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8002284:	2029      	movs	r0, #41	@ 0x29
 8002286:	f000 f805 	bl	8002294 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800228a:	202c      	movs	r0, #44	@ 0x2c
 800228c:	f000 f802 	bl	8002294 <ili9341_Write_Reg>
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}

08002294 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 f949 	bl	8002538 <LCD_IO_WriteReg>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f91a 	bl	80024f4 <LCD_IO_WriteData>
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80022cc:	4819      	ldr	r0, [pc, #100]	@ (8002334 <SPI_Init+0x6c>)
 80022ce:	f004 fb90 	bl	80069f2 <HAL_SPI_GetState>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d12b      	bne.n	8002330 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80022d8:	4b16      	ldr	r3, [pc, #88]	@ (8002334 <SPI_Init+0x6c>)
 80022da:	4a17      	ldr	r2, [pc, #92]	@ (8002338 <SPI_Init+0x70>)
 80022dc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80022de:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <SPI_Init+0x6c>)
 80022e0:	2218      	movs	r2, #24
 80022e2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80022e4:	4b13      	ldr	r3, [pc, #76]	@ (8002334 <SPI_Init+0x6c>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80022ea:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <SPI_Init+0x6c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80022f0:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <SPI_Init+0x6c>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80022f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002334 <SPI_Init+0x6c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80022fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002334 <SPI_Init+0x6c>)
 80022fe:	2207      	movs	r2, #7
 8002300:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002302:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <SPI_Init+0x6c>)
 8002304:	2200      	movs	r2, #0
 8002306:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002308:	4b0a      	ldr	r3, [pc, #40]	@ (8002334 <SPI_Init+0x6c>)
 800230a:	2200      	movs	r2, #0
 800230c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800230e:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <SPI_Init+0x6c>)
 8002310:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002314:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002316:	4b07      	ldr	r3, [pc, #28]	@ (8002334 <SPI_Init+0x6c>)
 8002318:	2200      	movs	r2, #0
 800231a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800231c:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <SPI_Init+0x6c>)
 800231e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002322:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002324:	4803      	ldr	r0, [pc, #12]	@ (8002334 <SPI_Init+0x6c>)
 8002326:	f000 f833 	bl	8002390 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800232a:	4802      	ldr	r0, [pc, #8]	@ (8002334 <SPI_Init+0x6c>)
 800232c:	f004 f96c 	bl	8006608 <HAL_SPI_Init>
  }
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}
 8002334:	200259b8 	.word	0x200259b8
 8002338:	40015000 	.word	0x40015000

0800233c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800234a:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <SPI_Write+0x34>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	1db9      	adds	r1, r7, #6
 8002350:	2201      	movs	r2, #1
 8002352:	4808      	ldr	r0, [pc, #32]	@ (8002374 <SPI_Write+0x38>)
 8002354:	f004 fa09 	bl	800676a <HAL_SPI_Transmit>
 8002358:	4603      	mov	r3, r0
 800235a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8002362:	f000 f809 	bl	8002378 <SPI_Error>
  }
}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000000c 	.word	0x2000000c
 8002374:	200259b8 	.word	0x200259b8

08002378 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800237c:	4803      	ldr	r0, [pc, #12]	@ (800238c <SPI_Error+0x14>)
 800237e:	f004 f9cc 	bl	800671a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8002382:	f7ff ffa1 	bl	80022c8 <SPI_Init>
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200259b8 	.word	0x200259b8

08002390 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	@ 0x28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	4b17      	ldr	r3, [pc, #92]	@ (80023fc <SPI_MspInit+0x6c>)
 800239e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a0:	4a16      	ldr	r2, [pc, #88]	@ (80023fc <SPI_MspInit+0x6c>)
 80023a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80023a8:	4b14      	ldr	r3, [pc, #80]	@ (80023fc <SPI_MspInit+0x6c>)
 80023aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	4b10      	ldr	r3, [pc, #64]	@ (80023fc <SPI_MspInit+0x6c>)
 80023ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023bc:	4a0f      	ldr	r2, [pc, #60]	@ (80023fc <SPI_MspInit+0x6c>)
 80023be:	f043 0320 	orr.w	r3, r3, #32
 80023c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c4:	4b0d      	ldr	r3, [pc, #52]	@ (80023fc <SPI_MspInit+0x6c>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80023d0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80023d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80023d6:	2302      	movs	r3, #2
 80023d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80023da:	2302      	movs	r3, #2
 80023dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80023de:	2301      	movs	r3, #1
 80023e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80023e2:	2305      	movs	r3, #5
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80023e6:	f107 0314 	add.w	r3, r7, #20
 80023ea:	4619      	mov	r1, r3
 80023ec:	4804      	ldr	r0, [pc, #16]	@ (8002400 <SPI_MspInit+0x70>)
 80023ee:	f001 fc85 	bl	8003cfc <HAL_GPIO_Init>
}
 80023f2:	bf00      	nop
 80023f4:	3728      	adds	r7, #40	@ 0x28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40021400 	.word	0x40021400

08002404 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800240a:	4b36      	ldr	r3, [pc, #216]	@ (80024e4 <LCD_IO_Init+0xe0>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d164      	bne.n	80024dc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002412:	4b34      	ldr	r3, [pc, #208]	@ (80024e4 <LCD_IO_Init+0xe0>)
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	4b32      	ldr	r3, [pc, #200]	@ (80024e8 <LCD_IO_Init+0xe4>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002420:	4a31      	ldr	r2, [pc, #196]	@ (80024e8 <LCD_IO_Init+0xe4>)
 8002422:	f043 0308 	orr.w	r3, r3, #8
 8002426:	6313      	str	r3, [r2, #48]	@ 0x30
 8002428:	4b2f      	ldr	r3, [pc, #188]	@ (80024e8 <LCD_IO_Init+0xe4>)
 800242a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002434:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002438:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800243a:	2301      	movs	r3, #1
 800243c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002442:	2302      	movs	r3, #2
 8002444:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002446:	f107 030c 	add.w	r3, r7, #12
 800244a:	4619      	mov	r1, r3
 800244c:	4827      	ldr	r0, [pc, #156]	@ (80024ec <LCD_IO_Init+0xe8>)
 800244e:	f001 fc55 	bl	8003cfc <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	4b24      	ldr	r3, [pc, #144]	@ (80024e8 <LCD_IO_Init+0xe4>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	4a23      	ldr	r2, [pc, #140]	@ (80024e8 <LCD_IO_Init+0xe4>)
 800245c:	f043 0308 	orr.w	r3, r3, #8
 8002460:	6313      	str	r3, [r2, #48]	@ 0x30
 8002462:	4b21      	ldr	r3, [pc, #132]	@ (80024e8 <LCD_IO_Init+0xe4>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800246e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002472:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002474:	2301      	movs	r3, #1
 8002476:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800247c:	2302      	movs	r3, #2
 800247e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002480:	f107 030c 	add.w	r3, r7, #12
 8002484:	4619      	mov	r1, r3
 8002486:	4819      	ldr	r0, [pc, #100]	@ (80024ec <LCD_IO_Init+0xe8>)
 8002488:	f001 fc38 	bl	8003cfc <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800248c:	2300      	movs	r3, #0
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	4b15      	ldr	r3, [pc, #84]	@ (80024e8 <LCD_IO_Init+0xe4>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002494:	4a14      	ldr	r2, [pc, #80]	@ (80024e8 <LCD_IO_Init+0xe4>)
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	6313      	str	r3, [r2, #48]	@ 0x30
 800249c:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <LCD_IO_Init+0xe4>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	603b      	str	r3, [r7, #0]
 80024a6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80024a8:	2304      	movs	r3, #4
 80024aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80024ac:	2301      	movs	r3, #1
 80024ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80024b4:	2302      	movs	r3, #2
 80024b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80024b8:	f107 030c 	add.w	r3, r7, #12
 80024bc:	4619      	mov	r1, r3
 80024be:	480c      	ldr	r0, [pc, #48]	@ (80024f0 <LCD_IO_Init+0xec>)
 80024c0:	f001 fc1c 	bl	8003cfc <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80024c4:	2200      	movs	r2, #0
 80024c6:	2104      	movs	r1, #4
 80024c8:	4809      	ldr	r0, [pc, #36]	@ (80024f0 <LCD_IO_Init+0xec>)
 80024ca:	f001 fecf 	bl	800426c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80024ce:	2201      	movs	r2, #1
 80024d0:	2104      	movs	r1, #4
 80024d2:	4807      	ldr	r0, [pc, #28]	@ (80024f0 <LCD_IO_Init+0xec>)
 80024d4:	f001 feca 	bl	800426c <HAL_GPIO_WritePin>

    SPI_Init();
 80024d8:	f7ff fef6 	bl	80022c8 <SPI_Init>
  }
}
 80024dc:	bf00      	nop
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20025a10 	.word	0x20025a10
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40020c00 	.word	0x40020c00
 80024f0:	40020800 	.word	0x40020800

080024f4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80024fe:	2201      	movs	r2, #1
 8002500:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002504:	480a      	ldr	r0, [pc, #40]	@ (8002530 <LCD_IO_WriteData+0x3c>)
 8002506:	f001 feb1 	bl	800426c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800250a:	2200      	movs	r2, #0
 800250c:	2104      	movs	r1, #4
 800250e:	4809      	ldr	r0, [pc, #36]	@ (8002534 <LCD_IO_WriteData+0x40>)
 8002510:	f001 feac 	bl	800426c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff10 	bl	800233c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800251c:	2201      	movs	r2, #1
 800251e:	2104      	movs	r1, #4
 8002520:	4804      	ldr	r0, [pc, #16]	@ (8002534 <LCD_IO_WriteData+0x40>)
 8002522:	f001 fea3 	bl	800426c <HAL_GPIO_WritePin>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40020c00 	.word	0x40020c00
 8002534:	40020800 	.word	0x40020800

08002538 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002542:	2200      	movs	r2, #0
 8002544:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002548:	480a      	ldr	r0, [pc, #40]	@ (8002574 <LCD_IO_WriteReg+0x3c>)
 800254a:	f001 fe8f 	bl	800426c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800254e:	2200      	movs	r2, #0
 8002550:	2104      	movs	r1, #4
 8002552:	4809      	ldr	r0, [pc, #36]	@ (8002578 <LCD_IO_WriteReg+0x40>)
 8002554:	f001 fe8a 	bl	800426c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	b29b      	uxth	r3, r3
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff feed 	bl	800233c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002562:	2201      	movs	r2, #1
 8002564:	2104      	movs	r1, #4
 8002566:	4804      	ldr	r0, [pc, #16]	@ (8002578 <LCD_IO_WriteReg+0x40>)
 8002568:	f001 fe80 	bl	800426c <HAL_GPIO_WritePin>
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40020c00 	.word	0x40020c00
 8002578:	40020800 	.word	0x40020800

0800257c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f001 faaf 	bl	8003ae8 <HAL_Delay>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <__NVIC_EnableIRQ>:
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	db0b      	blt.n	80025be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	4907      	ldr	r1, [pc, #28]	@ (80025cc <__NVIC_EnableIRQ+0x38>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2001      	movs	r0, #1
 80025b6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000e100 	.word	0xe000e100

080025d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025d4:	f001 fa16 	bl	8003a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025d8:	f000 f814 	bl	8002604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025dc:	f000 fa08 	bl	80029f0 <MX_GPIO_Init>
  MX_LTDC_Init();
 80025e0:	f000 f8ba 	bl	8002758 <MX_LTDC_Init>
  MX_RNG_Init();
 80025e4:	f000 f96a 	bl	80028bc <MX_RNG_Init>
  MX_TIM2_Init();
 80025e8:	f000 f9b2 	bl	8002950 <MX_TIM2_Init>
  MX_SPI5_Init();
 80025ec:	f000 f97a 	bl	80028e4 <MX_SPI5_Init>
  MX_I2C3_Init();
 80025f0:	f000 f872 	bl	80026d8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 80025f4:	f7fe f842 	bl	800067c <ApplicationInit>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	displayMenu();
 80025f8:	f7fe f90a 	bl	8000810 <displayMenu>
	waitForUserResponse();
 80025fc:	f7fe f8e2 	bl	80007c4 <waitForUserResponse>
	displayMenu();
 8002600:	bf00      	nop
 8002602:	e7f9      	b.n	80025f8 <main+0x28>

08002604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b094      	sub	sp, #80	@ 0x50
 8002608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800260a:	f107 0320 	add.w	r3, r7, #32
 800260e:	2230      	movs	r2, #48	@ 0x30
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f004 fe72 	bl	80072fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002618:	f107 030c 	add.w	r3, r7, #12
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	4b28      	ldr	r3, [pc, #160]	@ (80026d0 <SystemClock_Config+0xcc>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	4a27      	ldr	r2, [pc, #156]	@ (80026d0 <SystemClock_Config+0xcc>)
 8002632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002636:	6413      	str	r3, [r2, #64]	@ 0x40
 8002638:	4b25      	ldr	r3, [pc, #148]	@ (80026d0 <SystemClock_Config+0xcc>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002644:	2300      	movs	r3, #0
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	4b22      	ldr	r3, [pc, #136]	@ (80026d4 <SystemClock_Config+0xd0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a21      	ldr	r2, [pc, #132]	@ (80026d4 <SystemClock_Config+0xd0>)
 800264e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b1f      	ldr	r3, [pc, #124]	@ (80026d4 <SystemClock_Config+0xd0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002660:	2301      	movs	r3, #1
 8002662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002664:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800266a:	2302      	movs	r3, #2
 800266c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800266e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002674:	2308      	movs	r3, #8
 8002676:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002678:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800267c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800267e:	2302      	movs	r3, #2
 8002680:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002682:	2307      	movs	r3, #7
 8002684:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002686:	f107 0320 	add.w	r3, r7, #32
 800268a:	4618      	mov	r0, r3
 800268c:	f003 f94e 	bl	800592c <HAL_RCC_OscConfig>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002696:	f000 fb59 	bl	8002d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800269a:	230f      	movs	r3, #15
 800269c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800269e:	2302      	movs	r3, #2
 80026a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80026b2:	f107 030c 	add.w	r3, r7, #12
 80026b6:	2105      	movs	r1, #5
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 fbaf 	bl	8005e1c <HAL_RCC_ClockConfig>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80026c4:	f000 fb42 	bl	8002d4c <Error_Handler>
  }
}
 80026c8:	bf00      	nop
 80026ca:	3750      	adds	r7, #80	@ 0x50
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40007000 	.word	0x40007000

080026d8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80026dc:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <MX_I2C3_Init+0x74>)
 80026de:	4a1c      	ldr	r2, [pc, #112]	@ (8002750 <MX_I2C3_Init+0x78>)
 80026e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	@ (800274c <MX_I2C3_Init+0x74>)
 80026e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002754 <MX_I2C3_Init+0x7c>)
 80026e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026e8:	4b18      	ldr	r3, [pc, #96]	@ (800274c <MX_I2C3_Init+0x74>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80026ee:	4b17      	ldr	r3, [pc, #92]	@ (800274c <MX_I2C3_Init+0x74>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026f4:	4b15      	ldr	r3, [pc, #84]	@ (800274c <MX_I2C3_Init+0x74>)
 80026f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026fa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026fc:	4b13      	ldr	r3, [pc, #76]	@ (800274c <MX_I2C3_Init+0x74>)
 80026fe:	2200      	movs	r2, #0
 8002700:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002702:	4b12      	ldr	r3, [pc, #72]	@ (800274c <MX_I2C3_Init+0x74>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002708:	4b10      	ldr	r3, [pc, #64]	@ (800274c <MX_I2C3_Init+0x74>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800270e:	4b0f      	ldr	r3, [pc, #60]	@ (800274c <MX_I2C3_Init+0x74>)
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002714:	480d      	ldr	r0, [pc, #52]	@ (800274c <MX_I2C3_Init+0x74>)
 8002716:	f001 fdc3 	bl	80042a0 <HAL_I2C_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002720:	f000 fb14 	bl	8002d4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002724:	2100      	movs	r1, #0
 8002726:	4809      	ldr	r0, [pc, #36]	@ (800274c <MX_I2C3_Init+0x74>)
 8002728:	f002 fdde 	bl	80052e8 <HAL_I2CEx_ConfigAnalogFilter>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002732:	f000 fb0b 	bl	8002d4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002736:	2100      	movs	r1, #0
 8002738:	4804      	ldr	r0, [pc, #16]	@ (800274c <MX_I2C3_Init+0x74>)
 800273a:	f002 fe11 	bl	8005360 <HAL_I2CEx_ConfigDigitalFilter>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002744:	f000 fb02 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20025a14 	.word	0x20025a14
 8002750:	40005c00 	.word	0x40005c00
 8002754:	000186a0 	.word	0x000186a0

08002758 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b09a      	sub	sp, #104	@ 0x68
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800275e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002762:	2234      	movs	r2, #52	@ 0x34
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f004 fdc8 	bl	80072fc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800276c:	463b      	mov	r3, r7
 800276e:	2234      	movs	r2, #52	@ 0x34
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f004 fdc2 	bl	80072fc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002778:	4b4e      	ldr	r3, [pc, #312]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 800277a:	4a4f      	ldr	r2, [pc, #316]	@ (80028b8 <MX_LTDC_Init+0x160>)
 800277c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800277e:	4b4d      	ldr	r3, [pc, #308]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 8002780:	2200      	movs	r2, #0
 8002782:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002784:	4b4b      	ldr	r3, [pc, #300]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800278a:	4b4a      	ldr	r3, [pc, #296]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 800278c:	2200      	movs	r2, #0
 800278e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002790:	4b48      	ldr	r3, [pc, #288]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8002796:	4b47      	ldr	r3, [pc, #284]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 8002798:	2207      	movs	r2, #7
 800279a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800279c:	4b45      	ldr	r3, [pc, #276]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 800279e:	2203      	movs	r2, #3
 80027a0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80027a2:	4b44      	ldr	r3, [pc, #272]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 80027a4:	220e      	movs	r2, #14
 80027a6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80027a8:	4b42      	ldr	r3, [pc, #264]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 80027aa:	2205      	movs	r2, #5
 80027ac:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80027ae:	4b41      	ldr	r3, [pc, #260]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 80027b0:	f240 228e 	movw	r2, #654	@ 0x28e
 80027b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80027b6:	4b3f      	ldr	r3, [pc, #252]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 80027b8:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80027bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80027be:	4b3d      	ldr	r3, [pc, #244]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 80027c0:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80027c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80027c6:	4b3b      	ldr	r3, [pc, #236]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 80027c8:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80027cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80027ce:	4b39      	ldr	r3, [pc, #228]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80027d6:	4b37      	ldr	r3, [pc, #220]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80027de:	4b35      	ldr	r3, [pc, #212]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80027e6:	4833      	ldr	r0, [pc, #204]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 80027e8:	f002 fdfa 	bl	80053e0 <HAL_LTDC_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80027f2:	f000 faab 	bl	8002d4c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002806:	2300      	movs	r3, #0
 8002808:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002816:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002818:	2305      	movs	r3, #5
 800281a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800283a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800283e:	2200      	movs	r2, #0
 8002840:	4619      	mov	r1, r3
 8002842:	481c      	ldr	r0, [pc, #112]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 8002844:	f002 fe9c 	bl	8005580 <HAL_LTDC_ConfigLayer>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800284e:	f000 fa7d 	bl	8002d4c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800286e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002872:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002874:	2305      	movs	r3, #5
 8002876:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002896:	463b      	mov	r3, r7
 8002898:	2201      	movs	r2, #1
 800289a:	4619      	mov	r1, r3
 800289c:	4805      	ldr	r0, [pc, #20]	@ (80028b4 <MX_LTDC_Init+0x15c>)
 800289e:	f002 fe6f 	bl	8005580 <HAL_LTDC_ConfigLayer>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80028a8:	f000 fa50 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80028ac:	bf00      	nop
 80028ae:	3768      	adds	r7, #104	@ 0x68
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20025a68 	.word	0x20025a68
 80028b8:	40016800 	.word	0x40016800

080028bc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80028c0:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <MX_RNG_Init+0x20>)
 80028c2:	4a07      	ldr	r2, [pc, #28]	@ (80028e0 <MX_RNG_Init+0x24>)
 80028c4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80028c6:	4805      	ldr	r0, [pc, #20]	@ (80028dc <MX_RNG_Init+0x20>)
 80028c8:	f003 fe74 	bl	80065b4 <HAL_RNG_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80028d2:	f000 fa3b 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20025b10 	.word	0x20025b10
 80028e0:	50060800 	.word	0x50060800

080028e4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80028e8:	4b17      	ldr	r3, [pc, #92]	@ (8002948 <MX_SPI5_Init+0x64>)
 80028ea:	4a18      	ldr	r2, [pc, #96]	@ (800294c <MX_SPI5_Init+0x68>)
 80028ec:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80028ee:	4b16      	ldr	r3, [pc, #88]	@ (8002948 <MX_SPI5_Init+0x64>)
 80028f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028f4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80028f6:	4b14      	ldr	r3, [pc, #80]	@ (8002948 <MX_SPI5_Init+0x64>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80028fc:	4b12      	ldr	r3, [pc, #72]	@ (8002948 <MX_SPI5_Init+0x64>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002902:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <MX_SPI5_Init+0x64>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002908:	4b0f      	ldr	r3, [pc, #60]	@ (8002948 <MX_SPI5_Init+0x64>)
 800290a:	2200      	movs	r2, #0
 800290c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800290e:	4b0e      	ldr	r3, [pc, #56]	@ (8002948 <MX_SPI5_Init+0x64>)
 8002910:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002914:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002916:	4b0c      	ldr	r3, [pc, #48]	@ (8002948 <MX_SPI5_Init+0x64>)
 8002918:	2200      	movs	r2, #0
 800291a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800291c:	4b0a      	ldr	r3, [pc, #40]	@ (8002948 <MX_SPI5_Init+0x64>)
 800291e:	2200      	movs	r2, #0
 8002920:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002922:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <MX_SPI5_Init+0x64>)
 8002924:	2200      	movs	r2, #0
 8002926:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002928:	4b07      	ldr	r3, [pc, #28]	@ (8002948 <MX_SPI5_Init+0x64>)
 800292a:	2200      	movs	r2, #0
 800292c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800292e:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <MX_SPI5_Init+0x64>)
 8002930:	220a      	movs	r2, #10
 8002932:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002934:	4804      	ldr	r0, [pc, #16]	@ (8002948 <MX_SPI5_Init+0x64>)
 8002936:	f003 fe67 	bl	8006608 <HAL_SPI_Init>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002940:	f000 fa04 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002944:	bf00      	nop
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20025b20 	.word	0x20025b20
 800294c:	40015000 	.word	0x40015000

08002950 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002956:	f107 0308 	add.w	r3, r7, #8
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	609a      	str	r2, [r3, #8]
 8002962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002964:	463b      	mov	r3, r7
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800296c:	4b1e      	ldr	r3, [pc, #120]	@ (80029e8 <MX_TIM2_Init+0x98>)
 800296e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002972:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8002974:	4b1c      	ldr	r3, [pc, #112]	@ (80029e8 <MX_TIM2_Init+0x98>)
 8002976:	2203      	movs	r2, #3
 8002978:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800297a:	4b1b      	ldr	r3, [pc, #108]	@ (80029e8 <MX_TIM2_Init+0x98>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000000;
 8002980:	4b19      	ldr	r3, [pc, #100]	@ (80029e8 <MX_TIM2_Init+0x98>)
 8002982:	4a1a      	ldr	r2, [pc, #104]	@ (80029ec <MX_TIM2_Init+0x9c>)
 8002984:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002986:	4b18      	ldr	r3, [pc, #96]	@ (80029e8 <MX_TIM2_Init+0x98>)
 8002988:	2200      	movs	r2, #0
 800298a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800298c:	4b16      	ldr	r3, [pc, #88]	@ (80029e8 <MX_TIM2_Init+0x98>)
 800298e:	2200      	movs	r2, #0
 8002990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002992:	4815      	ldr	r0, [pc, #84]	@ (80029e8 <MX_TIM2_Init+0x98>)
 8002994:	f004 f918 	bl	8006bc8 <HAL_TIM_Base_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800299e:	f000 f9d5 	bl	8002d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029a8:	f107 0308 	add.w	r3, r7, #8
 80029ac:	4619      	mov	r1, r3
 80029ae:	480e      	ldr	r0, [pc, #56]	@ (80029e8 <MX_TIM2_Init+0x98>)
 80029b0:	f004 f9f9 	bl	8006da6 <HAL_TIM_ConfigClockSource>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80029ba:	f000 f9c7 	bl	8002d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029c6:	463b      	mov	r3, r7
 80029c8:	4619      	mov	r1, r3
 80029ca:	4807      	ldr	r0, [pc, #28]	@ (80029e8 <MX_TIM2_Init+0x98>)
 80029cc:	f004 fbf8 	bl	80071c0 <HAL_TIMEx_MasterConfigSynchronization>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80029d6:	f000 f9b9 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

	__NVIC_EnableIRQ(TIM2_IRQ_NUM);
 80029da:	201c      	movs	r0, #28
 80029dc:	f7ff fdda 	bl	8002594 <__NVIC_EnableIRQ>

  /* USER CODE END TIM2_Init 2 */

}
 80029e0:	bf00      	nop
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20025b78 	.word	0x20025b78
 80029ec:	00f42400 	.word	0x00f42400

080029f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	@ 0x38
 80029f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	60da      	str	r2, [r3, #12]
 8002a04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	623b      	str	r3, [r7, #32]
 8002a0a:	4bb2      	ldr	r3, [pc, #712]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	4ab1      	ldr	r2, [pc, #708]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a16:	4baf      	ldr	r3, [pc, #700]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	623b      	str	r3, [r7, #32]
 8002a20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	4bab      	ldr	r3, [pc, #684]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	4aaa      	ldr	r2, [pc, #680]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002a2c:	f043 0320 	orr.w	r3, r3, #32
 8002a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a32:	4ba8      	ldr	r3, [pc, #672]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	61fb      	str	r3, [r7, #28]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	4ba4      	ldr	r3, [pc, #656]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	4aa3      	ldr	r2, [pc, #652]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4e:	4ba1      	ldr	r3, [pc, #644]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	4b9d      	ldr	r3, [pc, #628]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	4a9c      	ldr	r2, [pc, #624]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a6a:	4b9a      	ldr	r3, [pc, #616]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	4b96      	ldr	r3, [pc, #600]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	4a95      	ldr	r2, [pc, #596]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a86:	4b93      	ldr	r3, [pc, #588]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b8f      	ldr	r3, [pc, #572]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	4a8e      	ldr	r2, [pc, #568]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002a9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa2:	4b8c      	ldr	r3, [pc, #560]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	4b88      	ldr	r3, [pc, #544]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	4a87      	ldr	r2, [pc, #540]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002ab8:	f043 0310 	orr.w	r3, r3, #16
 8002abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002abe:	4b85      	ldr	r3, [pc, #532]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	4b81      	ldr	r3, [pc, #516]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	4a80      	ldr	r2, [pc, #512]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002ad4:	f043 0308 	orr.w	r3, r3, #8
 8002ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ada:	4b7e      	ldr	r3, [pc, #504]	@ (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2116      	movs	r1, #22
 8002aea:	487b      	ldr	r0, [pc, #492]	@ (8002cd8 <MX_GPIO_Init+0x2e8>)
 8002aec:	f001 fbbe 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002af0:	2200      	movs	r2, #0
 8002af2:	2180      	movs	r1, #128	@ 0x80
 8002af4:	4879      	ldr	r0, [pc, #484]	@ (8002cdc <MX_GPIO_Init+0x2ec>)
 8002af6:	f001 fbb9 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002afa:	2200      	movs	r2, #0
 8002afc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002b00:	4877      	ldr	r0, [pc, #476]	@ (8002ce0 <MX_GPIO_Init+0x2f0>)
 8002b02:	f001 fbb3 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002b06:	2200      	movs	r2, #0
 8002b08:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002b0c:	4875      	ldr	r0, [pc, #468]	@ (8002ce4 <MX_GPIO_Init+0x2f4>)
 8002b0e:	f001 fbad 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002b12:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b20:	2303      	movs	r3, #3
 8002b22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b24:	230c      	movs	r3, #12
 8002b26:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	486e      	ldr	r0, [pc, #440]	@ (8002ce8 <MX_GPIO_Init+0x2f8>)
 8002b30:	f001 f8e4 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002b34:	2301      	movs	r3, #1
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b40:	2303      	movs	r3, #3
 8002b42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b44:	230c      	movs	r3, #12
 8002b46:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002b48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4862      	ldr	r0, [pc, #392]	@ (8002cd8 <MX_GPIO_Init+0x2e8>)
 8002b50:	f001 f8d4 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002b54:	2316      	movs	r3, #22
 8002b56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b60:	2300      	movs	r3, #0
 8002b62:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b68:	4619      	mov	r1, r3
 8002b6a:	485b      	ldr	r0, [pc, #364]	@ (8002cd8 <MX_GPIO_Init+0x2e8>)
 8002b6c:	f001 f8c6 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002b70:	f248 0307 	movw	r3, #32775	@ 0x8007
 8002b74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b76:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b84:	4619      	mov	r1, r3
 8002b86:	4855      	ldr	r0, [pc, #340]	@ (8002cdc <MX_GPIO_Init+0x2ec>)
 8002b88:	f001 f8b8 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002b8c:	2380      	movs	r3, #128	@ 0x80
 8002b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b90:	2301      	movs	r3, #1
 8002b92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	484e      	ldr	r0, [pc, #312]	@ (8002cdc <MX_GPIO_Init+0x2ec>)
 8002ba4:	f001 f8aa 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002ba8:	2320      	movs	r3, #32
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002bac:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4846      	ldr	r0, [pc, #280]	@ (8002cd8 <MX_GPIO_Init+0x2e8>)
 8002bbe:	f001 f89d 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4845      	ldr	r0, [pc, #276]	@ (8002cec <MX_GPIO_Init+0x2fc>)
 8002bd6:	f001 f891 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002bda:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002bde:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be8:	2303      	movs	r3, #3
 8002bea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bec:	230c      	movs	r3, #12
 8002bee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	483b      	ldr	r0, [pc, #236]	@ (8002ce4 <MX_GPIO_Init+0x2f4>)
 8002bf8:	f001 f880 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002bfc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c0e:	230c      	movs	r3, #12
 8002c10:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c16:	4619      	mov	r1, r3
 8002c18:	4835      	ldr	r0, [pc, #212]	@ (8002cf0 <MX_GPIO_Init+0x300>)
 8002c1a:	f001 f86f 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002c1e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002c22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002c30:	230c      	movs	r3, #12
 8002c32:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c38:	4619      	mov	r1, r3
 8002c3a:	482c      	ldr	r0, [pc, #176]	@ (8002cec <MX_GPIO_Init+0x2fc>)
 8002c3c:	f001 f85e 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002c40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c46:	2300      	movs	r3, #0
 8002c48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c52:	4619      	mov	r1, r3
 8002c54:	4825      	ldr	r0, [pc, #148]	@ (8002cec <MX_GPIO_Init+0x2fc>)
 8002c56:	f001 f851 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002c5a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002c5e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c6c:	230c      	movs	r3, #12
 8002c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c74:	4619      	mov	r1, r3
 8002c76:	481a      	ldr	r0, [pc, #104]	@ (8002ce0 <MX_GPIO_Init+0x2f0>)
 8002c78:	f001 f840 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002c7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4813      	ldr	r0, [pc, #76]	@ (8002ce0 <MX_GPIO_Init+0x2f0>)
 8002c92:	f001 f833 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002c96:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cac:	4619      	mov	r1, r3
 8002cae:	480c      	ldr	r0, [pc, #48]	@ (8002ce0 <MX_GPIO_Init+0x2f0>)
 8002cb0:	f001 f824 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002cb4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cc6:	2307      	movs	r3, #7
 8002cc8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cce:	4619      	mov	r1, r3
 8002cd0:	e010      	b.n	8002cf4 <MX_GPIO_Init+0x304>
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40020800 	.word	0x40020800
 8002cdc:	40020000 	.word	0x40020000
 8002ce0:	40020c00 	.word	0x40020c00
 8002ce4:	40021800 	.word	0x40021800
 8002ce8:	40021400 	.word	0x40021400
 8002cec:	40020400 	.word	0x40020400
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	4812      	ldr	r0, [pc, #72]	@ (8002d40 <MX_GPIO_Init+0x350>)
 8002cf6:	f001 f801 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002cfa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d00:	2301      	movs	r3, #1
 8002d02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d10:	4619      	mov	r1, r3
 8002d12:	480c      	ldr	r0, [pc, #48]	@ (8002d44 <MX_GPIO_Init+0x354>)
 8002d14:	f000 fff2 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002d18:	2360      	movs	r3, #96	@ 0x60
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d24:	2303      	movs	r3, #3
 8002d26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d28:	230c      	movs	r3, #12
 8002d2a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d30:	4619      	mov	r1, r3
 8002d32:	4805      	ldr	r0, [pc, #20]	@ (8002d48 <MX_GPIO_Init+0x358>)
 8002d34:	f000 ffe2 	bl	8003cfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d38:	bf00      	nop
 8002d3a:	3738      	adds	r7, #56	@ 0x38
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40020000 	.word	0x40020000
 8002d44:	40021800 	.word	0x40021800
 8002d48:	40020400 	.word	0x40020400

08002d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d50:	b672      	cpsid	i
}
 8002d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <Error_Handler+0x8>

08002d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]
 8002d62:	4b10      	ldr	r3, [pc, #64]	@ (8002da4 <HAL_MspInit+0x4c>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	4a0f      	ldr	r2, [pc, #60]	@ (8002da4 <HAL_MspInit+0x4c>)
 8002d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <HAL_MspInit+0x4c>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	4b09      	ldr	r3, [pc, #36]	@ (8002da4 <HAL_MspInit+0x4c>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	4a08      	ldr	r2, [pc, #32]	@ (8002da4 <HAL_MspInit+0x4c>)
 8002d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_MspInit+0x4c>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d96:	2007      	movs	r0, #7
 8002d98:	f000 ff7c 	bl	8003c94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40023800 	.word	0x40023800

08002da8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08a      	sub	sp, #40	@ 0x28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a29      	ldr	r2, [pc, #164]	@ (8002e6c <HAL_I2C_MspInit+0xc4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d14b      	bne.n	8002e62 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	4b28      	ldr	r3, [pc, #160]	@ (8002e70 <HAL_I2C_MspInit+0xc8>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	4a27      	ldr	r2, [pc, #156]	@ (8002e70 <HAL_I2C_MspInit+0xc8>)
 8002dd4:	f043 0304 	orr.w	r3, r3, #4
 8002dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dda:	4b25      	ldr	r3, [pc, #148]	@ (8002e70 <HAL_I2C_MspInit+0xc8>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	4b21      	ldr	r3, [pc, #132]	@ (8002e70 <HAL_I2C_MspInit+0xc8>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	4a20      	ldr	r2, [pc, #128]	@ (8002e70 <HAL_I2C_MspInit+0xc8>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002df6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e70 <HAL_I2C_MspInit+0xc8>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002e02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e08:	2312      	movs	r3, #18
 8002e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e10:	2300      	movs	r3, #0
 8002e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e14:	2304      	movs	r3, #4
 8002e16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002e18:	f107 0314 	add.w	r3, r7, #20
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4815      	ldr	r0, [pc, #84]	@ (8002e74 <HAL_I2C_MspInit+0xcc>)
 8002e20:	f000 ff6c 	bl	8003cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002e24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e2a:	2312      	movs	r3, #18
 8002e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e32:	2300      	movs	r3, #0
 8002e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e36:	2304      	movs	r3, #4
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	4619      	mov	r1, r3
 8002e40:	480d      	ldr	r0, [pc, #52]	@ (8002e78 <HAL_I2C_MspInit+0xd0>)
 8002e42:	f000 ff5b 	bl	8003cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	4b09      	ldr	r3, [pc, #36]	@ (8002e70 <HAL_I2C_MspInit+0xc8>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	4a08      	ldr	r2, [pc, #32]	@ (8002e70 <HAL_I2C_MspInit+0xc8>)
 8002e50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e56:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <HAL_I2C_MspInit+0xc8>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002e62:	bf00      	nop
 8002e64:	3728      	adds	r7, #40	@ 0x28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40005c00 	.word	0x40005c00
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40020800 	.word	0x40020800
 8002e78:	40020000 	.word	0x40020000

08002e7c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b09a      	sub	sp, #104	@ 0x68
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e98:	2230      	movs	r2, #48	@ 0x30
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f004 fa2d 	bl	80072fc <memset>
  if(hltdc->Instance==LTDC)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a81      	ldr	r2, [pc, #516]	@ (80030ac <HAL_LTDC_MspInit+0x230>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	f040 80fb 	bne.w	80030a4 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002eae:	2308      	movs	r3, #8
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8002eb2:	23c8      	movs	r3, #200	@ 0xc8
 8002eb4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002eba:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f003 f9b5 	bl	8006234 <HAL_RCCEx_PeriphCLKConfig>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002ed0:	f7ff ff3c 	bl	8002d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	623b      	str	r3, [r7, #32]
 8002ed8:	4b75      	ldr	r3, [pc, #468]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002edc:	4a74      	ldr	r2, [pc, #464]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002ede:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ee2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ee4:	4b72      	ldr	r3, [pc, #456]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002eec:	623b      	str	r3, [r7, #32]
 8002eee:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	4b6e      	ldr	r3, [pc, #440]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef8:	4a6d      	ldr	r2, [pc, #436]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002efa:	f043 0320 	orr.w	r3, r3, #32
 8002efe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f00:	4b6b      	ldr	r3, [pc, #428]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61bb      	str	r3, [r7, #24]
 8002f10:	4b67      	ldr	r3, [pc, #412]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f14:	4a66      	ldr	r2, [pc, #408]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1c:	4b64      	ldr	r3, [pc, #400]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	4b60      	ldr	r3, [pc, #384]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f30:	4a5f      	ldr	r2, [pc, #380]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002f32:	f043 0302 	orr.w	r3, r3, #2
 8002f36:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f38:	4b5d      	ldr	r3, [pc, #372]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	4b59      	ldr	r3, [pc, #356]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4c:	4a58      	ldr	r2, [pc, #352]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f52:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f54:	4b56      	ldr	r3, [pc, #344]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	4b52      	ldr	r3, [pc, #328]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	4a51      	ldr	r2, [pc, #324]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002f6a:	f043 0304 	orr.w	r3, r3, #4
 8002f6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f70:	4b4f      	ldr	r3, [pc, #316]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	4b4b      	ldr	r3, [pc, #300]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f84:	4a4a      	ldr	r2, [pc, #296]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002f86:	f043 0308 	orr.w	r3, r3, #8
 8002f8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f8c:	4b48      	ldr	r3, [pc, #288]	@ (80030b0 <HAL_LTDC_MspInit+0x234>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002f98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f9c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002faa:	230e      	movs	r3, #14
 8002fac:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002fae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	483f      	ldr	r0, [pc, #252]	@ (80030b4 <HAL_LTDC_MspInit+0x238>)
 8002fb6:	f000 fea1 	bl	8003cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002fba:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002fbe:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fcc:	230e      	movs	r3, #14
 8002fce:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4838      	ldr	r0, [pc, #224]	@ (80030b8 <HAL_LTDC_MspInit+0x23c>)
 8002fd8:	f000 fe90 	bl	8003cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002fec:	2309      	movs	r3, #9
 8002fee:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4831      	ldr	r0, [pc, #196]	@ (80030bc <HAL_LTDC_MspInit+0x240>)
 8002ff8:	f000 fe80 	bl	8003cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002ffc:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003000:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	2302      	movs	r3, #2
 8003004:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300a:	2300      	movs	r3, #0
 800300c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800300e:	230e      	movs	r3, #14
 8003010:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003012:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003016:	4619      	mov	r1, r3
 8003018:	4828      	ldr	r0, [pc, #160]	@ (80030bc <HAL_LTDC_MspInit+0x240>)
 800301a:	f000 fe6f 	bl	8003cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800301e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8003022:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003024:	2302      	movs	r3, #2
 8003026:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302c:	2300      	movs	r3, #0
 800302e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003030:	230e      	movs	r3, #14
 8003032:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003034:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003038:	4619      	mov	r1, r3
 800303a:	4821      	ldr	r0, [pc, #132]	@ (80030c0 <HAL_LTDC_MspInit+0x244>)
 800303c:	f000 fe5e 	bl	8003cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003040:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003044:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003046:	2302      	movs	r3, #2
 8003048:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304e:	2300      	movs	r3, #0
 8003050:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003052:	230e      	movs	r3, #14
 8003054:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003056:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800305a:	4619      	mov	r1, r3
 800305c:	4819      	ldr	r0, [pc, #100]	@ (80030c4 <HAL_LTDC_MspInit+0x248>)
 800305e:	f000 fe4d 	bl	8003cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003062:	2348      	movs	r3, #72	@ 0x48
 8003064:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003066:	2302      	movs	r3, #2
 8003068:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306e:	2300      	movs	r3, #0
 8003070:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003072:	230e      	movs	r3, #14
 8003074:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003076:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800307a:	4619      	mov	r1, r3
 800307c:	4812      	ldr	r0, [pc, #72]	@ (80030c8 <HAL_LTDC_MspInit+0x24c>)
 800307e:	f000 fe3d 	bl	8003cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003082:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003086:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003088:	2302      	movs	r3, #2
 800308a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308c:	2300      	movs	r3, #0
 800308e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003090:	2300      	movs	r3, #0
 8003092:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003094:	2309      	movs	r3, #9
 8003096:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003098:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800309c:	4619      	mov	r1, r3
 800309e:	4808      	ldr	r0, [pc, #32]	@ (80030c0 <HAL_LTDC_MspInit+0x244>)
 80030a0:	f000 fe2c 	bl	8003cfc <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80030a4:	bf00      	nop
 80030a6:	3768      	adds	r7, #104	@ 0x68
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40016800 	.word	0x40016800
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40021400 	.word	0x40021400
 80030b8:	40020000 	.word	0x40020000
 80030bc:	40020400 	.word	0x40020400
 80030c0:	40021800 	.word	0x40021800
 80030c4:	40020800 	.word	0x40020800
 80030c8:	40020c00 	.word	0x40020c00

080030cc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003108 <HAL_RNG_MspInit+0x3c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d10d      	bne.n	80030fa <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <HAL_RNG_MspInit+0x40>)
 80030e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e6:	4a09      	ldr	r2, [pc, #36]	@ (800310c <HAL_RNG_MspInit+0x40>)
 80030e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030ec:	6353      	str	r3, [r2, #52]	@ 0x34
 80030ee:	4b07      	ldr	r3, [pc, #28]	@ (800310c <HAL_RNG_MspInit+0x40>)
 80030f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	50060800 	.word	0x50060800
 800310c:	40023800 	.word	0x40023800

08003110 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08a      	sub	sp, #40	@ 0x28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 0314 	add.w	r3, r7, #20
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a19      	ldr	r2, [pc, #100]	@ (8003194 <HAL_SPI_MspInit+0x84>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d12c      	bne.n	800318c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	4b18      	ldr	r3, [pc, #96]	@ (8003198 <HAL_SPI_MspInit+0x88>)
 8003138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313a:	4a17      	ldr	r2, [pc, #92]	@ (8003198 <HAL_SPI_MspInit+0x88>)
 800313c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003140:	6453      	str	r3, [r2, #68]	@ 0x44
 8003142:	4b15      	ldr	r3, [pc, #84]	@ (8003198 <HAL_SPI_MspInit+0x88>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <HAL_SPI_MspInit+0x88>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	4a10      	ldr	r2, [pc, #64]	@ (8003198 <HAL_SPI_MspInit+0x88>)
 8003158:	f043 0320 	orr.w	r3, r3, #32
 800315c:	6313      	str	r3, [r2, #48]	@ 0x30
 800315e:	4b0e      	ldr	r3, [pc, #56]	@ (8003198 <HAL_SPI_MspInit+0x88>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800316a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800316e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800317c:	2305      	movs	r3, #5
 800317e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	4619      	mov	r1, r3
 8003186:	4805      	ldr	r0, [pc, #20]	@ (800319c <HAL_SPI_MspInit+0x8c>)
 8003188:	f000 fdb8 	bl	8003cfc <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 800318c:	bf00      	nop
 800318e:	3728      	adds	r7, #40	@ 0x28
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40015000 	.word	0x40015000
 8003198:	40023800 	.word	0x40023800
 800319c:	40021400 	.word	0x40021400

080031a0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a08      	ldr	r2, [pc, #32]	@ (80031d0 <HAL_SPI_MspDeInit+0x30>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d10a      	bne.n	80031c8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80031b2:	4b08      	ldr	r3, [pc, #32]	@ (80031d4 <HAL_SPI_MspDeInit+0x34>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b6:	4a07      	ldr	r2, [pc, #28]	@ (80031d4 <HAL_SPI_MspDeInit+0x34>)
 80031b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80031bc:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80031be:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80031c2:	4805      	ldr	r0, [pc, #20]	@ (80031d8 <HAL_SPI_MspDeInit+0x38>)
 80031c4:	f000 ff46 	bl	8004054 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40015000 	.word	0x40015000
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40021400 	.word	0x40021400

080031dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ec:	d10d      	bne.n	800320a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	4b09      	ldr	r3, [pc, #36]	@ (8003218 <HAL_TIM_Base_MspInit+0x3c>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	4a08      	ldr	r2, [pc, #32]	@ (8003218 <HAL_TIM_Base_MspInit+0x3c>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80031fe:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <HAL_TIM_Base_MspInit+0x3c>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800

0800321c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003220:	bf00      	nop
 8003222:	e7fd      	b.n	8003220 <NMI_Handler+0x4>

08003224 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003228:	bf00      	nop
 800322a:	e7fd      	b.n	8003228 <HardFault_Handler+0x4>

0800322c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003230:	bf00      	nop
 8003232:	e7fd      	b.n	8003230 <MemManage_Handler+0x4>

08003234 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003238:	bf00      	nop
 800323a:	e7fd      	b.n	8003238 <BusFault_Handler+0x4>

0800323c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003240:	bf00      	nop
 8003242:	e7fd      	b.n	8003240 <UsageFault_Handler+0x4>

08003244 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003256:	bf00      	nop
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003272:	f000 fc19 	bl	8003aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}

0800327a <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8003280:	f000 f9ce 	bl	8003620 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8003284:	f000 f98e 	bl	80035a4 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003288:	2202      	movs	r2, #2
 800328a:	2103      	movs	r1, #3
 800328c:	2082      	movs	r0, #130	@ 0x82
 800328e:	f000 fa1b 	bl	80036c8 <I2C3_Write>
    HAL_Delay(5);
 8003292:	2005      	movs	r0, #5
 8003294:	f000 fc28 	bl	8003ae8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003298:	2200      	movs	r2, #0
 800329a:	2103      	movs	r1, #3
 800329c:	2082      	movs	r0, #130	@ 0x82
 800329e:	f000 fa13 	bl	80036c8 <I2C3_Write>
    HAL_Delay(2);
 80032a2:	2002      	movs	r0, #2
 80032a4:	f000 fc20 	bl	8003ae8 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80032a8:	1cba      	adds	r2, r7, #2
 80032aa:	2302      	movs	r3, #2
 80032ac:	2100      	movs	r1, #0
 80032ae:	2082      	movs	r0, #130	@ 0x82
 80032b0:	f000 fa5a 	bl	8003768 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80032b4:	887b      	ldrh	r3, [r7, #2]
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80032ba:	887b      	ldrh	r3, [r7, #2]
 80032bc:	0a1b      	lsrs	r3, r3, #8
 80032be:	b29a      	uxth	r2, r3
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	f640 0211 	movw	r2, #2065	@ 0x811
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d001      	beq.n	80032d4 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e075      	b.n	80033c0 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80032d4:	2202      	movs	r2, #2
 80032d6:	2103      	movs	r1, #3
 80032d8:	2082      	movs	r0, #130	@ 0x82
 80032da:	f000 f9f5 	bl	80036c8 <I2C3_Write>
    HAL_Delay(5);
 80032de:	2005      	movs	r0, #5
 80032e0:	f000 fc02 	bl	8003ae8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80032e4:	2200      	movs	r2, #0
 80032e6:	2103      	movs	r1, #3
 80032e8:	2082      	movs	r0, #130	@ 0x82
 80032ea:	f000 f9ed 	bl	80036c8 <I2C3_Write>
    HAL_Delay(2);
 80032ee:	2002      	movs	r0, #2
 80032f0:	f000 fbfa 	bl	8003ae8 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80032f4:	2004      	movs	r0, #4
 80032f6:	f000 f867 	bl	80033c8 <STMPE811_Read>
 80032fa:	4603      	mov	r3, r0
 80032fc:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80032fe:	797b      	ldrb	r3, [r7, #5]
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003306:	797b      	ldrb	r3, [r7, #5]
 8003308:	461a      	mov	r2, r3
 800330a:	2104      	movs	r1, #4
 800330c:	2082      	movs	r0, #130	@ 0x82
 800330e:	f000 f9db 	bl	80036c8 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003312:	2004      	movs	r0, #4
 8003314:	f000 f858 	bl	80033c8 <STMPE811_Read>
 8003318:	4603      	mov	r3, r0
 800331a:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 800331c:	797b      	ldrb	r3, [r7, #5]
 800331e:	f023 0302 	bic.w	r3, r3, #2
 8003322:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003324:	797b      	ldrb	r3, [r7, #5]
 8003326:	461a      	mov	r2, r3
 8003328:	2104      	movs	r1, #4
 800332a:	2082      	movs	r0, #130	@ 0x82
 800332c:	f000 f9cc 	bl	80036c8 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8003330:	2249      	movs	r2, #73	@ 0x49
 8003332:	2120      	movs	r1, #32
 8003334:	2082      	movs	r0, #130	@ 0x82
 8003336:	f000 f9c7 	bl	80036c8 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 800333a:	2002      	movs	r0, #2
 800333c:	f000 fbd4 	bl	8003ae8 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8003340:	2201      	movs	r2, #1
 8003342:	2121      	movs	r1, #33	@ 0x21
 8003344:	2082      	movs	r0, #130	@ 0x82
 8003346:	f000 f9bf 	bl	80036c8 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 800334a:	2017      	movs	r0, #23
 800334c:	f000 f83c 	bl	80033c8 <STMPE811_Read>
 8003350:	4603      	mov	r3, r0
 8003352:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8003354:	797b      	ldrb	r3, [r7, #5]
 8003356:	f043 031e 	orr.w	r3, r3, #30
 800335a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 800335c:	797b      	ldrb	r3, [r7, #5]
 800335e:	461a      	mov	r2, r3
 8003360:	2117      	movs	r1, #23
 8003362:	2082      	movs	r0, #130	@ 0x82
 8003364:	f000 f9b0 	bl	80036c8 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003368:	229a      	movs	r2, #154	@ 0x9a
 800336a:	2141      	movs	r1, #65	@ 0x41
 800336c:	2082      	movs	r0, #130	@ 0x82
 800336e:	f000 f9ab 	bl	80036c8 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8003372:	2201      	movs	r2, #1
 8003374:	214a      	movs	r1, #74	@ 0x4a
 8003376:	2082      	movs	r0, #130	@ 0x82
 8003378:	f000 f9a6 	bl	80036c8 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800337c:	2201      	movs	r2, #1
 800337e:	214b      	movs	r1, #75	@ 0x4b
 8003380:	2082      	movs	r0, #130	@ 0x82
 8003382:	f000 f9a1 	bl	80036c8 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003386:	2200      	movs	r2, #0
 8003388:	214b      	movs	r1, #75	@ 0x4b
 800338a:	2082      	movs	r0, #130	@ 0x82
 800338c:	f000 f99c 	bl	80036c8 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8003390:	2201      	movs	r2, #1
 8003392:	2156      	movs	r1, #86	@ 0x56
 8003394:	2082      	movs	r0, #130	@ 0x82
 8003396:	f000 f997 	bl	80036c8 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 800339a:	2201      	movs	r2, #1
 800339c:	2158      	movs	r1, #88	@ 0x58
 800339e:	2082      	movs	r0, #130	@ 0x82
 80033a0:	f000 f992 	bl	80036c8 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80033a4:	2203      	movs	r2, #3
 80033a6:	2140      	movs	r1, #64	@ 0x40
 80033a8:	2082      	movs	r0, #130	@ 0x82
 80033aa:	f000 f98d 	bl	80036c8 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80033ae:	22ff      	movs	r2, #255	@ 0xff
 80033b0:	210b      	movs	r1, #11
 80033b2:	2082      	movs	r0, #130	@ 0x82
 80033b4:	f000 f988 	bl	80036c8 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80033b8:	20c8      	movs	r0, #200	@ 0xc8
 80033ba:	f000 fb95 	bl	8003ae8 <HAL_Delay>

    return STMPE811_State_Ok;
 80033be:	2302      	movs	r3, #2

}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 80033d2:	f107 020f 	add.w	r2, r7, #15
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	4619      	mov	r1, r3
 80033da:	2082      	movs	r0, #130	@ 0x82
 80033dc:	f000 f99e 	bl	800371c <I2C3_Read>

    return readData;
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	791a      	ldrb	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 80033fa:	2040      	movs	r0, #64	@ 0x40
 80033fc:	f7ff ffe4 	bl	80033c8 <STMPE811_Read>
 8003400:	4603      	mov	r3, r0
 8003402:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8003404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003408:	2b00      	cmp	r3, #0
 800340a:	db0e      	blt.n	800342a <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003412:	2201      	movs	r2, #1
 8003414:	214b      	movs	r1, #75	@ 0x4b
 8003416:	2082      	movs	r0, #130	@ 0x82
 8003418:	f000 f956 	bl	80036c8 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800341c:	2200      	movs	r2, #0
 800341e:	214b      	movs	r1, #75	@ 0x4b
 8003420:	2082      	movs	r0, #130	@ 0x82
 8003422:	f000 f951 	bl	80036c8 <I2C3_Write>

        return STMPE811_State_Released;
 8003426:	2301      	movs	r3, #1
 8003428:	e0a7      	b.n	800357a <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	799b      	ldrb	r3, [r3, #6]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d117      	bne.n	8003462 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f9b8 	bl	80037ac <TM_STMPE811_ReadX>
 800343c:	4603      	mov	r3, r0
 800343e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003442:	b29a      	uxth	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	885b      	ldrh	r3, [r3, #2]
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fa0d 	bl	800386c <TM_STMPE811_ReadY>
 8003452:	4603      	mov	r3, r0
 8003454:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003458:	3301      	adds	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	805a      	strh	r2, [r3, #2]
 8003460:	e048      	b.n	80034f4 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	799b      	ldrb	r3, [r3, #6]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d112      	bne.n	8003490 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f99c 	bl	80037ac <TM_STMPE811_ReadX>
 8003474:	4603      	mov	r3, r0
 8003476:	461a      	mov	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	885b      	ldrh	r3, [r3, #2]
 8003480:	4618      	mov	r0, r3
 8003482:	f000 f9f3 	bl	800386c <TM_STMPE811_ReadY>
 8003486:	4603      	mov	r3, r0
 8003488:	461a      	mov	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	805a      	strh	r2, [r3, #2]
 800348e:	e031      	b.n	80034f4 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	799b      	ldrb	r3, [r3, #6]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d115      	bne.n	80034c4 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	885b      	ldrh	r3, [r3, #2]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 f985 	bl	80037ac <TM_STMPE811_ReadX>
 80034a2:	4603      	mov	r3, r0
 80034a4:	461a      	mov	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f9dc 	bl	800386c <TM_STMPE811_ReadY>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80034ba:	3301      	adds	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	801a      	strh	r2, [r3, #0]
 80034c2:	e017      	b.n	80034f4 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	799b      	ldrb	r3, [r3, #6]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d113      	bne.n	80034f4 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 f96b 	bl	80037ac <TM_STMPE811_ReadX>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80034dc:	b29a      	uxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f9c0 	bl	800386c <TM_STMPE811_ReadY>
 80034ec:	4603      	mov	r3, r0
 80034ee:	461a      	mov	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80034f4:	2201      	movs	r2, #1
 80034f6:	214b      	movs	r1, #75	@ 0x4b
 80034f8:	2082      	movs	r0, #130	@ 0x82
 80034fa:	f000 f8e5 	bl	80036c8 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80034fe:	2200      	movs	r2, #0
 8003500:	214b      	movs	r1, #75	@ 0x4b
 8003502:	2082      	movs	r0, #130	@ 0x82
 8003504:	f000 f8e0 	bl	80036c8 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	799b      	ldrb	r3, [r3, #6]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <STMPE811_ReadTouch+0x12e>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	799b      	ldrb	r3, [r3, #6]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d115      	bne.n	8003544 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d027      	beq.n	8003570 <STMPE811_ReadTouch+0x186>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	2bee      	cmp	r3, #238	@ 0xee
 8003526:	d823      	bhi.n	8003570 <STMPE811_ReadTouch+0x186>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	885b      	ldrh	r3, [r3, #2]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01f      	beq.n	8003570 <STMPE811_ReadTouch+0x186>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	885b      	ldrh	r3, [r3, #2]
 8003534:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003538:	d81a      	bhi.n	8003570 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8003540:	2300      	movs	r3, #0
 8003542:	e01a      	b.n	800357a <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d012      	beq.n	8003572 <STMPE811_ReadTouch+0x188>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003554:	d80d      	bhi.n	8003572 <STMPE811_ReadTouch+0x188>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	885b      	ldrh	r3, [r3, #2]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <STMPE811_ReadTouch+0x188>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	885b      	ldrh	r3, [r3, #2]
 8003562:	2bee      	cmp	r3, #238	@ 0xee
 8003564:	d805      	bhi.n	8003572 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 800356c:	2300      	movs	r3, #0
 800356e:	e004      	b.n	800357a <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003570:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8003578:	2301      	movs	r3, #1
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8003588:	4b05      	ldr	r3, [pc, #20]	@ (80035a0 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003590:	bf00      	nop
 8003592:	e7fd      	b.n	8003590 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	20025c14 	.word	0x20025c14

080035a4 <I2C3_Init>:

static void I2C3_Init()
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	4b18      	ldr	r3, [pc, #96]	@ (8003610 <I2C3_Init+0x6c>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	4a17      	ldr	r2, [pc, #92]	@ (8003610 <I2C3_Init+0x6c>)
 80035b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ba:	4b15      	ldr	r3, [pc, #84]	@ (8003610 <I2C3_Init+0x6c>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80035c6:	4b13      	ldr	r3, [pc, #76]	@ (8003614 <I2C3_Init+0x70>)
 80035c8:	4a13      	ldr	r2, [pc, #76]	@ (8003618 <I2C3_Init+0x74>)
 80035ca:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80035cc:	4b11      	ldr	r3, [pc, #68]	@ (8003614 <I2C3_Init+0x70>)
 80035ce:	4a13      	ldr	r2, [pc, #76]	@ (800361c <I2C3_Init+0x78>)
 80035d0:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035d2:	4b10      	ldr	r3, [pc, #64]	@ (8003614 <I2C3_Init+0x70>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80035d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003614 <I2C3_Init+0x70>)
 80035da:	2200      	movs	r2, #0
 80035dc:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035de:	4b0d      	ldr	r3, [pc, #52]	@ (8003614 <I2C3_Init+0x70>)
 80035e0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80035e4:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80035e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <I2C3_Init+0x70>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035ec:	4b09      	ldr	r3, [pc, #36]	@ (8003614 <I2C3_Init+0x70>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80035f2:	4808      	ldr	r0, [pc, #32]	@ (8003614 <I2C3_Init+0x70>)
 80035f4:	f000 fe54 	bl	80042a0 <HAL_I2C_Init>
 80035f8:	4603      	mov	r3, r0
 80035fa:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8003602:	bf00      	nop
 8003604:	e7fd      	b.n	8003602 <I2C3_Init+0x5e>
    }
    return;
 8003606:	bf00      	nop
}
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800
 8003614:	20025bc0 	.word	0x20025bc0
 8003618:	40005c00 	.word	0x40005c00
 800361c:	000186a0 	.word	0x000186a0

08003620 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003626:	f107 030c 	add.w	r3, r7, #12
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	605a      	str	r2, [r3, #4]
 8003630:	609a      	str	r2, [r3, #8]
 8003632:	60da      	str	r2, [r3, #12]
 8003634:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	4b20      	ldr	r3, [pc, #128]	@ (80036bc <I2C3_MspInit+0x9c>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363e:	4a1f      	ldr	r2, [pc, #124]	@ (80036bc <I2C3_MspInit+0x9c>)
 8003640:	f043 0304 	orr.w	r3, r3, #4
 8003644:	6313      	str	r3, [r2, #48]	@ 0x30
 8003646:	4b1d      	ldr	r3, [pc, #116]	@ (80036bc <I2C3_MspInit+0x9c>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	607b      	str	r3, [r7, #4]
 8003656:	4b19      	ldr	r3, [pc, #100]	@ (80036bc <I2C3_MspInit+0x9c>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	4a18      	ldr	r2, [pc, #96]	@ (80036bc <I2C3_MspInit+0x9c>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	6313      	str	r3, [r2, #48]	@ 0x30
 8003662:	4b16      	ldr	r3, [pc, #88]	@ (80036bc <I2C3_MspInit+0x9c>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800366e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003672:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003674:	2312      	movs	r3, #18
 8003676:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367c:	2300      	movs	r3, #0
 800367e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003680:	2304      	movs	r3, #4
 8003682:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003684:	f107 030c 	add.w	r3, r7, #12
 8003688:	4619      	mov	r1, r3
 800368a:	480d      	ldr	r0, [pc, #52]	@ (80036c0 <I2C3_MspInit+0xa0>)
 800368c:	f000 fb36 	bl	8003cfc <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003690:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003694:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003696:	2312      	movs	r3, #18
 8003698:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369e:	2300      	movs	r3, #0
 80036a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80036a2:	2304      	movs	r3, #4
 80036a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80036a6:	f107 030c 	add.w	r3, r7, #12
 80036aa:	4619      	mov	r1, r3
 80036ac:	4805      	ldr	r0, [pc, #20]	@ (80036c4 <I2C3_MspInit+0xa4>)
 80036ae:	f000 fb25 	bl	8003cfc <HAL_GPIO_Init>
    
}
 80036b2:	bf00      	nop
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40020800 	.word	0x40020800
 80036c4:	40020000 	.word	0x40020000

080036c8 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af04      	add	r7, sp, #16
 80036ce:	4603      	mov	r3, r0
 80036d0:	80fb      	strh	r3, [r7, #6]
 80036d2:	460b      	mov	r3, r1
 80036d4:	717b      	strb	r3, [r7, #5]
 80036d6:	4613      	mov	r3, r2
 80036d8:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80036da:	793b      	ldrb	r3, [r7, #4]
 80036dc:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80036de:	797b      	ldrb	r3, [r7, #5]
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	88f9      	ldrh	r1, [r7, #6]
 80036e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003710 <I2C3_Write+0x48>)
 80036e6:	9302      	str	r3, [sp, #8]
 80036e8:	2301      	movs	r3, #1
 80036ea:	9301      	str	r3, [sp, #4]
 80036ec:	f107 030f 	add.w	r3, r7, #15
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	2301      	movs	r3, #1
 80036f4:	4807      	ldr	r0, [pc, #28]	@ (8003714 <I2C3_Write+0x4c>)
 80036f6:	f000 ff17 	bl	8004528 <HAL_I2C_Mem_Write>
 80036fa:	4603      	mov	r3, r0
 80036fc:	461a      	mov	r2, r3
 80036fe:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <I2C3_Write+0x50>)
 8003700:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003702:	f7ff ff3f 	bl	8003584 <verifyHAL_I2C_IS_OKAY>
}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	0003d090 	.word	0x0003d090
 8003714:	20025bc0 	.word	0x20025bc0
 8003718:	20025c14 	.word	0x20025c14

0800371c <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af04      	add	r7, sp, #16
 8003722:	4603      	mov	r3, r0
 8003724:	603a      	str	r2, [r7, #0]
 8003726:	71fb      	strb	r3, [r7, #7]
 8003728:	460b      	mov	r3, r1
 800372a:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	b299      	uxth	r1, r3
 8003730:	79bb      	ldrb	r3, [r7, #6]
 8003732:	b29a      	uxth	r2, r3
 8003734:	4b09      	ldr	r3, [pc, #36]	@ (800375c <I2C3_Read+0x40>)
 8003736:	9302      	str	r3, [sp, #8]
 8003738:	2301      	movs	r3, #1
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2301      	movs	r3, #1
 8003742:	4807      	ldr	r0, [pc, #28]	@ (8003760 <I2C3_Read+0x44>)
 8003744:	f000 ffea 	bl	800471c <HAL_I2C_Mem_Read>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	4b05      	ldr	r3, [pc, #20]	@ (8003764 <I2C3_Read+0x48>)
 800374e:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003750:	f7ff ff18 	bl	8003584 <verifyHAL_I2C_IS_OKAY>
}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	0003d090 	.word	0x0003d090
 8003760:	20025bc0 	.word	0x20025bc0
 8003764:	20025c14 	.word	0x20025c14

08003768 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af04      	add	r7, sp, #16
 800376e:	603a      	str	r2, [r7, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	4603      	mov	r3, r0
 8003774:	71fb      	strb	r3, [r7, #7]
 8003776:	460b      	mov	r3, r1
 8003778:	71bb      	strb	r3, [r7, #6]
 800377a:	4613      	mov	r3, r2
 800377c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	b299      	uxth	r1, r3
 8003782:	79bb      	ldrb	r3, [r7, #6]
 8003784:	b29a      	uxth	r2, r3
 8003786:	4b07      	ldr	r3, [pc, #28]	@ (80037a4 <I2C3_MulitByteRead+0x3c>)
 8003788:	9302      	str	r3, [sp, #8]
 800378a:	88bb      	ldrh	r3, [r7, #4]
 800378c:	9301      	str	r3, [sp, #4]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	2301      	movs	r3, #1
 8003794:	4804      	ldr	r0, [pc, #16]	@ (80037a8 <I2C3_MulitByteRead+0x40>)
 8003796:	f000 ffc1 	bl	800471c <HAL_I2C_Mem_Read>
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	0003d090 	.word	0x0003d090
 80037a8:	20025bc0 	.word	0x20025bc0

080037ac <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80037b6:	204d      	movs	r0, #77	@ 0x4d
 80037b8:	f7ff fe06 	bl	80033c8 <STMPE811_Read>
 80037bc:	4603      	mov	r3, r0
 80037be:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80037c0:	204e      	movs	r0, #78	@ 0x4e
 80037c2:	f7ff fe01 	bl	80033c8 <STMPE811_Read>
 80037c6:	4603      	mov	r3, r0
 80037c8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80037ca:	7a7b      	ldrb	r3, [r7, #9]
 80037cc:	b21b      	sxth	r3, r3
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	b21a      	sxth	r2, r3
 80037d2:	7a3b      	ldrb	r3, [r7, #8]
 80037d4:	b21b      	sxth	r3, r3
 80037d6:	4313      	orrs	r3, r2
 80037d8:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80037da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037de:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80037e2:	4293      	cmp	r3, r2
 80037e4:	dc06      	bgt.n	80037f4 <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 80037e6:	89fb      	ldrh	r3, [r7, #14]
 80037e8:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80037ec:	330c      	adds	r3, #12
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	81fb      	strh	r3, [r7, #14]
 80037f2:	e005      	b.n	8003800 <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 80037f4:	89fb      	ldrh	r3, [r7, #14]
 80037f6:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80037fa:	3308      	adds	r3, #8
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8003800:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003804:	4a18      	ldr	r2, [pc, #96]	@ (8003868 <TM_STMPE811_ReadX+0xbc>)
 8003806:	fb82 1203 	smull	r1, r2, r2, r3
 800380a:	441a      	add	r2, r3
 800380c:	10d2      	asrs	r2, r2, #3
 800380e:	17db      	asrs	r3, r3, #31
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003814:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003818:	2bef      	cmp	r3, #239	@ 0xef
 800381a:	dd02      	ble.n	8003822 <TM_STMPE811_ReadX+0x76>
        val = 239;
 800381c:	23ef      	movs	r3, #239	@ 0xef
 800381e:	81fb      	strh	r3, [r7, #14]
 8003820:	e005      	b.n	800382e <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 8003822:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003826:	2b00      	cmp	r3, #0
 8003828:	da01      	bge.n	800382e <TM_STMPE811_ReadX+0x82>
        val = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 800382e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003832:	88fb      	ldrh	r3, [r7, #6]
 8003834:	429a      	cmp	r2, r3
 8003836:	dd05      	ble.n	8003844 <TM_STMPE811_ReadX+0x98>
 8003838:	89fa      	ldrh	r2, [r7, #14]
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	b29b      	uxth	r3, r3
 8003840:	b21b      	sxth	r3, r3
 8003842:	e004      	b.n	800384e <TM_STMPE811_ReadX+0xa2>
 8003844:	89fb      	ldrh	r3, [r7, #14]
 8003846:	88fa      	ldrh	r2, [r7, #6]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	b29b      	uxth	r3, r3
 800384c:	b21b      	sxth	r3, r3
 800384e:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003850:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003854:	2b04      	cmp	r3, #4
 8003856:	dd01      	ble.n	800385c <TM_STMPE811_ReadX+0xb0>
        return val;
 8003858:	89fb      	ldrh	r3, [r7, #14]
 800385a:	e000      	b.n	800385e <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 800385c:	88fb      	ldrh	r3, [r7, #6]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	88888889 	.word	0x88888889

0800386c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003876:	204f      	movs	r0, #79	@ 0x4f
 8003878:	f7ff fda6 	bl	80033c8 <STMPE811_Read>
 800387c:	4603      	mov	r3, r0
 800387e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003880:	2050      	movs	r0, #80	@ 0x50
 8003882:	f7ff fda1 	bl	80033c8 <STMPE811_Read>
 8003886:	4603      	mov	r3, r0
 8003888:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800388a:	7a7b      	ldrb	r3, [r7, #9]
 800388c:	b21b      	sxth	r3, r3
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	b21a      	sxth	r2, r3
 8003892:	7a3b      	ldrb	r3, [r7, #8]
 8003894:	b21b      	sxth	r3, r3
 8003896:	4313      	orrs	r3, r2
 8003898:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 800389a:	89fb      	ldrh	r3, [r7, #14]
 800389c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80038a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038a8:	4a18      	ldr	r2, [pc, #96]	@ (800390c <TM_STMPE811_ReadY+0xa0>)
 80038aa:	fb82 1203 	smull	r1, r2, r2, r3
 80038ae:	1052      	asrs	r2, r2, #1
 80038b0:	17db      	asrs	r3, r3, #31
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80038b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	dc02      	bgt.n	80038c4 <TM_STMPE811_ReadY+0x58>
        val = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	81fb      	strh	r3, [r7, #14]
 80038c2:	e007      	b.n	80038d4 <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 80038c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038c8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80038cc:	db02      	blt.n	80038d4 <TM_STMPE811_ReadY+0x68>
        val = 319;
 80038ce:	f240 133f 	movw	r3, #319	@ 0x13f
 80038d2:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80038d4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	429a      	cmp	r2, r3
 80038dc:	dd05      	ble.n	80038ea <TM_STMPE811_ReadY+0x7e>
 80038de:	89fa      	ldrh	r2, [r7, #14]
 80038e0:	88fb      	ldrh	r3, [r7, #6]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	b21b      	sxth	r3, r3
 80038e8:	e004      	b.n	80038f4 <TM_STMPE811_ReadY+0x88>
 80038ea:	89fb      	ldrh	r3, [r7, #14]
 80038ec:	88fa      	ldrh	r2, [r7, #6]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	b21b      	sxth	r3, r3
 80038f4:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80038f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	dd01      	ble.n	8003902 <TM_STMPE811_ReadY+0x96>
        return val;
 80038fe:	89fb      	ldrh	r3, [r7, #14]
 8003900:	e000      	b.n	8003904 <TM_STMPE811_ReadY+0x98>
    }
    return y;
 8003902:	88fb      	ldrh	r3, [r7, #6]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	2e8ba2e9 	.word	0x2e8ba2e9

08003910 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003928:	4a14      	ldr	r2, [pc, #80]	@ (800397c <_sbrk+0x5c>)
 800392a:	4b15      	ldr	r3, [pc, #84]	@ (8003980 <_sbrk+0x60>)
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003934:	4b13      	ldr	r3, [pc, #76]	@ (8003984 <_sbrk+0x64>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800393c:	4b11      	ldr	r3, [pc, #68]	@ (8003984 <_sbrk+0x64>)
 800393e:	4a12      	ldr	r2, [pc, #72]	@ (8003988 <_sbrk+0x68>)
 8003940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003942:	4b10      	ldr	r3, [pc, #64]	@ (8003984 <_sbrk+0x64>)
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4413      	add	r3, r2
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	429a      	cmp	r2, r3
 800394e:	d207      	bcs.n	8003960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003950:	f003 fcdc 	bl	800730c <__errno>
 8003954:	4603      	mov	r3, r0
 8003956:	220c      	movs	r2, #12
 8003958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800395a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800395e:	e009      	b.n	8003974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003960:	4b08      	ldr	r3, [pc, #32]	@ (8003984 <_sbrk+0x64>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003966:	4b07      	ldr	r3, [pc, #28]	@ (8003984 <_sbrk+0x64>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4413      	add	r3, r2
 800396e:	4a05      	ldr	r2, [pc, #20]	@ (8003984 <_sbrk+0x64>)
 8003970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003972:	68fb      	ldr	r3, [r7, #12]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20030000 	.word	0x20030000
 8003980:	00000400 	.word	0x00000400
 8003984:	20025c18 	.word	0x20025c18
 8003988:	20025d68 	.word	0x20025d68

0800398c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003990:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <SystemInit+0x20>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003996:	4a05      	ldr	r2, [pc, #20]	@ (80039ac <SystemInit+0x20>)
 8003998:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800399c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80039b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039b4:	f7ff ffea 	bl	800398c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039b8:	480c      	ldr	r0, [pc, #48]	@ (80039ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80039ba:	490d      	ldr	r1, [pc, #52]	@ (80039f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80039bc:	4a0d      	ldr	r2, [pc, #52]	@ (80039f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80039be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039c0:	e002      	b.n	80039c8 <LoopCopyDataInit>

080039c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039c6:	3304      	adds	r3, #4

080039c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039cc:	d3f9      	bcc.n	80039c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039ce:	4a0a      	ldr	r2, [pc, #40]	@ (80039f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039d0:	4c0a      	ldr	r4, [pc, #40]	@ (80039fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80039d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039d4:	e001      	b.n	80039da <LoopFillZerobss>

080039d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039d8:	3204      	adds	r2, #4

080039da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039dc:	d3fb      	bcc.n	80039d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80039de:	f003 fc9b 	bl	8007318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039e2:	f7fe fdf5 	bl	80025d0 <main>
  bx  lr    
 80039e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80039e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80039ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039f0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80039f4:	08008e40 	.word	0x08008e40
  ldr r2, =_sbss
 80039f8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80039fc:	20025d68 	.word	0x20025d68

08003a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a00:	e7fe      	b.n	8003a00 <ADC_IRQHandler>
	...

08003a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a08:	4b0e      	ldr	r3, [pc, #56]	@ (8003a44 <HAL_Init+0x40>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a44 <HAL_Init+0x40>)
 8003a0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a14:	4b0b      	ldr	r3, [pc, #44]	@ (8003a44 <HAL_Init+0x40>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a0a      	ldr	r2, [pc, #40]	@ (8003a44 <HAL_Init+0x40>)
 8003a1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a20:	4b08      	ldr	r3, [pc, #32]	@ (8003a44 <HAL_Init+0x40>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a07      	ldr	r2, [pc, #28]	@ (8003a44 <HAL_Init+0x40>)
 8003a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a2c:	2003      	movs	r0, #3
 8003a2e:	f000 f931 	bl	8003c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a32:	2000      	movs	r0, #0
 8003a34:	f000 f808 	bl	8003a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a38:	f7ff f98e 	bl	8002d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023c00 	.word	0x40023c00

08003a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a50:	4b12      	ldr	r3, [pc, #72]	@ (8003a9c <HAL_InitTick+0x54>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4b12      	ldr	r3, [pc, #72]	@ (8003aa0 <HAL_InitTick+0x58>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 f93b 	bl	8003ce2 <HAL_SYSTICK_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e00e      	b.n	8003a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b0f      	cmp	r3, #15
 8003a7a:	d80a      	bhi.n	8003a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a84:	f000 f911 	bl	8003caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a88:	4a06      	ldr	r2, [pc, #24]	@ (8003aa4 <HAL_InitTick+0x5c>)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e000      	b.n	8003a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000010 	.word	0x20000010
 8003aa0:	20000018 	.word	0x20000018
 8003aa4:	20000014 	.word	0x20000014

08003aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003aac:	4b06      	ldr	r3, [pc, #24]	@ (8003ac8 <HAL_IncTick+0x20>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <HAL_IncTick+0x24>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	4a04      	ldr	r2, [pc, #16]	@ (8003acc <HAL_IncTick+0x24>)
 8003aba:	6013      	str	r3, [r2, #0]
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000018 	.word	0x20000018
 8003acc:	20025c1c 	.word	0x20025c1c

08003ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ad4:	4b03      	ldr	r3, [pc, #12]	@ (8003ae4 <HAL_GetTick+0x14>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	20025c1c 	.word	0x20025c1c

08003ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003af0:	f7ff ffee 	bl	8003ad0 <HAL_GetTick>
 8003af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b00:	d005      	beq.n	8003b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b02:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <HAL_Delay+0x44>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b0e:	bf00      	nop
 8003b10:	f7ff ffde 	bl	8003ad0 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d8f7      	bhi.n	8003b10 <HAL_Delay+0x28>
  {
  }
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000018 	.word	0x20000018

08003b30 <__NVIC_SetPriorityGrouping>:
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b40:	4b0c      	ldr	r3, [pc, #48]	@ (8003b74 <__NVIC_SetPriorityGrouping+0x44>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b62:	4a04      	ldr	r2, [pc, #16]	@ (8003b74 <__NVIC_SetPriorityGrouping+0x44>)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	60d3      	str	r3, [r2, #12]
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	e000ed00 	.word	0xe000ed00

08003b78 <__NVIC_GetPriorityGrouping>:
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b7c:	4b04      	ldr	r3, [pc, #16]	@ (8003b90 <__NVIC_GetPriorityGrouping+0x18>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	f003 0307 	and.w	r3, r3, #7
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	e000ed00 	.word	0xe000ed00

08003b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	6039      	str	r1, [r7, #0]
 8003b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	db0a      	blt.n	8003bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	490c      	ldr	r1, [pc, #48]	@ (8003be0 <__NVIC_SetPriority+0x4c>)
 8003bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb2:	0112      	lsls	r2, r2, #4
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bbc:	e00a      	b.n	8003bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4908      	ldr	r1, [pc, #32]	@ (8003be4 <__NVIC_SetPriority+0x50>)
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	3b04      	subs	r3, #4
 8003bcc:	0112      	lsls	r2, r2, #4
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	761a      	strb	r2, [r3, #24]
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	e000e100 	.word	0xe000e100
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b089      	sub	sp, #36	@ 0x24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f1c3 0307 	rsb	r3, r3, #7
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	bf28      	it	cs
 8003c06:	2304      	movcs	r3, #4
 8003c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	2b06      	cmp	r3, #6
 8003c10:	d902      	bls.n	8003c18 <NVIC_EncodePriority+0x30>
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	3b03      	subs	r3, #3
 8003c16:	e000      	b.n	8003c1a <NVIC_EncodePriority+0x32>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43da      	mvns	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3a:	43d9      	mvns	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c40:	4313      	orrs	r3, r2
         );
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3724      	adds	r7, #36	@ 0x24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
	...

08003c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c60:	d301      	bcc.n	8003c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c62:	2301      	movs	r3, #1
 8003c64:	e00f      	b.n	8003c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c66:	4a0a      	ldr	r2, [pc, #40]	@ (8003c90 <SysTick_Config+0x40>)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c6e:	210f      	movs	r1, #15
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c74:	f7ff ff8e 	bl	8003b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c78:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <SysTick_Config+0x40>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c7e:	4b04      	ldr	r3, [pc, #16]	@ (8003c90 <SysTick_Config+0x40>)
 8003c80:	2207      	movs	r2, #7
 8003c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	e000e010 	.word	0xe000e010

08003c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ff47 	bl	8003b30 <__NVIC_SetPriorityGrouping>
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b086      	sub	sp, #24
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cbc:	f7ff ff5c 	bl	8003b78 <__NVIC_GetPriorityGrouping>
 8003cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	6978      	ldr	r0, [r7, #20]
 8003cc8:	f7ff ff8e 	bl	8003be8 <NVIC_EncodePriority>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff ff5d 	bl	8003b94 <__NVIC_SetPriority>
}
 8003cda:	bf00      	nop
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff ffb0 	bl	8003c50 <SysTick_Config>
 8003cf0:	4603      	mov	r3, r0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b089      	sub	sp, #36	@ 0x24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	e177      	b.n	8004008 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d18:	2201      	movs	r2, #1
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	f040 8166 	bne.w	8004002 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d005      	beq.n	8003d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d130      	bne.n	8003db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	2203      	movs	r2, #3
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4013      	ands	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d84:	2201      	movs	r2, #1
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 0201 	and.w	r2, r3, #1
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d017      	beq.n	8003dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d123      	bne.n	8003e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	08da      	lsrs	r2, r3, #3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3208      	adds	r2, #8
 8003e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	220f      	movs	r2, #15
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	08da      	lsrs	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3208      	adds	r2, #8
 8003e3a:	69b9      	ldr	r1, [r7, #24]
 8003e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	2203      	movs	r2, #3
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4013      	ands	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0203 	and.w	r2, r3, #3
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80c0 	beq.w	8004002 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	4b66      	ldr	r3, [pc, #408]	@ (8004020 <HAL_GPIO_Init+0x324>)
 8003e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8a:	4a65      	ldr	r2, [pc, #404]	@ (8004020 <HAL_GPIO_Init+0x324>)
 8003e8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e90:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e92:	4b63      	ldr	r3, [pc, #396]	@ (8004020 <HAL_GPIO_Init+0x324>)
 8003e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e9e:	4a61      	ldr	r2, [pc, #388]	@ (8004024 <HAL_GPIO_Init+0x328>)
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	089b      	lsrs	r3, r3, #2
 8003ea4:	3302      	adds	r3, #2
 8003ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	220f      	movs	r2, #15
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a58      	ldr	r2, [pc, #352]	@ (8004028 <HAL_GPIO_Init+0x32c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d037      	beq.n	8003f3a <HAL_GPIO_Init+0x23e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a57      	ldr	r2, [pc, #348]	@ (800402c <HAL_GPIO_Init+0x330>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d031      	beq.n	8003f36 <HAL_GPIO_Init+0x23a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a56      	ldr	r2, [pc, #344]	@ (8004030 <HAL_GPIO_Init+0x334>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d02b      	beq.n	8003f32 <HAL_GPIO_Init+0x236>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a55      	ldr	r2, [pc, #340]	@ (8004034 <HAL_GPIO_Init+0x338>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d025      	beq.n	8003f2e <HAL_GPIO_Init+0x232>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a54      	ldr	r2, [pc, #336]	@ (8004038 <HAL_GPIO_Init+0x33c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d01f      	beq.n	8003f2a <HAL_GPIO_Init+0x22e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a53      	ldr	r2, [pc, #332]	@ (800403c <HAL_GPIO_Init+0x340>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d019      	beq.n	8003f26 <HAL_GPIO_Init+0x22a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a52      	ldr	r2, [pc, #328]	@ (8004040 <HAL_GPIO_Init+0x344>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_GPIO_Init+0x226>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a51      	ldr	r2, [pc, #324]	@ (8004044 <HAL_GPIO_Init+0x348>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00d      	beq.n	8003f1e <HAL_GPIO_Init+0x222>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a50      	ldr	r2, [pc, #320]	@ (8004048 <HAL_GPIO_Init+0x34c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d007      	beq.n	8003f1a <HAL_GPIO_Init+0x21e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a4f      	ldr	r2, [pc, #316]	@ (800404c <HAL_GPIO_Init+0x350>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <HAL_GPIO_Init+0x21a>
 8003f12:	2309      	movs	r3, #9
 8003f14:	e012      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f16:	230a      	movs	r3, #10
 8003f18:	e010      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	e00e      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f1e:	2307      	movs	r3, #7
 8003f20:	e00c      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f22:	2306      	movs	r3, #6
 8003f24:	e00a      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f26:	2305      	movs	r3, #5
 8003f28:	e008      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f2a:	2304      	movs	r3, #4
 8003f2c:	e006      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e004      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e002      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <HAL_GPIO_Init+0x240>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	f002 0203 	and.w	r2, r2, #3
 8003f42:	0092      	lsls	r2, r2, #2
 8003f44:	4093      	lsls	r3, r2
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f4c:	4935      	ldr	r1, [pc, #212]	@ (8004024 <HAL_GPIO_Init+0x328>)
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	089b      	lsrs	r3, r3, #2
 8003f52:	3302      	adds	r3, #2
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004050 <HAL_GPIO_Init+0x354>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f7e:	4a34      	ldr	r2, [pc, #208]	@ (8004050 <HAL_GPIO_Init+0x354>)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f84:	4b32      	ldr	r3, [pc, #200]	@ (8004050 <HAL_GPIO_Init+0x354>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fa8:	4a29      	ldr	r2, [pc, #164]	@ (8004050 <HAL_GPIO_Init+0x354>)
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fae:	4b28      	ldr	r3, [pc, #160]	@ (8004050 <HAL_GPIO_Init+0x354>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8004050 <HAL_GPIO_Init+0x354>)
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8004050 <HAL_GPIO_Init+0x354>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ffc:	4a14      	ldr	r2, [pc, #80]	@ (8004050 <HAL_GPIO_Init+0x354>)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	3301      	adds	r3, #1
 8004006:	61fb      	str	r3, [r7, #28]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	2b0f      	cmp	r3, #15
 800400c:	f67f ae84 	bls.w	8003d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004010:	bf00      	nop
 8004012:	bf00      	nop
 8004014:	3724      	adds	r7, #36	@ 0x24
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40023800 	.word	0x40023800
 8004024:	40013800 	.word	0x40013800
 8004028:	40020000 	.word	0x40020000
 800402c:	40020400 	.word	0x40020400
 8004030:	40020800 	.word	0x40020800
 8004034:	40020c00 	.word	0x40020c00
 8004038:	40021000 	.word	0x40021000
 800403c:	40021400 	.word	0x40021400
 8004040:	40021800 	.word	0x40021800
 8004044:	40021c00 	.word	0x40021c00
 8004048:	40022000 	.word	0x40022000
 800404c:	40022400 	.word	0x40022400
 8004050:	40013c00 	.word	0x40013c00

08004054 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004066:	2300      	movs	r3, #0
 8004068:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	e0d9      	b.n	8004224 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004070:	2201      	movs	r2, #1
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4013      	ands	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	429a      	cmp	r2, r3
 8004088:	f040 80c9 	bne.w	800421e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800408c:	4a6b      	ldr	r2, [pc, #428]	@ (800423c <HAL_GPIO_DeInit+0x1e8>)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	089b      	lsrs	r3, r3, #2
 8004092:	3302      	adds	r3, #2
 8004094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004098:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	220f      	movs	r2, #15
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	4013      	ands	r3, r2
 80040ac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a63      	ldr	r2, [pc, #396]	@ (8004240 <HAL_GPIO_DeInit+0x1ec>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d037      	beq.n	8004126 <HAL_GPIO_DeInit+0xd2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a62      	ldr	r2, [pc, #392]	@ (8004244 <HAL_GPIO_DeInit+0x1f0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d031      	beq.n	8004122 <HAL_GPIO_DeInit+0xce>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a61      	ldr	r2, [pc, #388]	@ (8004248 <HAL_GPIO_DeInit+0x1f4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d02b      	beq.n	800411e <HAL_GPIO_DeInit+0xca>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a60      	ldr	r2, [pc, #384]	@ (800424c <HAL_GPIO_DeInit+0x1f8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d025      	beq.n	800411a <HAL_GPIO_DeInit+0xc6>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a5f      	ldr	r2, [pc, #380]	@ (8004250 <HAL_GPIO_DeInit+0x1fc>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d01f      	beq.n	8004116 <HAL_GPIO_DeInit+0xc2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a5e      	ldr	r2, [pc, #376]	@ (8004254 <HAL_GPIO_DeInit+0x200>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d019      	beq.n	8004112 <HAL_GPIO_DeInit+0xbe>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a5d      	ldr	r2, [pc, #372]	@ (8004258 <HAL_GPIO_DeInit+0x204>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <HAL_GPIO_DeInit+0xba>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a5c      	ldr	r2, [pc, #368]	@ (800425c <HAL_GPIO_DeInit+0x208>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00d      	beq.n	800410a <HAL_GPIO_DeInit+0xb6>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a5b      	ldr	r2, [pc, #364]	@ (8004260 <HAL_GPIO_DeInit+0x20c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d007      	beq.n	8004106 <HAL_GPIO_DeInit+0xb2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a5a      	ldr	r2, [pc, #360]	@ (8004264 <HAL_GPIO_DeInit+0x210>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d101      	bne.n	8004102 <HAL_GPIO_DeInit+0xae>
 80040fe:	2309      	movs	r3, #9
 8004100:	e012      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 8004102:	230a      	movs	r3, #10
 8004104:	e010      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 8004106:	2308      	movs	r3, #8
 8004108:	e00e      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 800410a:	2307      	movs	r3, #7
 800410c:	e00c      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 800410e:	2306      	movs	r3, #6
 8004110:	e00a      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 8004112:	2305      	movs	r3, #5
 8004114:	e008      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 8004116:	2304      	movs	r3, #4
 8004118:	e006      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 800411a:	2303      	movs	r3, #3
 800411c:	e004      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 800411e:	2302      	movs	r3, #2
 8004120:	e002      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <HAL_GPIO_DeInit+0xd4>
 8004126:	2300      	movs	r3, #0
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	f002 0203 	and.w	r2, r2, #3
 800412e:	0092      	lsls	r2, r2, #2
 8004130:	4093      	lsls	r3, r2
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	429a      	cmp	r2, r3
 8004136:	d132      	bne.n	800419e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004138:	4b4b      	ldr	r3, [pc, #300]	@ (8004268 <HAL_GPIO_DeInit+0x214>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	43db      	mvns	r3, r3
 8004140:	4949      	ldr	r1, [pc, #292]	@ (8004268 <HAL_GPIO_DeInit+0x214>)
 8004142:	4013      	ands	r3, r2
 8004144:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004146:	4b48      	ldr	r3, [pc, #288]	@ (8004268 <HAL_GPIO_DeInit+0x214>)
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	43db      	mvns	r3, r3
 800414e:	4946      	ldr	r1, [pc, #280]	@ (8004268 <HAL_GPIO_DeInit+0x214>)
 8004150:	4013      	ands	r3, r2
 8004152:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004154:	4b44      	ldr	r3, [pc, #272]	@ (8004268 <HAL_GPIO_DeInit+0x214>)
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	43db      	mvns	r3, r3
 800415c:	4942      	ldr	r1, [pc, #264]	@ (8004268 <HAL_GPIO_DeInit+0x214>)
 800415e:	4013      	ands	r3, r2
 8004160:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004162:	4b41      	ldr	r3, [pc, #260]	@ (8004268 <HAL_GPIO_DeInit+0x214>)
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	43db      	mvns	r3, r3
 800416a:	493f      	ldr	r1, [pc, #252]	@ (8004268 <HAL_GPIO_DeInit+0x214>)
 800416c:	4013      	ands	r3, r2
 800416e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	220f      	movs	r2, #15
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004180:	4a2e      	ldr	r2, [pc, #184]	@ (800423c <HAL_GPIO_DeInit+0x1e8>)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	089b      	lsrs	r3, r3, #2
 8004186:	3302      	adds	r3, #2
 8004188:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	43da      	mvns	r2, r3
 8004190:	482a      	ldr	r0, [pc, #168]	@ (800423c <HAL_GPIO_DeInit+0x1e8>)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	400a      	ands	r2, r1
 8004198:	3302      	adds	r3, #2
 800419a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	2103      	movs	r1, #3
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	43db      	mvns	r3, r3
 80041ae:	401a      	ands	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	08da      	lsrs	r2, r3, #3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3208      	adds	r2, #8
 80041bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	220f      	movs	r2, #15
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43db      	mvns	r3, r3
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	08d2      	lsrs	r2, r2, #3
 80041d4:	4019      	ands	r1, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3208      	adds	r2, #8
 80041da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	2103      	movs	r1, #3
 80041e8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	401a      	ands	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	2101      	movs	r1, #1
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	401a      	ands	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	2103      	movs	r1, #3
 8004212:	fa01 f303 	lsl.w	r3, r1, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	401a      	ands	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	3301      	adds	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b0f      	cmp	r3, #15
 8004228:	f67f af22 	bls.w	8004070 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40013800 	.word	0x40013800
 8004240:	40020000 	.word	0x40020000
 8004244:	40020400 	.word	0x40020400
 8004248:	40020800 	.word	0x40020800
 800424c:	40020c00 	.word	0x40020c00
 8004250:	40021000 	.word	0x40021000
 8004254:	40021400 	.word	0x40021400
 8004258:	40021800 	.word	0x40021800
 800425c:	40021c00 	.word	0x40021c00
 8004260:	40022000 	.word	0x40022000
 8004264:	40022400 	.word	0x40022400
 8004268:	40013c00 	.word	0x40013c00

0800426c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	807b      	strh	r3, [r7, #2]
 8004278:	4613      	mov	r3, r2
 800427a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800427c:	787b      	ldrb	r3, [r7, #1]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004282:	887a      	ldrh	r2, [r7, #2]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004288:	e003      	b.n	8004292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800428a:	887b      	ldrh	r3, [r7, #2]
 800428c:	041a      	lsls	r2, r3, #16
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	619a      	str	r2, [r3, #24]
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e12b      	b.n	800450a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fe fd6e 	bl	8002da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	@ 0x24
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004302:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004304:	f001 ff82 	bl	800620c <HAL_RCC_GetPCLK1Freq>
 8004308:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4a81      	ldr	r2, [pc, #516]	@ (8004514 <HAL_I2C_Init+0x274>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d807      	bhi.n	8004324 <HAL_I2C_Init+0x84>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4a80      	ldr	r2, [pc, #512]	@ (8004518 <HAL_I2C_Init+0x278>)
 8004318:	4293      	cmp	r3, r2
 800431a:	bf94      	ite	ls
 800431c:	2301      	movls	r3, #1
 800431e:	2300      	movhi	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	e006      	b.n	8004332 <HAL_I2C_Init+0x92>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4a7d      	ldr	r2, [pc, #500]	@ (800451c <HAL_I2C_Init+0x27c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	bf94      	ite	ls
 800432c:	2301      	movls	r3, #1
 800432e:	2300      	movhi	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e0e7      	b.n	800450a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4a78      	ldr	r2, [pc, #480]	@ (8004520 <HAL_I2C_Init+0x280>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	0c9b      	lsrs	r3, r3, #18
 8004344:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	4a6a      	ldr	r2, [pc, #424]	@ (8004514 <HAL_I2C_Init+0x274>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d802      	bhi.n	8004374 <HAL_I2C_Init+0xd4>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	3301      	adds	r3, #1
 8004372:	e009      	b.n	8004388 <HAL_I2C_Init+0xe8>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800437a:	fb02 f303 	mul.w	r3, r2, r3
 800437e:	4a69      	ldr	r2, [pc, #420]	@ (8004524 <HAL_I2C_Init+0x284>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	099b      	lsrs	r3, r3, #6
 8004386:	3301      	adds	r3, #1
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	430b      	orrs	r3, r1
 800438e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800439a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	495c      	ldr	r1, [pc, #368]	@ (8004514 <HAL_I2C_Init+0x274>)
 80043a4:	428b      	cmp	r3, r1
 80043a6:	d819      	bhi.n	80043dc <HAL_I2C_Init+0x13c>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	1e59      	subs	r1, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80043b6:	1c59      	adds	r1, r3, #1
 80043b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80043bc:	400b      	ands	r3, r1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <HAL_I2C_Init+0x138>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1e59      	subs	r1, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80043d0:	3301      	adds	r3, #1
 80043d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d6:	e051      	b.n	800447c <HAL_I2C_Init+0x1dc>
 80043d8:	2304      	movs	r3, #4
 80043da:	e04f      	b.n	800447c <HAL_I2C_Init+0x1dc>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d111      	bne.n	8004408 <HAL_I2C_Init+0x168>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	1e58      	subs	r0, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6859      	ldr	r1, [r3, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	440b      	add	r3, r1
 80043f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043f6:	3301      	adds	r3, #1
 80043f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	e012      	b.n	800442e <HAL_I2C_Init+0x18e>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	1e58      	subs	r0, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6859      	ldr	r1, [r3, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	0099      	lsls	r1, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	fbb0 f3f3 	udiv	r3, r0, r3
 800441e:	3301      	adds	r3, #1
 8004420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf0c      	ite	eq
 8004428:	2301      	moveq	r3, #1
 800442a:	2300      	movne	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_I2C_Init+0x196>
 8004432:	2301      	movs	r3, #1
 8004434:	e022      	b.n	800447c <HAL_I2C_Init+0x1dc>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10e      	bne.n	800445c <HAL_I2C_Init+0x1bc>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1e58      	subs	r0, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6859      	ldr	r1, [r3, #4]
 8004446:	460b      	mov	r3, r1
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	440b      	add	r3, r1
 800444c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004450:	3301      	adds	r3, #1
 8004452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800445a:	e00f      	b.n	800447c <HAL_I2C_Init+0x1dc>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1e58      	subs	r0, r3, #1
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6859      	ldr	r1, [r3, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	0099      	lsls	r1, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004472:	3301      	adds	r3, #1
 8004474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004478:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	6809      	ldr	r1, [r1, #0]
 8004480:	4313      	orrs	r3, r2
 8004482:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80044aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6911      	ldr	r1, [r2, #16]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68d2      	ldr	r2, [r2, #12]
 80044b6:	4311      	orrs	r1, r2
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	430b      	orrs	r3, r1
 80044be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	000186a0 	.word	0x000186a0
 8004518:	001e847f 	.word	0x001e847f
 800451c:	003d08ff 	.word	0x003d08ff
 8004520:	431bde83 	.word	0x431bde83
 8004524:	10624dd3 	.word	0x10624dd3

08004528 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	4608      	mov	r0, r1
 8004532:	4611      	mov	r1, r2
 8004534:	461a      	mov	r2, r3
 8004536:	4603      	mov	r3, r0
 8004538:	817b      	strh	r3, [r7, #10]
 800453a:	460b      	mov	r3, r1
 800453c:	813b      	strh	r3, [r7, #8]
 800453e:	4613      	mov	r3, r2
 8004540:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004542:	f7ff fac5 	bl	8003ad0 <HAL_GetTick>
 8004546:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b20      	cmp	r3, #32
 8004552:	f040 80d9 	bne.w	8004708 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	2319      	movs	r3, #25
 800455c:	2201      	movs	r2, #1
 800455e:	496d      	ldr	r1, [pc, #436]	@ (8004714 <HAL_I2C_Mem_Write+0x1ec>)
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 fc8b 	bl	8004e7c <I2C_WaitOnFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800456c:	2302      	movs	r3, #2
 800456e:	e0cc      	b.n	800470a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <HAL_I2C_Mem_Write+0x56>
 800457a:	2302      	movs	r3, #2
 800457c:	e0c5      	b.n	800470a <HAL_I2C_Mem_Write+0x1e2>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b01      	cmp	r3, #1
 8004592:	d007      	beq.n	80045a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2221      	movs	r2, #33	@ 0x21
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2240      	movs	r2, #64	@ 0x40
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a3a      	ldr	r2, [r7, #32]
 80045ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80045d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4a4d      	ldr	r2, [pc, #308]	@ (8004718 <HAL_I2C_Mem_Write+0x1f0>)
 80045e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045e6:	88f8      	ldrh	r0, [r7, #6]
 80045e8:	893a      	ldrh	r2, [r7, #8]
 80045ea:	8979      	ldrh	r1, [r7, #10]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	9301      	str	r3, [sp, #4]
 80045f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	4603      	mov	r3, r0
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 fac2 	bl	8004b80 <I2C_RequestMemoryWrite>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d052      	beq.n	80046a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e081      	b.n	800470a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 fd50 	bl	80050b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00d      	beq.n	8004632 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	2b04      	cmp	r3, #4
 800461c:	d107      	bne.n	800462e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800462c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e06b      	b.n	800470a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	781a      	ldrb	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b04      	cmp	r3, #4
 800466e:	d11b      	bne.n	80046a8 <HAL_I2C_Mem_Write+0x180>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004674:	2b00      	cmp	r3, #0
 8004676:	d017      	beq.n	80046a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1aa      	bne.n	8004606 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 fd43 	bl	8005140 <I2C_WaitOnBTFFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00d      	beq.n	80046dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d107      	bne.n	80046d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e016      	b.n	800470a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	e000      	b.n	800470a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004708:	2302      	movs	r3, #2
  }
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	00100002 	.word	0x00100002
 8004718:	ffff0000 	.word	0xffff0000

0800471c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08c      	sub	sp, #48	@ 0x30
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	4608      	mov	r0, r1
 8004726:	4611      	mov	r1, r2
 8004728:	461a      	mov	r2, r3
 800472a:	4603      	mov	r3, r0
 800472c:	817b      	strh	r3, [r7, #10]
 800472e:	460b      	mov	r3, r1
 8004730:	813b      	strh	r3, [r7, #8]
 8004732:	4613      	mov	r3, r2
 8004734:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004736:	f7ff f9cb 	bl	8003ad0 <HAL_GetTick>
 800473a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b20      	cmp	r3, #32
 8004746:	f040 8214 	bne.w	8004b72 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	2319      	movs	r3, #25
 8004750:	2201      	movs	r2, #1
 8004752:	497b      	ldr	r1, [pc, #492]	@ (8004940 <HAL_I2C_Mem_Read+0x224>)
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fb91 	bl	8004e7c <I2C_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004760:	2302      	movs	r3, #2
 8004762:	e207      	b.n	8004b74 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800476a:	2b01      	cmp	r3, #1
 800476c:	d101      	bne.n	8004772 <HAL_I2C_Mem_Read+0x56>
 800476e:	2302      	movs	r3, #2
 8004770:	e200      	b.n	8004b74 <HAL_I2C_Mem_Read+0x458>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b01      	cmp	r3, #1
 8004786:	d007      	beq.n	8004798 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2222      	movs	r2, #34	@ 0x22
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2240      	movs	r2, #64	@ 0x40
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80047c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4a5b      	ldr	r2, [pc, #364]	@ (8004944 <HAL_I2C_Mem_Read+0x228>)
 80047d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047da:	88f8      	ldrh	r0, [r7, #6]
 80047dc:	893a      	ldrh	r2, [r7, #8]
 80047de:	8979      	ldrh	r1, [r7, #10]
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	9301      	str	r3, [sp, #4]
 80047e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	4603      	mov	r3, r0
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fa5e 	bl	8004cac <I2C_RequestMemoryRead>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e1bc      	b.n	8004b74 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d113      	bne.n	800482a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004802:	2300      	movs	r3, #0
 8004804:	623b      	str	r3, [r7, #32]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	623b      	str	r3, [r7, #32]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	623b      	str	r3, [r7, #32]
 8004816:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e190      	b.n	8004b4c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482e:	2b01      	cmp	r3, #1
 8004830:	d11b      	bne.n	800486a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004840:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004842:	2300      	movs	r3, #0
 8004844:	61fb      	str	r3, [r7, #28]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	e170      	b.n	8004b4c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800486e:	2b02      	cmp	r3, #2
 8004870:	d11b      	bne.n	80048aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004880:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004890:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004892:	2300      	movs	r3, #0
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	e150      	b.n	8004b4c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048c0:	e144      	b.n	8004b4c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	f200 80f1 	bhi.w	8004aae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d123      	bne.n	800491c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 fc79 	bl	80051d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e145      	b.n	8004b74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691a      	ldr	r2, [r3, #16]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800491a:	e117      	b.n	8004b4c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004920:	2b02      	cmp	r3, #2
 8004922:	d14e      	bne.n	80049c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492a:	2200      	movs	r2, #0
 800492c:	4906      	ldr	r1, [pc, #24]	@ (8004948 <HAL_I2C_Mem_Read+0x22c>)
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 faa4 	bl	8004e7c <I2C_WaitOnFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d008      	beq.n	800494c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e11a      	b.n	8004b74 <HAL_I2C_Mem_Read+0x458>
 800493e:	bf00      	nop
 8004940:	00100002 	.word	0x00100002
 8004944:	ffff0000 	.word	0xffff0000
 8004948:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800495a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004984:	b29b      	uxth	r3, r3
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049c0:	e0c4      	b.n	8004b4c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c8:	2200      	movs	r2, #0
 80049ca:	496c      	ldr	r1, [pc, #432]	@ (8004b7c <HAL_I2C_Mem_Read+0x460>)
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 fa55 	bl	8004e7c <I2C_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0cb      	b.n	8004b74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a24:	2200      	movs	r2, #0
 8004a26:	4955      	ldr	r1, [pc, #340]	@ (8004b7c <HAL_I2C_Mem_Read+0x460>)
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fa27 	bl	8004e7c <I2C_WaitOnFlagUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e09d      	b.n	8004b74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691a      	ldr	r2, [r3, #16]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004aac:	e04e      	b.n	8004b4c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fb8c 	bl	80051d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e058      	b.n	8004b74 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d124      	bne.n	8004b4c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d107      	bne.n	8004b1a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b18:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	b2d2      	uxtb	r2, r2
 8004b26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f47f aeb6 	bne.w	80048c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e000      	b.n	8004b74 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
  }
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3728      	adds	r7, #40	@ 0x28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	00010004 	.word	0x00010004

08004b80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	4608      	mov	r0, r1
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4603      	mov	r3, r0
 8004b90:	817b      	strh	r3, [r7, #10]
 8004b92:	460b      	mov	r3, r1
 8004b94:	813b      	strh	r3, [r7, #8]
 8004b96:	4613      	mov	r3, r2
 8004b98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ba8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f960 	bl	8004e7c <I2C_WaitOnFlagUntilTimeout>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00d      	beq.n	8004bde <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bd0:	d103      	bne.n	8004bda <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e05f      	b.n	8004c9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bde:	897b      	ldrh	r3, [r7, #10]
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004bec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf0:	6a3a      	ldr	r2, [r7, #32]
 8004bf2:	492d      	ldr	r1, [pc, #180]	@ (8004ca8 <I2C_RequestMemoryWrite+0x128>)
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 f9bb 	bl	8004f70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e04c      	b.n	8004c9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c1c:	6a39      	ldr	r1, [r7, #32]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fa46 	bl	80050b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00d      	beq.n	8004c46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d107      	bne.n	8004c42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e02b      	b.n	8004c9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d105      	bne.n	8004c58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c4c:	893b      	ldrh	r3, [r7, #8]
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	611a      	str	r2, [r3, #16]
 8004c56:	e021      	b.n	8004c9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c58:	893b      	ldrh	r3, [r7, #8]
 8004c5a:	0a1b      	lsrs	r3, r3, #8
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c68:	6a39      	ldr	r1, [r7, #32]
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 fa20 	bl	80050b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00d      	beq.n	8004c92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d107      	bne.n	8004c8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e005      	b.n	8004c9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c92:	893b      	ldrh	r3, [r7, #8]
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	00010002 	.word	0x00010002

08004cac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	4608      	mov	r0, r1
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4603      	mov	r3, r0
 8004cbc:	817b      	strh	r3, [r7, #10]
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	813b      	strh	r3, [r7, #8]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cd4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ce4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f8c2 	bl	8004e7c <I2C_WaitOnFlagUntilTimeout>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00d      	beq.n	8004d1a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d0c:	d103      	bne.n	8004d16 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d14:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e0aa      	b.n	8004e70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d1a:	897b      	ldrh	r3, [r7, #10]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	461a      	mov	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	6a3a      	ldr	r2, [r7, #32]
 8004d2e:	4952      	ldr	r1, [pc, #328]	@ (8004e78 <I2C_RequestMemoryRead+0x1cc>)
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f91d 	bl	8004f70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e097      	b.n	8004e70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d58:	6a39      	ldr	r1, [r7, #32]
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f9a8 	bl	80050b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00d      	beq.n	8004d82 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d107      	bne.n	8004d7e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e076      	b.n	8004e70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d82:	88fb      	ldrh	r3, [r7, #6]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d105      	bne.n	8004d94 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d88:	893b      	ldrh	r3, [r7, #8]
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	611a      	str	r2, [r3, #16]
 8004d92:	e021      	b.n	8004dd8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d94:	893b      	ldrh	r3, [r7, #8]
 8004d96:	0a1b      	lsrs	r3, r3, #8
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004da4:	6a39      	ldr	r1, [r7, #32]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f982 	bl	80050b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00d      	beq.n	8004dce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d107      	bne.n	8004dca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e050      	b.n	8004e70 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dce:	893b      	ldrh	r3, [r7, #8]
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dda:	6a39      	ldr	r1, [r7, #32]
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f967 	bl	80050b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00d      	beq.n	8004e04 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d107      	bne.n	8004e00 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dfe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e035      	b.n	8004e70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e12:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 f82b 	bl	8004e7c <I2C_WaitOnFlagUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00d      	beq.n	8004e48 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e3a:	d103      	bne.n	8004e44 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e013      	b.n	8004e70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e48:	897b      	ldrh	r3, [r7, #10]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5a:	6a3a      	ldr	r2, [r7, #32]
 8004e5c:	4906      	ldr	r1, [pc, #24]	@ (8004e78 <I2C_RequestMemoryRead+0x1cc>)
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f886 	bl	8004f70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	00010002 	.word	0x00010002

08004e7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e8c:	e048      	b.n	8004f20 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e94:	d044      	beq.n	8004f20 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e96:	f7fe fe1b 	bl	8003ad0 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d302      	bcc.n	8004eac <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d139      	bne.n	8004f20 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	0c1b      	lsrs	r3, r3, #16
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d10d      	bne.n	8004ed2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	43da      	mvns	r2, r3
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bf0c      	ite	eq
 8004ec8:	2301      	moveq	r3, #1
 8004eca:	2300      	movne	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	461a      	mov	r2, r3
 8004ed0:	e00c      	b.n	8004eec <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	43da      	mvns	r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4013      	ands	r3, r2
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	bf0c      	ite	eq
 8004ee4:	2301      	moveq	r3, #1
 8004ee6:	2300      	movne	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d116      	bne.n	8004f20 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0c:	f043 0220 	orr.w	r2, r3, #32
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e023      	b.n	8004f68 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	0c1b      	lsrs	r3, r3, #16
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d10d      	bne.n	8004f46 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	43da      	mvns	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	4013      	ands	r3, r2
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bf0c      	ite	eq
 8004f3c:	2301      	moveq	r3, #1
 8004f3e:	2300      	movne	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	e00c      	b.n	8004f60 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	43da      	mvns	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4013      	ands	r3, r2
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	bf0c      	ite	eq
 8004f58:	2301      	moveq	r3, #1
 8004f5a:	2300      	movne	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d093      	beq.n	8004e8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f7e:	e071      	b.n	8005064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f8e:	d123      	bne.n	8004fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f9e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fa8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc4:	f043 0204 	orr.w	r2, r3, #4
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e067      	b.n	80050a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fde:	d041      	beq.n	8005064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe0:	f7fe fd76 	bl	8003ad0 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d302      	bcc.n	8004ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d136      	bne.n	8005064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	0c1b      	lsrs	r3, r3, #16
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d10c      	bne.n	800501a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	43da      	mvns	r2, r3
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4013      	ands	r3, r2
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	bf14      	ite	ne
 8005012:	2301      	movne	r3, #1
 8005014:	2300      	moveq	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	e00b      	b.n	8005032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	43da      	mvns	r2, r3
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	4013      	ands	r3, r2
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	bf14      	ite	ne
 800502c:	2301      	movne	r3, #1
 800502e:	2300      	moveq	r3, #0
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d016      	beq.n	8005064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005050:	f043 0220 	orr.w	r2, r3, #32
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e021      	b.n	80050a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	0c1b      	lsrs	r3, r3, #16
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b01      	cmp	r3, #1
 800506c:	d10c      	bne.n	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	43da      	mvns	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	4013      	ands	r3, r2
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	bf14      	ite	ne
 8005080:	2301      	movne	r3, #1
 8005082:	2300      	moveq	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	e00b      	b.n	80050a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	43da      	mvns	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4013      	ands	r3, r2
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	bf14      	ite	ne
 800509a:	2301      	movne	r3, #1
 800509c:	2300      	moveq	r3, #0
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f47f af6d 	bne.w	8004f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050bc:	e034      	b.n	8005128 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 f8e3 	bl	800528a <I2C_IsAcknowledgeFailed>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e034      	b.n	8005138 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050d4:	d028      	beq.n	8005128 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d6:	f7fe fcfb 	bl	8003ad0 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d302      	bcc.n	80050ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d11d      	bne.n	8005128 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f6:	2b80      	cmp	r3, #128	@ 0x80
 80050f8:	d016      	beq.n	8005128 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005114:	f043 0220 	orr.w	r2, r3, #32
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e007      	b.n	8005138 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005132:	2b80      	cmp	r3, #128	@ 0x80
 8005134:	d1c3      	bne.n	80050be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800514c:	e034      	b.n	80051b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f89b 	bl	800528a <I2C_IsAcknowledgeFailed>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e034      	b.n	80051c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005164:	d028      	beq.n	80051b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005166:	f7fe fcb3 	bl	8003ad0 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	429a      	cmp	r2, r3
 8005174:	d302      	bcc.n	800517c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d11d      	bne.n	80051b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b04      	cmp	r3, #4
 8005188:	d016      	beq.n	80051b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e007      	b.n	80051c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d1c3      	bne.n	800514e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051dc:	e049      	b.n	8005272 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b10      	cmp	r3, #16
 80051ea:	d119      	bne.n	8005220 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0210 	mvn.w	r2, #16
 80051f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e030      	b.n	8005282 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005220:	f7fe fc56 	bl	8003ad0 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	429a      	cmp	r2, r3
 800522e:	d302      	bcc.n	8005236 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d11d      	bne.n	8005272 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005240:	2b40      	cmp	r3, #64	@ 0x40
 8005242:	d016      	beq.n	8005272 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2220      	movs	r2, #32
 800524e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525e:	f043 0220 	orr.w	r2, r3, #32
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e007      	b.n	8005282 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800527c:	2b40      	cmp	r3, #64	@ 0x40
 800527e:	d1ae      	bne.n	80051de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800529c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052a0:	d11b      	bne.n	80052da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c6:	f043 0204 	orr.w	r2, r3, #4
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d129      	bne.n	8005352 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2224      	movs	r2, #36	@ 0x24
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0201 	bic.w	r2, r2, #1
 8005314:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0210 	bic.w	r2, r2, #16
 8005324:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0201 	orr.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	e000      	b.n	8005354 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005352:	2302      	movs	r3, #2
  }
}
 8005354:	4618      	mov	r0, r3
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b20      	cmp	r3, #32
 8005378:	d12a      	bne.n	80053d0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2224      	movs	r2, #36	@ 0x24
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0201 	bic.w	r2, r2, #1
 8005390:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005398:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800539a:	89fb      	ldrh	r3, [r7, #14]
 800539c:	f023 030f 	bic.w	r3, r3, #15
 80053a0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	89fb      	ldrh	r3, [r7, #14]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	89fa      	ldrh	r2, [r7, #14]
 80053b2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e000      	b.n	80053d2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
	...

080053e0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e0bf      	b.n	8005572 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fd fd38 	bl	8002e7c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005422:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6999      	ldr	r1, [r3, #24]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005438:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6899      	ldr	r1, [r3, #8]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	4b4a      	ldr	r3, [pc, #296]	@ (800557c <HAL_LTDC_Init+0x19c>)
 8005454:	400b      	ands	r3, r1
 8005456:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	041b      	lsls	r3, r3, #16
 800545e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6899      	ldr	r1, [r3, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68d9      	ldr	r1, [r3, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	4b3e      	ldr	r3, [pc, #248]	@ (800557c <HAL_LTDC_Init+0x19c>)
 8005482:	400b      	ands	r3, r1
 8005484:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	041b      	lsls	r3, r3, #16
 800548c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68d9      	ldr	r1, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a1a      	ldr	r2, [r3, #32]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6919      	ldr	r1, [r3, #16]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4b33      	ldr	r3, [pc, #204]	@ (800557c <HAL_LTDC_Init+0x19c>)
 80054b0:	400b      	ands	r3, r1
 80054b2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b8:	041b      	lsls	r3, r3, #16
 80054ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6919      	ldr	r1, [r3, #16]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6959      	ldr	r1, [r3, #20]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	4b27      	ldr	r3, [pc, #156]	@ (800557c <HAL_LTDC_Init+0x19c>)
 80054de:	400b      	ands	r3, r1
 80054e0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e6:	041b      	lsls	r3, r3, #16
 80054e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6959      	ldr	r1, [r3, #20]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005506:	021b      	lsls	r3, r3, #8
 8005508:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005510:	041b      	lsls	r3, r3, #16
 8005512:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005522:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0206 	orr.w	r2, r2, #6
 800554e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	f000f800 	.word	0xf000f800

08005580 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005580:	b5b0      	push	{r4, r5, r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <HAL_LTDC_ConfigLayer+0x1a>
 8005596:	2302      	movs	r3, #2
 8005598:	e02c      	b.n	80055f4 <HAL_LTDC_ConfigLayer+0x74>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2202      	movs	r2, #2
 80055a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2134      	movs	r1, #52	@ 0x34
 80055b0:	fb01 f303 	mul.w	r3, r1, r3
 80055b4:	4413      	add	r3, r2
 80055b6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4614      	mov	r4, r2
 80055be:	461d      	mov	r5, r3
 80055c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055cc:	682b      	ldr	r3, [r5, #0]
 80055ce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f811 	bl	80055fc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2201      	movs	r2, #1
 80055e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bdb0      	pop	{r4, r5, r7, pc}

080055fc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b089      	sub	sp, #36	@ 0x24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	0c1b      	lsrs	r3, r3, #16
 8005614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005618:	4413      	add	r3, r2
 800561a:	041b      	lsls	r3, r3, #16
 800561c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	01db      	lsls	r3, r3, #7
 8005628:	4413      	add	r3, r2
 800562a:	3384      	adds	r3, #132	@ 0x84
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	6812      	ldr	r2, [r2, #0]
 8005632:	4611      	mov	r1, r2
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	01d2      	lsls	r2, r2, #7
 8005638:	440a      	add	r2, r1
 800563a:	3284      	adds	r2, #132	@ 0x84
 800563c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005640:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	0c1b      	lsrs	r3, r3, #16
 800564e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005652:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005654:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4619      	mov	r1, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	01db      	lsls	r3, r3, #7
 8005660:	440b      	add	r3, r1
 8005662:	3384      	adds	r3, #132	@ 0x84
 8005664:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800566a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800567a:	4413      	add	r3, r2
 800567c:	041b      	lsls	r3, r3, #16
 800567e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	01db      	lsls	r3, r3, #7
 800568a:	4413      	add	r3, r2
 800568c:	3384      	adds	r3, #132	@ 0x84
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	6812      	ldr	r2, [r2, #0]
 8005694:	4611      	mov	r1, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	01d2      	lsls	r2, r2, #7
 800569a:	440a      	add	r2, r1
 800569c:	3284      	adds	r2, #132	@ 0x84
 800569e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80056a2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056b2:	4413      	add	r3, r2
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4619      	mov	r1, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	01db      	lsls	r3, r3, #7
 80056c0:	440b      	add	r3, r1
 80056c2:	3384      	adds	r3, #132	@ 0x84
 80056c4:	4619      	mov	r1, r3
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	01db      	lsls	r3, r3, #7
 80056d6:	4413      	add	r3, r2
 80056d8:	3384      	adds	r3, #132	@ 0x84
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	6812      	ldr	r2, [r2, #0]
 80056e0:	4611      	mov	r1, r2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	01d2      	lsls	r2, r2, #7
 80056e6:	440a      	add	r2, r1
 80056e8:	3284      	adds	r2, #132	@ 0x84
 80056ea:	f023 0307 	bic.w	r3, r3, #7
 80056ee:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	461a      	mov	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	01db      	lsls	r3, r3, #7
 80056fa:	4413      	add	r3, r2
 80056fc:	3384      	adds	r3, #132	@ 0x84
 80056fe:	461a      	mov	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800570c:	021b      	lsls	r3, r3, #8
 800570e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005716:	041b      	lsls	r3, r3, #16
 8005718:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	061b      	lsls	r3, r3, #24
 8005720:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	01db      	lsls	r3, r3, #7
 800572c:	4413      	add	r3, r2
 800572e:	3384      	adds	r3, #132	@ 0x84
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	01db      	lsls	r3, r3, #7
 800573c:	4413      	add	r3, r2
 800573e:	3384      	adds	r3, #132	@ 0x84
 8005740:	461a      	mov	r2, r3
 8005742:	2300      	movs	r3, #0
 8005744:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800574c:	461a      	mov	r2, r3
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	431a      	orrs	r2, r3
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	431a      	orrs	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4619      	mov	r1, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	01db      	lsls	r3, r3, #7
 8005760:	440b      	add	r3, r1
 8005762:	3384      	adds	r3, #132	@ 0x84
 8005764:	4619      	mov	r1, r3
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	01db      	lsls	r3, r3, #7
 8005776:	4413      	add	r3, r2
 8005778:	3384      	adds	r3, #132	@ 0x84
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	6812      	ldr	r2, [r2, #0]
 8005780:	4611      	mov	r1, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	01d2      	lsls	r2, r2, #7
 8005786:	440a      	add	r2, r1
 8005788:	3284      	adds	r2, #132	@ 0x84
 800578a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800578e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	461a      	mov	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	01db      	lsls	r3, r3, #7
 800579a:	4413      	add	r3, r2
 800579c:	3384      	adds	r3, #132	@ 0x84
 800579e:	461a      	mov	r2, r3
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	01db      	lsls	r3, r3, #7
 80057b0:	4413      	add	r3, r2
 80057b2:	3384      	adds	r3, #132	@ 0x84
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	4611      	mov	r1, r2
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	01d2      	lsls	r2, r2, #7
 80057c0:	440a      	add	r2, r1
 80057c2:	3284      	adds	r2, #132	@ 0x84
 80057c4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80057c8:	f023 0307 	bic.w	r3, r3, #7
 80057cc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	69da      	ldr	r2, [r3, #28]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	68f9      	ldr	r1, [r7, #12]
 80057d8:	6809      	ldr	r1, [r1, #0]
 80057da:	4608      	mov	r0, r1
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	01c9      	lsls	r1, r1, #7
 80057e0:	4401      	add	r1, r0
 80057e2:	3184      	adds	r1, #132	@ 0x84
 80057e4:	4313      	orrs	r3, r2
 80057e6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	01db      	lsls	r3, r3, #7
 80057f2:	4413      	add	r3, r2
 80057f4:	3384      	adds	r3, #132	@ 0x84
 80057f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	461a      	mov	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	01db      	lsls	r3, r3, #7
 8005802:	4413      	add	r3, r2
 8005804:	3384      	adds	r3, #132	@ 0x84
 8005806:	461a      	mov	r2, r3
 8005808:	2300      	movs	r3, #0
 800580a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	01db      	lsls	r3, r3, #7
 8005816:	4413      	add	r3, r2
 8005818:	3384      	adds	r3, #132	@ 0x84
 800581a:	461a      	mov	r2, r3
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005820:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d102      	bne.n	8005830 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800582a:	2304      	movs	r3, #4
 800582c:	61fb      	str	r3, [r7, #28]
 800582e:	e01b      	b.n	8005868 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d102      	bne.n	800583e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005838:	2303      	movs	r3, #3
 800583a:	61fb      	str	r3, [r7, #28]
 800583c:	e014      	b.n	8005868 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	2b04      	cmp	r3, #4
 8005844:	d00b      	beq.n	800585e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800584a:	2b02      	cmp	r3, #2
 800584c:	d007      	beq.n	800585e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005852:	2b03      	cmp	r3, #3
 8005854:	d003      	beq.n	800585e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800585a:	2b07      	cmp	r3, #7
 800585c:	d102      	bne.n	8005864 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800585e:	2302      	movs	r3, #2
 8005860:	61fb      	str	r3, [r7, #28]
 8005862:	e001      	b.n	8005868 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005864:	2301      	movs	r3, #1
 8005866:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	01db      	lsls	r3, r3, #7
 8005872:	4413      	add	r3, r2
 8005874:	3384      	adds	r3, #132	@ 0x84
 8005876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	6812      	ldr	r2, [r2, #0]
 800587c:	4611      	mov	r1, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	01d2      	lsls	r2, r2, #7
 8005882:	440a      	add	r2, r1
 8005884:	3284      	adds	r2, #132	@ 0x84
 8005886:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800588a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	fb02 f303 	mul.w	r3, r2, r3
 8005896:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	6859      	ldr	r1, [r3, #4]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	1acb      	subs	r3, r1, r3
 80058a2:	69f9      	ldr	r1, [r7, #28]
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80058aa:	68f9      	ldr	r1, [r7, #12]
 80058ac:	6809      	ldr	r1, [r1, #0]
 80058ae:	4608      	mov	r0, r1
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	01c9      	lsls	r1, r1, #7
 80058b4:	4401      	add	r1, r0
 80058b6:	3184      	adds	r1, #132	@ 0x84
 80058b8:	4313      	orrs	r3, r2
 80058ba:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	01db      	lsls	r3, r3, #7
 80058c6:	4413      	add	r3, r2
 80058c8:	3384      	adds	r3, #132	@ 0x84
 80058ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	6812      	ldr	r2, [r2, #0]
 80058d0:	4611      	mov	r1, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	01d2      	lsls	r2, r2, #7
 80058d6:	440a      	add	r2, r1
 80058d8:	3284      	adds	r2, #132	@ 0x84
 80058da:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80058de:	f023 0307 	bic.w	r3, r3, #7
 80058e2:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	461a      	mov	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	01db      	lsls	r3, r3, #7
 80058ee:	4413      	add	r3, r2
 80058f0:	3384      	adds	r3, #132	@ 0x84
 80058f2:	461a      	mov	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	01db      	lsls	r3, r3, #7
 8005904:	4413      	add	r3, r2
 8005906:	3384      	adds	r3, #132	@ 0x84
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	4611      	mov	r1, r2
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	01d2      	lsls	r2, r2, #7
 8005914:	440a      	add	r2, r1
 8005916:	3284      	adds	r2, #132	@ 0x84
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	6013      	str	r3, [r2, #0]
}
 800591e:	bf00      	nop
 8005920:	3724      	adds	r7, #36	@ 0x24
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e267      	b.n	8005e0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d075      	beq.n	8005a36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800594a:	4b88      	ldr	r3, [pc, #544]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 030c 	and.w	r3, r3, #12
 8005952:	2b04      	cmp	r3, #4
 8005954:	d00c      	beq.n	8005970 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005956:	4b85      	ldr	r3, [pc, #532]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800595e:	2b08      	cmp	r3, #8
 8005960:	d112      	bne.n	8005988 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005962:	4b82      	ldr	r3, [pc, #520]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800596a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800596e:	d10b      	bne.n	8005988 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005970:	4b7e      	ldr	r3, [pc, #504]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d05b      	beq.n	8005a34 <HAL_RCC_OscConfig+0x108>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d157      	bne.n	8005a34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e242      	b.n	8005e0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005990:	d106      	bne.n	80059a0 <HAL_RCC_OscConfig+0x74>
 8005992:	4b76      	ldr	r3, [pc, #472]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a75      	ldr	r2, [pc, #468]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e01d      	b.n	80059dc <HAL_RCC_OscConfig+0xb0>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059a8:	d10c      	bne.n	80059c4 <HAL_RCC_OscConfig+0x98>
 80059aa:	4b70      	ldr	r3, [pc, #448]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a6f      	ldr	r2, [pc, #444]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 80059b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	4b6d      	ldr	r3, [pc, #436]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a6c      	ldr	r2, [pc, #432]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 80059bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	e00b      	b.n	80059dc <HAL_RCC_OscConfig+0xb0>
 80059c4:	4b69      	ldr	r3, [pc, #420]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a68      	ldr	r2, [pc, #416]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 80059ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	4b66      	ldr	r3, [pc, #408]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a65      	ldr	r2, [pc, #404]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 80059d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d013      	beq.n	8005a0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e4:	f7fe f874 	bl	8003ad0 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059ec:	f7fe f870 	bl	8003ad0 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b64      	cmp	r3, #100	@ 0x64
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e207      	b.n	8005e0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059fe:	4b5b      	ldr	r3, [pc, #364]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0xc0>
 8005a0a:	e014      	b.n	8005a36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0c:	f7fe f860 	bl	8003ad0 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a14:	f7fe f85c 	bl	8003ad0 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b64      	cmp	r3, #100	@ 0x64
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e1f3      	b.n	8005e0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a26:	4b51      	ldr	r3, [pc, #324]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0xe8>
 8005a32:	e000      	b.n	8005a36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d063      	beq.n	8005b0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a42:	4b4a      	ldr	r3, [pc, #296]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a4e:	4b47      	ldr	r3, [pc, #284]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d11c      	bne.n	8005a94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a5a:	4b44      	ldr	r3, [pc, #272]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d116      	bne.n	8005a94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a66:	4b41      	ldr	r3, [pc, #260]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <HAL_RCC_OscConfig+0x152>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d001      	beq.n	8005a7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e1c7      	b.n	8005e0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	4937      	ldr	r1, [pc, #220]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a92:	e03a      	b.n	8005b0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d020      	beq.n	8005ade <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a9c:	4b34      	ldr	r3, [pc, #208]	@ (8005b70 <HAL_RCC_OscConfig+0x244>)
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa2:	f7fe f815 	bl	8003ad0 <HAL_GetTick>
 8005aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa8:	e008      	b.n	8005abc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aaa:	f7fe f811 	bl	8003ad0 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d901      	bls.n	8005abc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e1a8      	b.n	8005e0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005abc:	4b2b      	ldr	r3, [pc, #172]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0f0      	beq.n	8005aaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac8:	4b28      	ldr	r3, [pc, #160]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	4925      	ldr	r1, [pc, #148]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	600b      	str	r3, [r1, #0]
 8005adc:	e015      	b.n	8005b0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ade:	4b24      	ldr	r3, [pc, #144]	@ (8005b70 <HAL_RCC_OscConfig+0x244>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae4:	f7fd fff4 	bl	8003ad0 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aec:	f7fd fff0 	bl	8003ad0 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e187      	b.n	8005e0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005afe:	4b1b      	ldr	r3, [pc, #108]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f0      	bne.n	8005aec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d036      	beq.n	8005b84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d016      	beq.n	8005b4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b1e:	4b15      	ldr	r3, [pc, #84]	@ (8005b74 <HAL_RCC_OscConfig+0x248>)
 8005b20:	2201      	movs	r2, #1
 8005b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b24:	f7fd ffd4 	bl	8003ad0 <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b2c:	f7fd ffd0 	bl	8003ad0 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e167      	b.n	8005e0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b6c <HAL_RCC_OscConfig+0x240>)
 8005b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0f0      	beq.n	8005b2c <HAL_RCC_OscConfig+0x200>
 8005b4a:	e01b      	b.n	8005b84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b4c:	4b09      	ldr	r3, [pc, #36]	@ (8005b74 <HAL_RCC_OscConfig+0x248>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b52:	f7fd ffbd 	bl	8003ad0 <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b58:	e00e      	b.n	8005b78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b5a:	f7fd ffb9 	bl	8003ad0 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d907      	bls.n	8005b78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e150      	b.n	8005e0e <HAL_RCC_OscConfig+0x4e2>
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	42470000 	.word	0x42470000
 8005b74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b78:	4b88      	ldr	r3, [pc, #544]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1ea      	bne.n	8005b5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8097 	beq.w	8005cc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b92:	2300      	movs	r3, #0
 8005b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b96:	4b81      	ldr	r3, [pc, #516]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10f      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60bb      	str	r3, [r7, #8]
 8005ba6:	4b7d      	ldr	r3, [pc, #500]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005baa:	4a7c      	ldr	r2, [pc, #496]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bb2:	4b7a      	ldr	r3, [pc, #488]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bba:	60bb      	str	r3, [r7, #8]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc2:	4b77      	ldr	r3, [pc, #476]	@ (8005da0 <HAL_RCC_OscConfig+0x474>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d118      	bne.n	8005c00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bce:	4b74      	ldr	r3, [pc, #464]	@ (8005da0 <HAL_RCC_OscConfig+0x474>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a73      	ldr	r2, [pc, #460]	@ (8005da0 <HAL_RCC_OscConfig+0x474>)
 8005bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bda:	f7fd ff79 	bl	8003ad0 <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be0:	e008      	b.n	8005bf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be2:	f7fd ff75 	bl	8003ad0 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e10c      	b.n	8005e0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf4:	4b6a      	ldr	r3, [pc, #424]	@ (8005da0 <HAL_RCC_OscConfig+0x474>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d0f0      	beq.n	8005be2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d106      	bne.n	8005c16 <HAL_RCC_OscConfig+0x2ea>
 8005c08:	4b64      	ldr	r3, [pc, #400]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c0c:	4a63      	ldr	r2, [pc, #396]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005c0e:	f043 0301 	orr.w	r3, r3, #1
 8005c12:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c14:	e01c      	b.n	8005c50 <HAL_RCC_OscConfig+0x324>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2b05      	cmp	r3, #5
 8005c1c:	d10c      	bne.n	8005c38 <HAL_RCC_OscConfig+0x30c>
 8005c1e:	4b5f      	ldr	r3, [pc, #380]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c22:	4a5e      	ldr	r2, [pc, #376]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005c24:	f043 0304 	orr.w	r3, r3, #4
 8005c28:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c2a:	4b5c      	ldr	r3, [pc, #368]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c2e:	4a5b      	ldr	r2, [pc, #364]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005c30:	f043 0301 	orr.w	r3, r3, #1
 8005c34:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c36:	e00b      	b.n	8005c50 <HAL_RCC_OscConfig+0x324>
 8005c38:	4b58      	ldr	r3, [pc, #352]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3c:	4a57      	ldr	r2, [pc, #348]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005c3e:	f023 0301 	bic.w	r3, r3, #1
 8005c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c44:	4b55      	ldr	r3, [pc, #340]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c48:	4a54      	ldr	r2, [pc, #336]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005c4a:	f023 0304 	bic.w	r3, r3, #4
 8005c4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d015      	beq.n	8005c84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c58:	f7fd ff3a 	bl	8003ad0 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c5e:	e00a      	b.n	8005c76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c60:	f7fd ff36 	bl	8003ad0 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e0cb      	b.n	8005e0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c76:	4b49      	ldr	r3, [pc, #292]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0ee      	beq.n	8005c60 <HAL_RCC_OscConfig+0x334>
 8005c82:	e014      	b.n	8005cae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c84:	f7fd ff24 	bl	8003ad0 <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c8a:	e00a      	b.n	8005ca2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c8c:	f7fd ff20 	bl	8003ad0 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e0b5      	b.n	8005e0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1ee      	bne.n	8005c8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d105      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cb4:	4b39      	ldr	r3, [pc, #228]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb8:	4a38      	ldr	r2, [pc, #224]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 80a1 	beq.w	8005e0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cca:	4b34      	ldr	r3, [pc, #208]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 030c 	and.w	r3, r3, #12
 8005cd2:	2b08      	cmp	r3, #8
 8005cd4:	d05c      	beq.n	8005d90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d141      	bne.n	8005d62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cde:	4b31      	ldr	r3, [pc, #196]	@ (8005da4 <HAL_RCC_OscConfig+0x478>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce4:	f7fd fef4 	bl	8003ad0 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cec:	f7fd fef0 	bl	8003ad0 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e087      	b.n	8005e0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cfe:	4b27      	ldr	r3, [pc, #156]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f0      	bne.n	8005cec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69da      	ldr	r2, [r3, #28]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d18:	019b      	lsls	r3, r3, #6
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d20:	085b      	lsrs	r3, r3, #1
 8005d22:	3b01      	subs	r3, #1
 8005d24:	041b      	lsls	r3, r3, #16
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2c:	061b      	lsls	r3, r3, #24
 8005d2e:	491b      	ldr	r1, [pc, #108]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d34:	4b1b      	ldr	r3, [pc, #108]	@ (8005da4 <HAL_RCC_OscConfig+0x478>)
 8005d36:	2201      	movs	r2, #1
 8005d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d3a:	f7fd fec9 	bl	8003ad0 <HAL_GetTick>
 8005d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d40:	e008      	b.n	8005d54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d42:	f7fd fec5 	bl	8003ad0 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d901      	bls.n	8005d54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e05c      	b.n	8005e0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d54:	4b11      	ldr	r3, [pc, #68]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0f0      	beq.n	8005d42 <HAL_RCC_OscConfig+0x416>
 8005d60:	e054      	b.n	8005e0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d62:	4b10      	ldr	r3, [pc, #64]	@ (8005da4 <HAL_RCC_OscConfig+0x478>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d68:	f7fd feb2 	bl	8003ad0 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d70:	f7fd feae 	bl	8003ad0 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e045      	b.n	8005e0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d82:	4b06      	ldr	r3, [pc, #24]	@ (8005d9c <HAL_RCC_OscConfig+0x470>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f0      	bne.n	8005d70 <HAL_RCC_OscConfig+0x444>
 8005d8e:	e03d      	b.n	8005e0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d107      	bne.n	8005da8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e038      	b.n	8005e0e <HAL_RCC_OscConfig+0x4e2>
 8005d9c:	40023800 	.word	0x40023800
 8005da0:	40007000 	.word	0x40007000
 8005da4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005da8:	4b1b      	ldr	r3, [pc, #108]	@ (8005e18 <HAL_RCC_OscConfig+0x4ec>)
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d028      	beq.n	8005e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d121      	bne.n	8005e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d11a      	bne.n	8005e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005dd8:	4013      	ands	r3, r2
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d111      	bne.n	8005e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dee:	085b      	lsrs	r3, r3, #1
 8005df0:	3b01      	subs	r3, #1
 8005df2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d107      	bne.n	8005e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d001      	beq.n	8005e0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e000      	b.n	8005e0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	40023800 	.word	0x40023800

08005e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e0cc      	b.n	8005fca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e30:	4b68      	ldr	r3, [pc, #416]	@ (8005fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 030f 	and.w	r3, r3, #15
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d90c      	bls.n	8005e58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e3e:	4b65      	ldr	r3, [pc, #404]	@ (8005fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	b2d2      	uxtb	r2, r2
 8005e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e46:	4b63      	ldr	r3, [pc, #396]	@ (8005fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d001      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e0b8      	b.n	8005fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d020      	beq.n	8005ea6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e70:	4b59      	ldr	r3, [pc, #356]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	4a58      	ldr	r2, [pc, #352]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d005      	beq.n	8005e94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e88:	4b53      	ldr	r3, [pc, #332]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	4a52      	ldr	r2, [pc, #328]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e94:	4b50      	ldr	r3, [pc, #320]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	494d      	ldr	r1, [pc, #308]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d044      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d107      	bne.n	8005eca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eba:	4b47      	ldr	r3, [pc, #284]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d119      	bne.n	8005efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e07f      	b.n	8005fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d003      	beq.n	8005eda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d107      	bne.n	8005eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eda:	4b3f      	ldr	r3, [pc, #252]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d109      	bne.n	8005efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e06f      	b.n	8005fca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eea:	4b3b      	ldr	r3, [pc, #236]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e067      	b.n	8005fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005efa:	4b37      	ldr	r3, [pc, #220]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f023 0203 	bic.w	r2, r3, #3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	4934      	ldr	r1, [pc, #208]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f0c:	f7fd fde0 	bl	8003ad0 <HAL_GetTick>
 8005f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f12:	e00a      	b.n	8005f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f14:	f7fd fddc 	bl	8003ad0 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e04f      	b.n	8005fca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f2a:	4b2b      	ldr	r3, [pc, #172]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f003 020c 	and.w	r2, r3, #12
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d1eb      	bne.n	8005f14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f3c:	4b25      	ldr	r3, [pc, #148]	@ (8005fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d20c      	bcs.n	8005f64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f4a:	4b22      	ldr	r3, [pc, #136]	@ (8005fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	b2d2      	uxtb	r2, r2
 8005f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f52:	4b20      	ldr	r3, [pc, #128]	@ (8005fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d001      	beq.n	8005f64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e032      	b.n	8005fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d008      	beq.n	8005f82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f70:	4b19      	ldr	r3, [pc, #100]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	4916      	ldr	r1, [pc, #88]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d009      	beq.n	8005fa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f8e:	4b12      	ldr	r3, [pc, #72]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	490e      	ldr	r1, [pc, #56]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005fa2:	f000 f821 	bl	8005fe8 <HAL_RCC_GetSysClockFreq>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	091b      	lsrs	r3, r3, #4
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	490a      	ldr	r1, [pc, #40]	@ (8005fdc <HAL_RCC_ClockConfig+0x1c0>)
 8005fb4:	5ccb      	ldrb	r3, [r1, r3]
 8005fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fba:	4a09      	ldr	r2, [pc, #36]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005fbe:	4b09      	ldr	r3, [pc, #36]	@ (8005fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fd fd40 	bl	8003a48 <HAL_InitTick>

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	40023c00 	.word	0x40023c00
 8005fd8:	40023800 	.word	0x40023800
 8005fdc:	08008de4 	.word	0x08008de4
 8005fe0:	20000010 	.word	0x20000010
 8005fe4:	20000014 	.word	0x20000014

08005fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fec:	b094      	sub	sp, #80	@ 0x50
 8005fee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006000:	4b79      	ldr	r3, [pc, #484]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 030c 	and.w	r3, r3, #12
 8006008:	2b08      	cmp	r3, #8
 800600a:	d00d      	beq.n	8006028 <HAL_RCC_GetSysClockFreq+0x40>
 800600c:	2b08      	cmp	r3, #8
 800600e:	f200 80e1 	bhi.w	80061d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <HAL_RCC_GetSysClockFreq+0x34>
 8006016:	2b04      	cmp	r3, #4
 8006018:	d003      	beq.n	8006022 <HAL_RCC_GetSysClockFreq+0x3a>
 800601a:	e0db      	b.n	80061d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800601c:	4b73      	ldr	r3, [pc, #460]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x204>)
 800601e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006020:	e0db      	b.n	80061da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006022:	4b73      	ldr	r3, [pc, #460]	@ (80061f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006024:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006026:	e0d8      	b.n	80061da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006028:	4b6f      	ldr	r3, [pc, #444]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006030:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006032:	4b6d      	ldr	r3, [pc, #436]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d063      	beq.n	8006106 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800603e:	4b6a      	ldr	r3, [pc, #424]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	099b      	lsrs	r3, r3, #6
 8006044:	2200      	movs	r2, #0
 8006046:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006048:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800604a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006050:	633b      	str	r3, [r7, #48]	@ 0x30
 8006052:	2300      	movs	r3, #0
 8006054:	637b      	str	r3, [r7, #52]	@ 0x34
 8006056:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800605a:	4622      	mov	r2, r4
 800605c:	462b      	mov	r3, r5
 800605e:	f04f 0000 	mov.w	r0, #0
 8006062:	f04f 0100 	mov.w	r1, #0
 8006066:	0159      	lsls	r1, r3, #5
 8006068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800606c:	0150      	lsls	r0, r2, #5
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	4621      	mov	r1, r4
 8006074:	1a51      	subs	r1, r2, r1
 8006076:	6139      	str	r1, [r7, #16]
 8006078:	4629      	mov	r1, r5
 800607a:	eb63 0301 	sbc.w	r3, r3, r1
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	f04f 0200 	mov.w	r2, #0
 8006084:	f04f 0300 	mov.w	r3, #0
 8006088:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800608c:	4659      	mov	r1, fp
 800608e:	018b      	lsls	r3, r1, #6
 8006090:	4651      	mov	r1, sl
 8006092:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006096:	4651      	mov	r1, sl
 8006098:	018a      	lsls	r2, r1, #6
 800609a:	4651      	mov	r1, sl
 800609c:	ebb2 0801 	subs.w	r8, r2, r1
 80060a0:	4659      	mov	r1, fp
 80060a2:	eb63 0901 	sbc.w	r9, r3, r1
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	f04f 0300 	mov.w	r3, #0
 80060ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060ba:	4690      	mov	r8, r2
 80060bc:	4699      	mov	r9, r3
 80060be:	4623      	mov	r3, r4
 80060c0:	eb18 0303 	adds.w	r3, r8, r3
 80060c4:	60bb      	str	r3, [r7, #8]
 80060c6:	462b      	mov	r3, r5
 80060c8:	eb49 0303 	adc.w	r3, r9, r3
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	f04f 0200 	mov.w	r2, #0
 80060d2:	f04f 0300 	mov.w	r3, #0
 80060d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80060da:	4629      	mov	r1, r5
 80060dc:	024b      	lsls	r3, r1, #9
 80060de:	4621      	mov	r1, r4
 80060e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060e4:	4621      	mov	r1, r4
 80060e6:	024a      	lsls	r2, r1, #9
 80060e8:	4610      	mov	r0, r2
 80060ea:	4619      	mov	r1, r3
 80060ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060ee:	2200      	movs	r2, #0
 80060f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060f8:	f7fa f8ca 	bl	8000290 <__aeabi_uldivmod>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4613      	mov	r3, r2
 8006102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006104:	e058      	b.n	80061b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006106:	4b38      	ldr	r3, [pc, #224]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	099b      	lsrs	r3, r3, #6
 800610c:	2200      	movs	r2, #0
 800610e:	4618      	mov	r0, r3
 8006110:	4611      	mov	r1, r2
 8006112:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006116:	623b      	str	r3, [r7, #32]
 8006118:	2300      	movs	r3, #0
 800611a:	627b      	str	r3, [r7, #36]	@ 0x24
 800611c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006120:	4642      	mov	r2, r8
 8006122:	464b      	mov	r3, r9
 8006124:	f04f 0000 	mov.w	r0, #0
 8006128:	f04f 0100 	mov.w	r1, #0
 800612c:	0159      	lsls	r1, r3, #5
 800612e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006132:	0150      	lsls	r0, r2, #5
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4641      	mov	r1, r8
 800613a:	ebb2 0a01 	subs.w	sl, r2, r1
 800613e:	4649      	mov	r1, r9
 8006140:	eb63 0b01 	sbc.w	fp, r3, r1
 8006144:	f04f 0200 	mov.w	r2, #0
 8006148:	f04f 0300 	mov.w	r3, #0
 800614c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006150:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006154:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006158:	ebb2 040a 	subs.w	r4, r2, sl
 800615c:	eb63 050b 	sbc.w	r5, r3, fp
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	00eb      	lsls	r3, r5, #3
 800616a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800616e:	00e2      	lsls	r2, r4, #3
 8006170:	4614      	mov	r4, r2
 8006172:	461d      	mov	r5, r3
 8006174:	4643      	mov	r3, r8
 8006176:	18e3      	adds	r3, r4, r3
 8006178:	603b      	str	r3, [r7, #0]
 800617a:	464b      	mov	r3, r9
 800617c:	eb45 0303 	adc.w	r3, r5, r3
 8006180:	607b      	str	r3, [r7, #4]
 8006182:	f04f 0200 	mov.w	r2, #0
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800618e:	4629      	mov	r1, r5
 8006190:	028b      	lsls	r3, r1, #10
 8006192:	4621      	mov	r1, r4
 8006194:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006198:	4621      	mov	r1, r4
 800619a:	028a      	lsls	r2, r1, #10
 800619c:	4610      	mov	r0, r2
 800619e:	4619      	mov	r1, r3
 80061a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061a2:	2200      	movs	r2, #0
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	61fa      	str	r2, [r7, #28]
 80061a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061ac:	f7fa f870 	bl	8000290 <__aeabi_uldivmod>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4613      	mov	r3, r2
 80061b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80061b8:	4b0b      	ldr	r3, [pc, #44]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	0c1b      	lsrs	r3, r3, #16
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	3301      	adds	r3, #1
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80061c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061d2:	e002      	b.n	80061da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061d4:	4b05      	ldr	r3, [pc, #20]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x204>)
 80061d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3750      	adds	r7, #80	@ 0x50
 80061e0:	46bd      	mov	sp, r7
 80061e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061e6:	bf00      	nop
 80061e8:	40023800 	.word	0x40023800
 80061ec:	00f42400 	.word	0x00f42400
 80061f0:	007a1200 	.word	0x007a1200

080061f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061f4:	b480      	push	{r7}
 80061f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061f8:	4b03      	ldr	r3, [pc, #12]	@ (8006208 <HAL_RCC_GetHCLKFreq+0x14>)
 80061fa:	681b      	ldr	r3, [r3, #0]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	20000010 	.word	0x20000010

0800620c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006210:	f7ff fff0 	bl	80061f4 <HAL_RCC_GetHCLKFreq>
 8006214:	4602      	mov	r2, r0
 8006216:	4b05      	ldr	r3, [pc, #20]	@ (800622c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	0a9b      	lsrs	r3, r3, #10
 800621c:	f003 0307 	and.w	r3, r3, #7
 8006220:	4903      	ldr	r1, [pc, #12]	@ (8006230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006222:	5ccb      	ldrb	r3, [r1, r3]
 8006224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006228:	4618      	mov	r0, r3
 800622a:	bd80      	pop	{r7, pc}
 800622c:	40023800 	.word	0x40023800
 8006230:	08008df4 	.word	0x08008df4

08006234 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10b      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006258:	2b00      	cmp	r3, #0
 800625a:	d105      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006264:	2b00      	cmp	r3, #0
 8006266:	d075      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006268:	4b91      	ldr	r3, [pc, #580]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800626e:	f7fd fc2f 	bl	8003ad0 <HAL_GetTick>
 8006272:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006274:	e008      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006276:	f7fd fc2b 	bl	8003ad0 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b02      	cmp	r3, #2
 8006282:	d901      	bls.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e189      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006288:	4b8a      	ldr	r3, [pc, #552]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1f0      	bne.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d009      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	019a      	lsls	r2, r3, #6
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	071b      	lsls	r3, r3, #28
 80062ac:	4981      	ldr	r1, [pc, #516]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d01f      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80062c0:	4b7c      	ldr	r3, [pc, #496]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062c6:	0f1b      	lsrs	r3, r3, #28
 80062c8:	f003 0307 	and.w	r3, r3, #7
 80062cc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	019a      	lsls	r2, r3, #6
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	061b      	lsls	r3, r3, #24
 80062da:	431a      	orrs	r2, r3
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	071b      	lsls	r3, r3, #28
 80062e0:	4974      	ldr	r1, [pc, #464]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80062e8:	4b72      	ldr	r3, [pc, #456]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062ee:	f023 021f 	bic.w	r2, r3, #31
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	496e      	ldr	r1, [pc, #440]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00d      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	019a      	lsls	r2, r3, #6
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	061b      	lsls	r3, r3, #24
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	071b      	lsls	r3, r3, #28
 8006320:	4964      	ldr	r1, [pc, #400]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006328:	4b61      	ldr	r3, [pc, #388]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800632a:	2201      	movs	r2, #1
 800632c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800632e:	f7fd fbcf 	bl	8003ad0 <HAL_GetTick>
 8006332:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006334:	e008      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006336:	f7fd fbcb 	bl	8003ad0 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d901      	bls.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e129      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006348:	4b5a      	ldr	r3, [pc, #360]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0f0      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d105      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006368:	2b00      	cmp	r3, #0
 800636a:	d079      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800636c:	4b52      	ldr	r3, [pc, #328]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800636e:	2200      	movs	r2, #0
 8006370:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006372:	f7fd fbad 	bl	8003ad0 <HAL_GetTick>
 8006376:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006378:	e008      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800637a:	f7fd fba9 	bl	8003ad0 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d901      	bls.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e107      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800638c:	4b49      	ldr	r3, [pc, #292]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006398:	d0ef      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0304 	and.w	r3, r3, #4
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d020      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80063a6:	4b43      	ldr	r3, [pc, #268]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ac:	0f1b      	lsrs	r3, r3, #28
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	019a      	lsls	r2, r3, #6
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	061b      	lsls	r3, r3, #24
 80063c0:	431a      	orrs	r2, r3
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	071b      	lsls	r3, r3, #28
 80063c6:	493b      	ldr	r1, [pc, #236]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80063ce:	4b39      	ldr	r3, [pc, #228]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063d4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	3b01      	subs	r3, #1
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	4934      	ldr	r1, [pc, #208]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0308 	and.w	r3, r3, #8
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01e      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063f4:	4b2f      	ldr	r3, [pc, #188]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063fa:	0e1b      	lsrs	r3, r3, #24
 80063fc:	f003 030f 	and.w	r3, r3, #15
 8006400:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	019a      	lsls	r2, r3, #6
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	061b      	lsls	r3, r3, #24
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	071b      	lsls	r3, r3, #28
 8006414:	4927      	ldr	r1, [pc, #156]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006416:	4313      	orrs	r3, r2
 8006418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800641c:	4b25      	ldr	r3, [pc, #148]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800641e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006422:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	4922      	ldr	r1, [pc, #136]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800642c:	4313      	orrs	r3, r2
 800642e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006432:	4b21      	ldr	r3, [pc, #132]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006434:	2201      	movs	r2, #1
 8006436:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006438:	f7fd fb4a 	bl	8003ad0 <HAL_GetTick>
 800643c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800643e:	e008      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006440:	f7fd fb46 	bl	8003ad0 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d901      	bls.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e0a4      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006452:	4b18      	ldr	r3, [pc, #96]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800645a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800645e:	d1ef      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0320 	and.w	r3, r3, #32
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 808b 	beq.w	8006584 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	4b10      	ldr	r3, [pc, #64]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006476:	4a0f      	ldr	r2, [pc, #60]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800647c:	6413      	str	r3, [r2, #64]	@ 0x40
 800647e:	4b0d      	ldr	r3, [pc, #52]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800648a:	4b0c      	ldr	r3, [pc, #48]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a0b      	ldr	r2, [pc, #44]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006494:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006496:	f7fd fb1b 	bl	8003ad0 <HAL_GetTick>
 800649a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800649c:	e010      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800649e:	f7fd fb17 	bl	8003ad0 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d909      	bls.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e075      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80064b0:	42470068 	.word	0x42470068
 80064b4:	40023800 	.word	0x40023800
 80064b8:	42470070 	.word	0x42470070
 80064bc:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80064c0:	4b38      	ldr	r3, [pc, #224]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0e8      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064cc:	4b36      	ldr	r3, [pc, #216]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064d4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d02f      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d028      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064ea:	4b2f      	ldr	r3, [pc, #188]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064f4:	4b2d      	ldr	r3, [pc, #180]	@ (80065ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80064f6:	2201      	movs	r2, #1
 80064f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064fa:	4b2c      	ldr	r3, [pc, #176]	@ (80065ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006500:	4a29      	ldr	r2, [pc, #164]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006506:	4b28      	ldr	r3, [pc, #160]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b01      	cmp	r3, #1
 8006510:	d114      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006512:	f7fd fadd 	bl	8003ad0 <HAL_GetTick>
 8006516:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006518:	e00a      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800651a:	f7fd fad9 	bl	8003ad0 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006528:	4293      	cmp	r3, r2
 800652a:	d901      	bls.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e035      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006530:	4b1d      	ldr	r3, [pc, #116]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0ee      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006540:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006544:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006548:	d10d      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800654a:	4b17      	ldr	r3, [pc, #92]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006556:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800655a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800655e:	4912      	ldr	r1, [pc, #72]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006560:	4313      	orrs	r3, r2
 8006562:	608b      	str	r3, [r1, #8]
 8006564:	e005      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006566:	4b10      	ldr	r3, [pc, #64]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	4a0f      	ldr	r2, [pc, #60]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800656c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006570:	6093      	str	r3, [r2, #8]
 8006572:	4b0d      	ldr	r3, [pc, #52]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006574:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800657a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800657e:	490a      	ldr	r1, [pc, #40]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006580:	4313      	orrs	r3, r2
 8006582:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0310 	and.w	r3, r3, #16
 800658c:	2b00      	cmp	r3, #0
 800658e:	d004      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006596:	4b06      	ldr	r3, [pc, #24]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006598:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40007000 	.word	0x40007000
 80065a8:	40023800 	.word	0x40023800
 80065ac:	42470e40 	.word	0x42470e40
 80065b0:	424711e0 	.word	0x424711e0

080065b4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e01c      	b.n	8006600 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	795b      	ldrb	r3, [r3, #5]
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d105      	bne.n	80065dc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fc fd78 	bl	80030cc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f042 0204 	orr.w	r2, r2, #4
 80065f0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e07b      	b.n	8006712 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661e:	2b00      	cmp	r3, #0
 8006620:	d108      	bne.n	8006634 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800662a:	d009      	beq.n	8006640 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	61da      	str	r2, [r3, #28]
 8006632:	e005      	b.n	8006640 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7fc fd58 	bl	8003110 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006676:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066ba:	431a      	orrs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066c4:	ea42 0103 	orr.w	r1, r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	0c1b      	lsrs	r3, r3, #16
 80066de:	f003 0104 	and.w	r1, r3, #4
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e6:	f003 0210 	and.w	r2, r3, #16
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69da      	ldr	r2, [r3, #28]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006700:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e01a      	b.n	8006762 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006742:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7fc fd2b 	bl	80031a0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b088      	sub	sp, #32
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	603b      	str	r3, [r7, #0]
 8006776:	4613      	mov	r3, r2
 8006778:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800677a:	f7fd f9a9 	bl	8003ad0 <HAL_GetTick>
 800677e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006780:	88fb      	ldrh	r3, [r7, #6]
 8006782:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b01      	cmp	r3, #1
 800678e:	d001      	beq.n	8006794 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006790:	2302      	movs	r3, #2
 8006792:	e12a      	b.n	80069ea <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <HAL_SPI_Transmit+0x36>
 800679a:	88fb      	ldrh	r3, [r7, #6]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e122      	b.n	80069ea <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <HAL_SPI_Transmit+0x48>
 80067ae:	2302      	movs	r3, #2
 80067b0:	e11b      	b.n	80069ea <HAL_SPI_Transmit+0x280>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2203      	movs	r2, #3
 80067be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	88fa      	ldrh	r2, [r7, #6]
 80067d2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	88fa      	ldrh	r2, [r7, #6]
 80067d8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006800:	d10f      	bne.n	8006822 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006810:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006820:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800682c:	2b40      	cmp	r3, #64	@ 0x40
 800682e:	d007      	beq.n	8006840 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800683e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006848:	d152      	bne.n	80068f0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <HAL_SPI_Transmit+0xee>
 8006852:	8b7b      	ldrh	r3, [r7, #26]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d145      	bne.n	80068e4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685c:	881a      	ldrh	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006868:	1c9a      	adds	r2, r3, #2
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800687c:	e032      	b.n	80068e4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b02      	cmp	r3, #2
 800688a:	d112      	bne.n	80068b2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006890:	881a      	ldrh	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689c:	1c9a      	adds	r2, r3, #2
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	86da      	strh	r2, [r3, #54]	@ 0x36
 80068b0:	e018      	b.n	80068e4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068b2:	f7fd f90d 	bl	8003ad0 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d803      	bhi.n	80068ca <HAL_SPI_Transmit+0x160>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068c8:	d102      	bne.n	80068d0 <HAL_SPI_Transmit+0x166>
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d109      	bne.n	80068e4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e082      	b.n	80069ea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1c7      	bne.n	800687e <HAL_SPI_Transmit+0x114>
 80068ee:	e053      	b.n	8006998 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <HAL_SPI_Transmit+0x194>
 80068f8:	8b7b      	ldrh	r3, [r7, #26]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d147      	bne.n	800698e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	330c      	adds	r3, #12
 8006908:	7812      	ldrb	r2, [r2, #0]
 800690a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800691a:	b29b      	uxth	r3, r3
 800691c:	3b01      	subs	r3, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006924:	e033      	b.n	800698e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b02      	cmp	r3, #2
 8006932:	d113      	bne.n	800695c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	330c      	adds	r3, #12
 800693e:	7812      	ldrb	r2, [r2, #0]
 8006940:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	86da      	strh	r2, [r3, #54]	@ 0x36
 800695a:	e018      	b.n	800698e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800695c:	f7fd f8b8 	bl	8003ad0 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d803      	bhi.n	8006974 <HAL_SPI_Transmit+0x20a>
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006972:	d102      	bne.n	800697a <HAL_SPI_Transmit+0x210>
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d109      	bne.n	800698e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e02d      	b.n	80069ea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006992:	b29b      	uxth	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1c6      	bne.n	8006926 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006998:	69fa      	ldr	r2, [r7, #28]
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 f8bf 	bl	8006b20 <SPI_EndRxTxTransaction>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2220      	movs	r2, #32
 80069ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10a      	bne.n	80069cc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069b6:	2300      	movs	r3, #0
 80069b8:	617b      	str	r3, [r7, #20]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	617b      	str	r3, [r7, #20]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e000      	b.n	80069ea <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80069e8:	2300      	movs	r3, #0
  }
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3720      	adds	r7, #32
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a00:	b2db      	uxtb	r3, r3
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
	...

08006a10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	603b      	str	r3, [r7, #0]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a20:	f7fd f856 	bl	8003ad0 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a28:	1a9b      	subs	r3, r3, r2
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a30:	f7fd f84e 	bl	8003ad0 <HAL_GetTick>
 8006a34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a36:	4b39      	ldr	r3, [pc, #228]	@ (8006b1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	015b      	lsls	r3, r3, #5
 8006a3c:	0d1b      	lsrs	r3, r3, #20
 8006a3e:	69fa      	ldr	r2, [r7, #28]
 8006a40:	fb02 f303 	mul.w	r3, r2, r3
 8006a44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a46:	e054      	b.n	8006af2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a4e:	d050      	beq.n	8006af2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a50:	f7fd f83e 	bl	8003ad0 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	69fa      	ldr	r2, [r7, #28]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d902      	bls.n	8006a66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d13d      	bne.n	8006ae2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a7e:	d111      	bne.n	8006aa4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a88:	d004      	beq.n	8006a94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a92:	d107      	bne.n	8006aa4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006aa2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aac:	d10f      	bne.n	8006ace <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006acc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e017      	b.n	8006b12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	4013      	ands	r3, r2
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	bf0c      	ite	eq
 8006b02:	2301      	moveq	r3, #1
 8006b04:	2300      	movne	r3, #0
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	79fb      	ldrb	r3, [r7, #7]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d19b      	bne.n	8006a48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3720      	adds	r7, #32
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000010 	.word	0x20000010

08006b20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af02      	add	r7, sp, #8
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2201      	movs	r2, #1
 8006b34:	2102      	movs	r1, #2
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f7ff ff6a 	bl	8006a10 <SPI_WaitFlagStateUntilTimeout>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d007      	beq.n	8006b52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b46:	f043 0220 	orr.w	r2, r3, #32
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e032      	b.n	8006bb8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b52:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc0 <SPI_EndRxTxTransaction+0xa0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc4 <SPI_EndRxTxTransaction+0xa4>)
 8006b58:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5c:	0d5b      	lsrs	r3, r3, #21
 8006b5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006b62:	fb02 f303 	mul.w	r3, r2, r3
 8006b66:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b70:	d112      	bne.n	8006b98 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2180      	movs	r1, #128	@ 0x80
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f7ff ff47 	bl	8006a10 <SPI_WaitFlagStateUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d016      	beq.n	8006bb6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b8c:	f043 0220 	orr.w	r2, r3, #32
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e00f      	b.n	8006bb8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bae:	2b80      	cmp	r3, #128	@ 0x80
 8006bb0:	d0f2      	beq.n	8006b98 <SPI_EndRxTxTransaction+0x78>
 8006bb2:	e000      	b.n	8006bb6 <SPI_EndRxTxTransaction+0x96>
        break;
 8006bb4:	bf00      	nop
  }

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3718      	adds	r7, #24
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	20000010 	.word	0x20000010
 8006bc4:	165e9f81 	.word	0x165e9f81

08006bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e041      	b.n	8006c5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d106      	bne.n	8006bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7fc faf4 	bl	80031dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3304      	adds	r3, #4
 8006c04:	4619      	mov	r1, r3
 8006c06:	4610      	mov	r0, r2
 8006c08:	f000 f994 	bl	8006f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d001      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e04e      	b.n	8006d1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68da      	ldr	r2, [r3, #12]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f042 0201 	orr.w	r2, r2, #1
 8006c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a23      	ldr	r2, [pc, #140]	@ (8006d2c <HAL_TIM_Base_Start_IT+0xc4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d022      	beq.n	8006ce8 <HAL_TIM_Base_Start_IT+0x80>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006caa:	d01d      	beq.n	8006ce8 <HAL_TIM_Base_Start_IT+0x80>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8006d30 <HAL_TIM_Base_Start_IT+0xc8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d018      	beq.n	8006ce8 <HAL_TIM_Base_Start_IT+0x80>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a1e      	ldr	r2, [pc, #120]	@ (8006d34 <HAL_TIM_Base_Start_IT+0xcc>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d013      	beq.n	8006ce8 <HAL_TIM_Base_Start_IT+0x80>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d38 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d00e      	beq.n	8006ce8 <HAL_TIM_Base_Start_IT+0x80>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a1b      	ldr	r2, [pc, #108]	@ (8006d3c <HAL_TIM_Base_Start_IT+0xd4>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d009      	beq.n	8006ce8 <HAL_TIM_Base_Start_IT+0x80>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a19      	ldr	r2, [pc, #100]	@ (8006d40 <HAL_TIM_Base_Start_IT+0xd8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d004      	beq.n	8006ce8 <HAL_TIM_Base_Start_IT+0x80>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a18      	ldr	r2, [pc, #96]	@ (8006d44 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d111      	bne.n	8006d0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2b06      	cmp	r3, #6
 8006cf8:	d010      	beq.n	8006d1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 0201 	orr.w	r2, r2, #1
 8006d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d0a:	e007      	b.n	8006d1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f042 0201 	orr.w	r2, r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40010000 	.word	0x40010000
 8006d30:	40000400 	.word	0x40000400
 8006d34:	40000800 	.word	0x40000800
 8006d38:	40000c00 	.word	0x40000c00
 8006d3c:	40010400 	.word	0x40010400
 8006d40:	40014000 	.word	0x40014000
 8006d44:	40001800 	.word	0x40001800

08006d48 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0201 	bic.w	r2, r2, #1
 8006d5e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6a1a      	ldr	r2, [r3, #32]
 8006d66:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10f      	bne.n	8006d90 <HAL_TIM_Base_Stop_IT+0x48>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6a1a      	ldr	r2, [r3, #32]
 8006d76:	f240 4344 	movw	r3, #1092	@ 0x444
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d107      	bne.n	8006d90 <HAL_TIM_Base_Stop_IT+0x48>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0201 	bic.w	r2, r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <HAL_TIM_ConfigClockSource+0x1c>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e0b4      	b.n	8006f2c <HAL_TIM_ConfigClockSource+0x186>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006de0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006de8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dfa:	d03e      	beq.n	8006e7a <HAL_TIM_ConfigClockSource+0xd4>
 8006dfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e00:	f200 8087 	bhi.w	8006f12 <HAL_TIM_ConfigClockSource+0x16c>
 8006e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e08:	f000 8086 	beq.w	8006f18 <HAL_TIM_ConfigClockSource+0x172>
 8006e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e10:	d87f      	bhi.n	8006f12 <HAL_TIM_ConfigClockSource+0x16c>
 8006e12:	2b70      	cmp	r3, #112	@ 0x70
 8006e14:	d01a      	beq.n	8006e4c <HAL_TIM_ConfigClockSource+0xa6>
 8006e16:	2b70      	cmp	r3, #112	@ 0x70
 8006e18:	d87b      	bhi.n	8006f12 <HAL_TIM_ConfigClockSource+0x16c>
 8006e1a:	2b60      	cmp	r3, #96	@ 0x60
 8006e1c:	d050      	beq.n	8006ec0 <HAL_TIM_ConfigClockSource+0x11a>
 8006e1e:	2b60      	cmp	r3, #96	@ 0x60
 8006e20:	d877      	bhi.n	8006f12 <HAL_TIM_ConfigClockSource+0x16c>
 8006e22:	2b50      	cmp	r3, #80	@ 0x50
 8006e24:	d03c      	beq.n	8006ea0 <HAL_TIM_ConfigClockSource+0xfa>
 8006e26:	2b50      	cmp	r3, #80	@ 0x50
 8006e28:	d873      	bhi.n	8006f12 <HAL_TIM_ConfigClockSource+0x16c>
 8006e2a:	2b40      	cmp	r3, #64	@ 0x40
 8006e2c:	d058      	beq.n	8006ee0 <HAL_TIM_ConfigClockSource+0x13a>
 8006e2e:	2b40      	cmp	r3, #64	@ 0x40
 8006e30:	d86f      	bhi.n	8006f12 <HAL_TIM_ConfigClockSource+0x16c>
 8006e32:	2b30      	cmp	r3, #48	@ 0x30
 8006e34:	d064      	beq.n	8006f00 <HAL_TIM_ConfigClockSource+0x15a>
 8006e36:	2b30      	cmp	r3, #48	@ 0x30
 8006e38:	d86b      	bhi.n	8006f12 <HAL_TIM_ConfigClockSource+0x16c>
 8006e3a:	2b20      	cmp	r3, #32
 8006e3c:	d060      	beq.n	8006f00 <HAL_TIM_ConfigClockSource+0x15a>
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d867      	bhi.n	8006f12 <HAL_TIM_ConfigClockSource+0x16c>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d05c      	beq.n	8006f00 <HAL_TIM_ConfigClockSource+0x15a>
 8006e46:	2b10      	cmp	r3, #16
 8006e48:	d05a      	beq.n	8006f00 <HAL_TIM_ConfigClockSource+0x15a>
 8006e4a:	e062      	b.n	8006f12 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e5c:	f000 f990 	bl	8007180 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	609a      	str	r2, [r3, #8]
      break;
 8006e78:	e04f      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e8a:	f000 f979 	bl	8007180 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e9c:	609a      	str	r2, [r3, #8]
      break;
 8006e9e:	e03c      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eac:	461a      	mov	r2, r3
 8006eae:	f000 f8ed 	bl	800708c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2150      	movs	r1, #80	@ 0x50
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 f946 	bl	800714a <TIM_ITRx_SetConfig>
      break;
 8006ebe:	e02c      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f000 f90c 	bl	80070ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2160      	movs	r1, #96	@ 0x60
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 f936 	bl	800714a <TIM_ITRx_SetConfig>
      break;
 8006ede:	e01c      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eec:	461a      	mov	r2, r3
 8006eee:	f000 f8cd 	bl	800708c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2140      	movs	r1, #64	@ 0x40
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 f926 	bl	800714a <TIM_ITRx_SetConfig>
      break;
 8006efe:	e00c      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	f000 f91d 	bl	800714a <TIM_ITRx_SetConfig>
      break;
 8006f10:	e003      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	73fb      	strb	r3, [r7, #15]
      break;
 8006f16:	e000      	b.n	8006f1a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a46      	ldr	r2, [pc, #280]	@ (8007060 <TIM_Base_SetConfig+0x12c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d013      	beq.n	8006f74 <TIM_Base_SetConfig+0x40>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f52:	d00f      	beq.n	8006f74 <TIM_Base_SetConfig+0x40>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a43      	ldr	r2, [pc, #268]	@ (8007064 <TIM_Base_SetConfig+0x130>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00b      	beq.n	8006f74 <TIM_Base_SetConfig+0x40>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a42      	ldr	r2, [pc, #264]	@ (8007068 <TIM_Base_SetConfig+0x134>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d007      	beq.n	8006f74 <TIM_Base_SetConfig+0x40>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a41      	ldr	r2, [pc, #260]	@ (800706c <TIM_Base_SetConfig+0x138>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d003      	beq.n	8006f74 <TIM_Base_SetConfig+0x40>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a40      	ldr	r2, [pc, #256]	@ (8007070 <TIM_Base_SetConfig+0x13c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d108      	bne.n	8006f86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a35      	ldr	r2, [pc, #212]	@ (8007060 <TIM_Base_SetConfig+0x12c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d02b      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f94:	d027      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a32      	ldr	r2, [pc, #200]	@ (8007064 <TIM_Base_SetConfig+0x130>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d023      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a31      	ldr	r2, [pc, #196]	@ (8007068 <TIM_Base_SetConfig+0x134>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d01f      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a30      	ldr	r2, [pc, #192]	@ (800706c <TIM_Base_SetConfig+0x138>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d01b      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2f      	ldr	r2, [pc, #188]	@ (8007070 <TIM_Base_SetConfig+0x13c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d017      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a2e      	ldr	r2, [pc, #184]	@ (8007074 <TIM_Base_SetConfig+0x140>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d013      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8007078 <TIM_Base_SetConfig+0x144>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d00f      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a2c      	ldr	r2, [pc, #176]	@ (800707c <TIM_Base_SetConfig+0x148>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00b      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a2b      	ldr	r2, [pc, #172]	@ (8007080 <TIM_Base_SetConfig+0x14c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d007      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a2a      	ldr	r2, [pc, #168]	@ (8007084 <TIM_Base_SetConfig+0x150>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d003      	beq.n	8006fe6 <TIM_Base_SetConfig+0xb2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a29      	ldr	r2, [pc, #164]	@ (8007088 <TIM_Base_SetConfig+0x154>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d108      	bne.n	8006ff8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a10      	ldr	r2, [pc, #64]	@ (8007060 <TIM_Base_SetConfig+0x12c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d003      	beq.n	800702c <TIM_Base_SetConfig+0xf8>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a12      	ldr	r2, [pc, #72]	@ (8007070 <TIM_Base_SetConfig+0x13c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d103      	bne.n	8007034 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	691a      	ldr	r2, [r3, #16]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b01      	cmp	r3, #1
 8007044:	d105      	bne.n	8007052 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	f023 0201 	bic.w	r2, r3, #1
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	611a      	str	r2, [r3, #16]
  }
}
 8007052:	bf00      	nop
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40010000 	.word	0x40010000
 8007064:	40000400 	.word	0x40000400
 8007068:	40000800 	.word	0x40000800
 800706c:	40000c00 	.word	0x40000c00
 8007070:	40010400 	.word	0x40010400
 8007074:	40014000 	.word	0x40014000
 8007078:	40014400 	.word	0x40014400
 800707c:	40014800 	.word	0x40014800
 8007080:	40001800 	.word	0x40001800
 8007084:	40001c00 	.word	0x40001c00
 8007088:	40002000 	.word	0x40002000

0800708c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	f023 0201 	bic.w	r2, r3, #1
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f023 030a 	bic.w	r3, r3, #10
 80070c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	621a      	str	r2, [r3, #32]
}
 80070de:	bf00      	nop
 80070e0:	371c      	adds	r7, #28
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b087      	sub	sp, #28
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	60b9      	str	r1, [r7, #8]
 80070f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	f023 0210 	bic.w	r2, r3, #16
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007114:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	031b      	lsls	r3, r3, #12
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4313      	orrs	r3, r2
 800711e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007126:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	011b      	lsls	r3, r3, #4
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	4313      	orrs	r3, r2
 8007130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	621a      	str	r2, [r3, #32]
}
 800713e:	bf00      	nop
 8007140:	371c      	adds	r7, #28
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800714a:	b480      	push	{r7}
 800714c:	b085      	sub	sp, #20
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007160:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	4313      	orrs	r3, r2
 8007168:	f043 0307 	orr.w	r3, r3, #7
 800716c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	609a      	str	r2, [r3, #8]
}
 8007174:	bf00      	nop
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
 800718c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800719a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	021a      	lsls	r2, r3, #8
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	431a      	orrs	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	609a      	str	r2, [r3, #8]
}
 80071b4:	bf00      	nop
 80071b6:	371c      	adds	r7, #28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d101      	bne.n	80071d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071d4:	2302      	movs	r3, #2
 80071d6:	e05a      	b.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	4313      	orrs	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a21      	ldr	r2, [pc, #132]	@ (800729c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d022      	beq.n	8007262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007224:	d01d      	beq.n	8007262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a1d      	ldr	r2, [pc, #116]	@ (80072a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d018      	beq.n	8007262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a1b      	ldr	r2, [pc, #108]	@ (80072a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d013      	beq.n	8007262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a1a      	ldr	r2, [pc, #104]	@ (80072a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d00e      	beq.n	8007262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a18      	ldr	r2, [pc, #96]	@ (80072ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d009      	beq.n	8007262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a17      	ldr	r2, [pc, #92]	@ (80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d004      	beq.n	8007262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a15      	ldr	r2, [pc, #84]	@ (80072b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d10c      	bne.n	800727c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007268:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	4313      	orrs	r3, r2
 8007272:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	40010000 	.word	0x40010000
 80072a0:	40000400 	.word	0x40000400
 80072a4:	40000800 	.word	0x40000800
 80072a8:	40000c00 	.word	0x40000c00
 80072ac:	40010400 	.word	0x40010400
 80072b0:	40014000 	.word	0x40014000
 80072b4:	40001800 	.word	0x40001800

080072b8 <siprintf>:
 80072b8:	b40e      	push	{r1, r2, r3}
 80072ba:	b510      	push	{r4, lr}
 80072bc:	b09d      	sub	sp, #116	@ 0x74
 80072be:	ab1f      	add	r3, sp, #124	@ 0x7c
 80072c0:	9002      	str	r0, [sp, #8]
 80072c2:	9006      	str	r0, [sp, #24]
 80072c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80072c8:	480a      	ldr	r0, [pc, #40]	@ (80072f4 <siprintf+0x3c>)
 80072ca:	9107      	str	r1, [sp, #28]
 80072cc:	9104      	str	r1, [sp, #16]
 80072ce:	490a      	ldr	r1, [pc, #40]	@ (80072f8 <siprintf+0x40>)
 80072d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80072d4:	9105      	str	r1, [sp, #20]
 80072d6:	2400      	movs	r4, #0
 80072d8:	a902      	add	r1, sp, #8
 80072da:	6800      	ldr	r0, [r0, #0]
 80072dc:	9301      	str	r3, [sp, #4]
 80072de:	941b      	str	r4, [sp, #108]	@ 0x6c
 80072e0:	f000 f89c 	bl	800741c <_svfiprintf_r>
 80072e4:	9b02      	ldr	r3, [sp, #8]
 80072e6:	701c      	strb	r4, [r3, #0]
 80072e8:	b01d      	add	sp, #116	@ 0x74
 80072ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ee:	b003      	add	sp, #12
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	2000001c 	.word	0x2000001c
 80072f8:	ffff0208 	.word	0xffff0208

080072fc <memset>:
 80072fc:	4402      	add	r2, r0
 80072fe:	4603      	mov	r3, r0
 8007300:	4293      	cmp	r3, r2
 8007302:	d100      	bne.n	8007306 <memset+0xa>
 8007304:	4770      	bx	lr
 8007306:	f803 1b01 	strb.w	r1, [r3], #1
 800730a:	e7f9      	b.n	8007300 <memset+0x4>

0800730c <__errno>:
 800730c:	4b01      	ldr	r3, [pc, #4]	@ (8007314 <__errno+0x8>)
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	2000001c 	.word	0x2000001c

08007318 <__libc_init_array>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	4d0d      	ldr	r5, [pc, #52]	@ (8007350 <__libc_init_array+0x38>)
 800731c:	4c0d      	ldr	r4, [pc, #52]	@ (8007354 <__libc_init_array+0x3c>)
 800731e:	1b64      	subs	r4, r4, r5
 8007320:	10a4      	asrs	r4, r4, #2
 8007322:	2600      	movs	r6, #0
 8007324:	42a6      	cmp	r6, r4
 8007326:	d109      	bne.n	800733c <__libc_init_array+0x24>
 8007328:	4d0b      	ldr	r5, [pc, #44]	@ (8007358 <__libc_init_array+0x40>)
 800732a:	4c0c      	ldr	r4, [pc, #48]	@ (800735c <__libc_init_array+0x44>)
 800732c:	f000 fc64 	bl	8007bf8 <_init>
 8007330:	1b64      	subs	r4, r4, r5
 8007332:	10a4      	asrs	r4, r4, #2
 8007334:	2600      	movs	r6, #0
 8007336:	42a6      	cmp	r6, r4
 8007338:	d105      	bne.n	8007346 <__libc_init_array+0x2e>
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007340:	4798      	blx	r3
 8007342:	3601      	adds	r6, #1
 8007344:	e7ee      	b.n	8007324 <__libc_init_array+0xc>
 8007346:	f855 3b04 	ldr.w	r3, [r5], #4
 800734a:	4798      	blx	r3
 800734c:	3601      	adds	r6, #1
 800734e:	e7f2      	b.n	8007336 <__libc_init_array+0x1e>
 8007350:	08008e38 	.word	0x08008e38
 8007354:	08008e38 	.word	0x08008e38
 8007358:	08008e38 	.word	0x08008e38
 800735c:	08008e3c 	.word	0x08008e3c

08007360 <__retarget_lock_acquire_recursive>:
 8007360:	4770      	bx	lr

08007362 <__retarget_lock_release_recursive>:
 8007362:	4770      	bx	lr

08007364 <__ssputs_r>:
 8007364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007368:	688e      	ldr	r6, [r1, #8]
 800736a:	461f      	mov	r7, r3
 800736c:	42be      	cmp	r6, r7
 800736e:	680b      	ldr	r3, [r1, #0]
 8007370:	4682      	mov	sl, r0
 8007372:	460c      	mov	r4, r1
 8007374:	4690      	mov	r8, r2
 8007376:	d82d      	bhi.n	80073d4 <__ssputs_r+0x70>
 8007378:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800737c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007380:	d026      	beq.n	80073d0 <__ssputs_r+0x6c>
 8007382:	6965      	ldr	r5, [r4, #20]
 8007384:	6909      	ldr	r1, [r1, #16]
 8007386:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800738a:	eba3 0901 	sub.w	r9, r3, r1
 800738e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007392:	1c7b      	adds	r3, r7, #1
 8007394:	444b      	add	r3, r9
 8007396:	106d      	asrs	r5, r5, #1
 8007398:	429d      	cmp	r5, r3
 800739a:	bf38      	it	cc
 800739c:	461d      	movcc	r5, r3
 800739e:	0553      	lsls	r3, r2, #21
 80073a0:	d527      	bpl.n	80073f2 <__ssputs_r+0x8e>
 80073a2:	4629      	mov	r1, r5
 80073a4:	f000 f958 	bl	8007658 <_malloc_r>
 80073a8:	4606      	mov	r6, r0
 80073aa:	b360      	cbz	r0, 8007406 <__ssputs_r+0xa2>
 80073ac:	6921      	ldr	r1, [r4, #16]
 80073ae:	464a      	mov	r2, r9
 80073b0:	f000 fbc2 	bl	8007b38 <memcpy>
 80073b4:	89a3      	ldrh	r3, [r4, #12]
 80073b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80073ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073be:	81a3      	strh	r3, [r4, #12]
 80073c0:	6126      	str	r6, [r4, #16]
 80073c2:	6165      	str	r5, [r4, #20]
 80073c4:	444e      	add	r6, r9
 80073c6:	eba5 0509 	sub.w	r5, r5, r9
 80073ca:	6026      	str	r6, [r4, #0]
 80073cc:	60a5      	str	r5, [r4, #8]
 80073ce:	463e      	mov	r6, r7
 80073d0:	42be      	cmp	r6, r7
 80073d2:	d900      	bls.n	80073d6 <__ssputs_r+0x72>
 80073d4:	463e      	mov	r6, r7
 80073d6:	6820      	ldr	r0, [r4, #0]
 80073d8:	4632      	mov	r2, r6
 80073da:	4641      	mov	r1, r8
 80073dc:	f000 fb82 	bl	8007ae4 <memmove>
 80073e0:	68a3      	ldr	r3, [r4, #8]
 80073e2:	1b9b      	subs	r3, r3, r6
 80073e4:	60a3      	str	r3, [r4, #8]
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	4433      	add	r3, r6
 80073ea:	6023      	str	r3, [r4, #0]
 80073ec:	2000      	movs	r0, #0
 80073ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f2:	462a      	mov	r2, r5
 80073f4:	f000 fb48 	bl	8007a88 <_realloc_r>
 80073f8:	4606      	mov	r6, r0
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d1e0      	bne.n	80073c0 <__ssputs_r+0x5c>
 80073fe:	6921      	ldr	r1, [r4, #16]
 8007400:	4650      	mov	r0, sl
 8007402:	f000 fba7 	bl	8007b54 <_free_r>
 8007406:	230c      	movs	r3, #12
 8007408:	f8ca 3000 	str.w	r3, [sl]
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007412:	81a3      	strh	r3, [r4, #12]
 8007414:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007418:	e7e9      	b.n	80073ee <__ssputs_r+0x8a>
	...

0800741c <_svfiprintf_r>:
 800741c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007420:	4698      	mov	r8, r3
 8007422:	898b      	ldrh	r3, [r1, #12]
 8007424:	061b      	lsls	r3, r3, #24
 8007426:	b09d      	sub	sp, #116	@ 0x74
 8007428:	4607      	mov	r7, r0
 800742a:	460d      	mov	r5, r1
 800742c:	4614      	mov	r4, r2
 800742e:	d510      	bpl.n	8007452 <_svfiprintf_r+0x36>
 8007430:	690b      	ldr	r3, [r1, #16]
 8007432:	b973      	cbnz	r3, 8007452 <_svfiprintf_r+0x36>
 8007434:	2140      	movs	r1, #64	@ 0x40
 8007436:	f000 f90f 	bl	8007658 <_malloc_r>
 800743a:	6028      	str	r0, [r5, #0]
 800743c:	6128      	str	r0, [r5, #16]
 800743e:	b930      	cbnz	r0, 800744e <_svfiprintf_r+0x32>
 8007440:	230c      	movs	r3, #12
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007448:	b01d      	add	sp, #116	@ 0x74
 800744a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744e:	2340      	movs	r3, #64	@ 0x40
 8007450:	616b      	str	r3, [r5, #20]
 8007452:	2300      	movs	r3, #0
 8007454:	9309      	str	r3, [sp, #36]	@ 0x24
 8007456:	2320      	movs	r3, #32
 8007458:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800745c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007460:	2330      	movs	r3, #48	@ 0x30
 8007462:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007600 <_svfiprintf_r+0x1e4>
 8007466:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800746a:	f04f 0901 	mov.w	r9, #1
 800746e:	4623      	mov	r3, r4
 8007470:	469a      	mov	sl, r3
 8007472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007476:	b10a      	cbz	r2, 800747c <_svfiprintf_r+0x60>
 8007478:	2a25      	cmp	r2, #37	@ 0x25
 800747a:	d1f9      	bne.n	8007470 <_svfiprintf_r+0x54>
 800747c:	ebba 0b04 	subs.w	fp, sl, r4
 8007480:	d00b      	beq.n	800749a <_svfiprintf_r+0x7e>
 8007482:	465b      	mov	r3, fp
 8007484:	4622      	mov	r2, r4
 8007486:	4629      	mov	r1, r5
 8007488:	4638      	mov	r0, r7
 800748a:	f7ff ff6b 	bl	8007364 <__ssputs_r>
 800748e:	3001      	adds	r0, #1
 8007490:	f000 80a7 	beq.w	80075e2 <_svfiprintf_r+0x1c6>
 8007494:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007496:	445a      	add	r2, fp
 8007498:	9209      	str	r2, [sp, #36]	@ 0x24
 800749a:	f89a 3000 	ldrb.w	r3, [sl]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 809f 	beq.w	80075e2 <_svfiprintf_r+0x1c6>
 80074a4:	2300      	movs	r3, #0
 80074a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074ae:	f10a 0a01 	add.w	sl, sl, #1
 80074b2:	9304      	str	r3, [sp, #16]
 80074b4:	9307      	str	r3, [sp, #28]
 80074b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80074bc:	4654      	mov	r4, sl
 80074be:	2205      	movs	r2, #5
 80074c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c4:	484e      	ldr	r0, [pc, #312]	@ (8007600 <_svfiprintf_r+0x1e4>)
 80074c6:	f7f8 fe93 	bl	80001f0 <memchr>
 80074ca:	9a04      	ldr	r2, [sp, #16]
 80074cc:	b9d8      	cbnz	r0, 8007506 <_svfiprintf_r+0xea>
 80074ce:	06d0      	lsls	r0, r2, #27
 80074d0:	bf44      	itt	mi
 80074d2:	2320      	movmi	r3, #32
 80074d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074d8:	0711      	lsls	r1, r2, #28
 80074da:	bf44      	itt	mi
 80074dc:	232b      	movmi	r3, #43	@ 0x2b
 80074de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074e2:	f89a 3000 	ldrb.w	r3, [sl]
 80074e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80074e8:	d015      	beq.n	8007516 <_svfiprintf_r+0xfa>
 80074ea:	9a07      	ldr	r2, [sp, #28]
 80074ec:	4654      	mov	r4, sl
 80074ee:	2000      	movs	r0, #0
 80074f0:	f04f 0c0a 	mov.w	ip, #10
 80074f4:	4621      	mov	r1, r4
 80074f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074fa:	3b30      	subs	r3, #48	@ 0x30
 80074fc:	2b09      	cmp	r3, #9
 80074fe:	d94b      	bls.n	8007598 <_svfiprintf_r+0x17c>
 8007500:	b1b0      	cbz	r0, 8007530 <_svfiprintf_r+0x114>
 8007502:	9207      	str	r2, [sp, #28]
 8007504:	e014      	b.n	8007530 <_svfiprintf_r+0x114>
 8007506:	eba0 0308 	sub.w	r3, r0, r8
 800750a:	fa09 f303 	lsl.w	r3, r9, r3
 800750e:	4313      	orrs	r3, r2
 8007510:	9304      	str	r3, [sp, #16]
 8007512:	46a2      	mov	sl, r4
 8007514:	e7d2      	b.n	80074bc <_svfiprintf_r+0xa0>
 8007516:	9b03      	ldr	r3, [sp, #12]
 8007518:	1d19      	adds	r1, r3, #4
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	9103      	str	r1, [sp, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	bfbb      	ittet	lt
 8007522:	425b      	neglt	r3, r3
 8007524:	f042 0202 	orrlt.w	r2, r2, #2
 8007528:	9307      	strge	r3, [sp, #28]
 800752a:	9307      	strlt	r3, [sp, #28]
 800752c:	bfb8      	it	lt
 800752e:	9204      	strlt	r2, [sp, #16]
 8007530:	7823      	ldrb	r3, [r4, #0]
 8007532:	2b2e      	cmp	r3, #46	@ 0x2e
 8007534:	d10a      	bne.n	800754c <_svfiprintf_r+0x130>
 8007536:	7863      	ldrb	r3, [r4, #1]
 8007538:	2b2a      	cmp	r3, #42	@ 0x2a
 800753a:	d132      	bne.n	80075a2 <_svfiprintf_r+0x186>
 800753c:	9b03      	ldr	r3, [sp, #12]
 800753e:	1d1a      	adds	r2, r3, #4
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	9203      	str	r2, [sp, #12]
 8007544:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007548:	3402      	adds	r4, #2
 800754a:	9305      	str	r3, [sp, #20]
 800754c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007610 <_svfiprintf_r+0x1f4>
 8007550:	7821      	ldrb	r1, [r4, #0]
 8007552:	2203      	movs	r2, #3
 8007554:	4650      	mov	r0, sl
 8007556:	f7f8 fe4b 	bl	80001f0 <memchr>
 800755a:	b138      	cbz	r0, 800756c <_svfiprintf_r+0x150>
 800755c:	9b04      	ldr	r3, [sp, #16]
 800755e:	eba0 000a 	sub.w	r0, r0, sl
 8007562:	2240      	movs	r2, #64	@ 0x40
 8007564:	4082      	lsls	r2, r0
 8007566:	4313      	orrs	r3, r2
 8007568:	3401      	adds	r4, #1
 800756a:	9304      	str	r3, [sp, #16]
 800756c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007570:	4824      	ldr	r0, [pc, #144]	@ (8007604 <_svfiprintf_r+0x1e8>)
 8007572:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007576:	2206      	movs	r2, #6
 8007578:	f7f8 fe3a 	bl	80001f0 <memchr>
 800757c:	2800      	cmp	r0, #0
 800757e:	d036      	beq.n	80075ee <_svfiprintf_r+0x1d2>
 8007580:	4b21      	ldr	r3, [pc, #132]	@ (8007608 <_svfiprintf_r+0x1ec>)
 8007582:	bb1b      	cbnz	r3, 80075cc <_svfiprintf_r+0x1b0>
 8007584:	9b03      	ldr	r3, [sp, #12]
 8007586:	3307      	adds	r3, #7
 8007588:	f023 0307 	bic.w	r3, r3, #7
 800758c:	3308      	adds	r3, #8
 800758e:	9303      	str	r3, [sp, #12]
 8007590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007592:	4433      	add	r3, r6
 8007594:	9309      	str	r3, [sp, #36]	@ 0x24
 8007596:	e76a      	b.n	800746e <_svfiprintf_r+0x52>
 8007598:	fb0c 3202 	mla	r2, ip, r2, r3
 800759c:	460c      	mov	r4, r1
 800759e:	2001      	movs	r0, #1
 80075a0:	e7a8      	b.n	80074f4 <_svfiprintf_r+0xd8>
 80075a2:	2300      	movs	r3, #0
 80075a4:	3401      	adds	r4, #1
 80075a6:	9305      	str	r3, [sp, #20]
 80075a8:	4619      	mov	r1, r3
 80075aa:	f04f 0c0a 	mov.w	ip, #10
 80075ae:	4620      	mov	r0, r4
 80075b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075b4:	3a30      	subs	r2, #48	@ 0x30
 80075b6:	2a09      	cmp	r2, #9
 80075b8:	d903      	bls.n	80075c2 <_svfiprintf_r+0x1a6>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0c6      	beq.n	800754c <_svfiprintf_r+0x130>
 80075be:	9105      	str	r1, [sp, #20]
 80075c0:	e7c4      	b.n	800754c <_svfiprintf_r+0x130>
 80075c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80075c6:	4604      	mov	r4, r0
 80075c8:	2301      	movs	r3, #1
 80075ca:	e7f0      	b.n	80075ae <_svfiprintf_r+0x192>
 80075cc:	ab03      	add	r3, sp, #12
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	462a      	mov	r2, r5
 80075d2:	4b0e      	ldr	r3, [pc, #56]	@ (800760c <_svfiprintf_r+0x1f0>)
 80075d4:	a904      	add	r1, sp, #16
 80075d6:	4638      	mov	r0, r7
 80075d8:	f3af 8000 	nop.w
 80075dc:	1c42      	adds	r2, r0, #1
 80075de:	4606      	mov	r6, r0
 80075e0:	d1d6      	bne.n	8007590 <_svfiprintf_r+0x174>
 80075e2:	89ab      	ldrh	r3, [r5, #12]
 80075e4:	065b      	lsls	r3, r3, #25
 80075e6:	f53f af2d 	bmi.w	8007444 <_svfiprintf_r+0x28>
 80075ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075ec:	e72c      	b.n	8007448 <_svfiprintf_r+0x2c>
 80075ee:	ab03      	add	r3, sp, #12
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	462a      	mov	r2, r5
 80075f4:	4b05      	ldr	r3, [pc, #20]	@ (800760c <_svfiprintf_r+0x1f0>)
 80075f6:	a904      	add	r1, sp, #16
 80075f8:	4638      	mov	r0, r7
 80075fa:	f000 f91b 	bl	8007834 <_printf_i>
 80075fe:	e7ed      	b.n	80075dc <_svfiprintf_r+0x1c0>
 8007600:	08008dfc 	.word	0x08008dfc
 8007604:	08008e06 	.word	0x08008e06
 8007608:	00000000 	.word	0x00000000
 800760c:	08007365 	.word	0x08007365
 8007610:	08008e02 	.word	0x08008e02

08007614 <sbrk_aligned>:
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	4e0f      	ldr	r6, [pc, #60]	@ (8007654 <sbrk_aligned+0x40>)
 8007618:	460c      	mov	r4, r1
 800761a:	6831      	ldr	r1, [r6, #0]
 800761c:	4605      	mov	r5, r0
 800761e:	b911      	cbnz	r1, 8007626 <sbrk_aligned+0x12>
 8007620:	f000 fa7a 	bl	8007b18 <_sbrk_r>
 8007624:	6030      	str	r0, [r6, #0]
 8007626:	4621      	mov	r1, r4
 8007628:	4628      	mov	r0, r5
 800762a:	f000 fa75 	bl	8007b18 <_sbrk_r>
 800762e:	1c43      	adds	r3, r0, #1
 8007630:	d103      	bne.n	800763a <sbrk_aligned+0x26>
 8007632:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007636:	4620      	mov	r0, r4
 8007638:	bd70      	pop	{r4, r5, r6, pc}
 800763a:	1cc4      	adds	r4, r0, #3
 800763c:	f024 0403 	bic.w	r4, r4, #3
 8007640:	42a0      	cmp	r0, r4
 8007642:	d0f8      	beq.n	8007636 <sbrk_aligned+0x22>
 8007644:	1a21      	subs	r1, r4, r0
 8007646:	4628      	mov	r0, r5
 8007648:	f000 fa66 	bl	8007b18 <_sbrk_r>
 800764c:	3001      	adds	r0, #1
 800764e:	d1f2      	bne.n	8007636 <sbrk_aligned+0x22>
 8007650:	e7ef      	b.n	8007632 <sbrk_aligned+0x1e>
 8007652:	bf00      	nop
 8007654:	20025d5c 	.word	0x20025d5c

08007658 <_malloc_r>:
 8007658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800765c:	1ccd      	adds	r5, r1, #3
 800765e:	f025 0503 	bic.w	r5, r5, #3
 8007662:	3508      	adds	r5, #8
 8007664:	2d0c      	cmp	r5, #12
 8007666:	bf38      	it	cc
 8007668:	250c      	movcc	r5, #12
 800766a:	2d00      	cmp	r5, #0
 800766c:	4606      	mov	r6, r0
 800766e:	db01      	blt.n	8007674 <_malloc_r+0x1c>
 8007670:	42a9      	cmp	r1, r5
 8007672:	d904      	bls.n	800767e <_malloc_r+0x26>
 8007674:	230c      	movs	r3, #12
 8007676:	6033      	str	r3, [r6, #0]
 8007678:	2000      	movs	r0, #0
 800767a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800767e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007754 <_malloc_r+0xfc>
 8007682:	f000 f9f5 	bl	8007a70 <__malloc_lock>
 8007686:	f8d8 3000 	ldr.w	r3, [r8]
 800768a:	461c      	mov	r4, r3
 800768c:	bb44      	cbnz	r4, 80076e0 <_malloc_r+0x88>
 800768e:	4629      	mov	r1, r5
 8007690:	4630      	mov	r0, r6
 8007692:	f7ff ffbf 	bl	8007614 <sbrk_aligned>
 8007696:	1c43      	adds	r3, r0, #1
 8007698:	4604      	mov	r4, r0
 800769a:	d158      	bne.n	800774e <_malloc_r+0xf6>
 800769c:	f8d8 4000 	ldr.w	r4, [r8]
 80076a0:	4627      	mov	r7, r4
 80076a2:	2f00      	cmp	r7, #0
 80076a4:	d143      	bne.n	800772e <_malloc_r+0xd6>
 80076a6:	2c00      	cmp	r4, #0
 80076a8:	d04b      	beq.n	8007742 <_malloc_r+0xea>
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	4639      	mov	r1, r7
 80076ae:	4630      	mov	r0, r6
 80076b0:	eb04 0903 	add.w	r9, r4, r3
 80076b4:	f000 fa30 	bl	8007b18 <_sbrk_r>
 80076b8:	4581      	cmp	r9, r0
 80076ba:	d142      	bne.n	8007742 <_malloc_r+0xea>
 80076bc:	6821      	ldr	r1, [r4, #0]
 80076be:	1a6d      	subs	r5, r5, r1
 80076c0:	4629      	mov	r1, r5
 80076c2:	4630      	mov	r0, r6
 80076c4:	f7ff ffa6 	bl	8007614 <sbrk_aligned>
 80076c8:	3001      	adds	r0, #1
 80076ca:	d03a      	beq.n	8007742 <_malloc_r+0xea>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	442b      	add	r3, r5
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	f8d8 3000 	ldr.w	r3, [r8]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	bb62      	cbnz	r2, 8007734 <_malloc_r+0xdc>
 80076da:	f8c8 7000 	str.w	r7, [r8]
 80076de:	e00f      	b.n	8007700 <_malloc_r+0xa8>
 80076e0:	6822      	ldr	r2, [r4, #0]
 80076e2:	1b52      	subs	r2, r2, r5
 80076e4:	d420      	bmi.n	8007728 <_malloc_r+0xd0>
 80076e6:	2a0b      	cmp	r2, #11
 80076e8:	d917      	bls.n	800771a <_malloc_r+0xc2>
 80076ea:	1961      	adds	r1, r4, r5
 80076ec:	42a3      	cmp	r3, r4
 80076ee:	6025      	str	r5, [r4, #0]
 80076f0:	bf18      	it	ne
 80076f2:	6059      	strne	r1, [r3, #4]
 80076f4:	6863      	ldr	r3, [r4, #4]
 80076f6:	bf08      	it	eq
 80076f8:	f8c8 1000 	streq.w	r1, [r8]
 80076fc:	5162      	str	r2, [r4, r5]
 80076fe:	604b      	str	r3, [r1, #4]
 8007700:	4630      	mov	r0, r6
 8007702:	f000 f9bb 	bl	8007a7c <__malloc_unlock>
 8007706:	f104 000b 	add.w	r0, r4, #11
 800770a:	1d23      	adds	r3, r4, #4
 800770c:	f020 0007 	bic.w	r0, r0, #7
 8007710:	1ac2      	subs	r2, r0, r3
 8007712:	bf1c      	itt	ne
 8007714:	1a1b      	subne	r3, r3, r0
 8007716:	50a3      	strne	r3, [r4, r2]
 8007718:	e7af      	b.n	800767a <_malloc_r+0x22>
 800771a:	6862      	ldr	r2, [r4, #4]
 800771c:	42a3      	cmp	r3, r4
 800771e:	bf0c      	ite	eq
 8007720:	f8c8 2000 	streq.w	r2, [r8]
 8007724:	605a      	strne	r2, [r3, #4]
 8007726:	e7eb      	b.n	8007700 <_malloc_r+0xa8>
 8007728:	4623      	mov	r3, r4
 800772a:	6864      	ldr	r4, [r4, #4]
 800772c:	e7ae      	b.n	800768c <_malloc_r+0x34>
 800772e:	463c      	mov	r4, r7
 8007730:	687f      	ldr	r7, [r7, #4]
 8007732:	e7b6      	b.n	80076a2 <_malloc_r+0x4a>
 8007734:	461a      	mov	r2, r3
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	42a3      	cmp	r3, r4
 800773a:	d1fb      	bne.n	8007734 <_malloc_r+0xdc>
 800773c:	2300      	movs	r3, #0
 800773e:	6053      	str	r3, [r2, #4]
 8007740:	e7de      	b.n	8007700 <_malloc_r+0xa8>
 8007742:	230c      	movs	r3, #12
 8007744:	6033      	str	r3, [r6, #0]
 8007746:	4630      	mov	r0, r6
 8007748:	f000 f998 	bl	8007a7c <__malloc_unlock>
 800774c:	e794      	b.n	8007678 <_malloc_r+0x20>
 800774e:	6005      	str	r5, [r0, #0]
 8007750:	e7d6      	b.n	8007700 <_malloc_r+0xa8>
 8007752:	bf00      	nop
 8007754:	20025d60 	.word	0x20025d60

08007758 <_printf_common>:
 8007758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800775c:	4616      	mov	r6, r2
 800775e:	4698      	mov	r8, r3
 8007760:	688a      	ldr	r2, [r1, #8]
 8007762:	690b      	ldr	r3, [r1, #16]
 8007764:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007768:	4293      	cmp	r3, r2
 800776a:	bfb8      	it	lt
 800776c:	4613      	movlt	r3, r2
 800776e:	6033      	str	r3, [r6, #0]
 8007770:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007774:	4607      	mov	r7, r0
 8007776:	460c      	mov	r4, r1
 8007778:	b10a      	cbz	r2, 800777e <_printf_common+0x26>
 800777a:	3301      	adds	r3, #1
 800777c:	6033      	str	r3, [r6, #0]
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	0699      	lsls	r1, r3, #26
 8007782:	bf42      	ittt	mi
 8007784:	6833      	ldrmi	r3, [r6, #0]
 8007786:	3302      	addmi	r3, #2
 8007788:	6033      	strmi	r3, [r6, #0]
 800778a:	6825      	ldr	r5, [r4, #0]
 800778c:	f015 0506 	ands.w	r5, r5, #6
 8007790:	d106      	bne.n	80077a0 <_printf_common+0x48>
 8007792:	f104 0a19 	add.w	sl, r4, #25
 8007796:	68e3      	ldr	r3, [r4, #12]
 8007798:	6832      	ldr	r2, [r6, #0]
 800779a:	1a9b      	subs	r3, r3, r2
 800779c:	42ab      	cmp	r3, r5
 800779e:	dc26      	bgt.n	80077ee <_printf_common+0x96>
 80077a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077a4:	6822      	ldr	r2, [r4, #0]
 80077a6:	3b00      	subs	r3, #0
 80077a8:	bf18      	it	ne
 80077aa:	2301      	movne	r3, #1
 80077ac:	0692      	lsls	r2, r2, #26
 80077ae:	d42b      	bmi.n	8007808 <_printf_common+0xb0>
 80077b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077b4:	4641      	mov	r1, r8
 80077b6:	4638      	mov	r0, r7
 80077b8:	47c8      	blx	r9
 80077ba:	3001      	adds	r0, #1
 80077bc:	d01e      	beq.n	80077fc <_printf_common+0xa4>
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	6922      	ldr	r2, [r4, #16]
 80077c2:	f003 0306 	and.w	r3, r3, #6
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	bf02      	ittt	eq
 80077ca:	68e5      	ldreq	r5, [r4, #12]
 80077cc:	6833      	ldreq	r3, [r6, #0]
 80077ce:	1aed      	subeq	r5, r5, r3
 80077d0:	68a3      	ldr	r3, [r4, #8]
 80077d2:	bf0c      	ite	eq
 80077d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077d8:	2500      	movne	r5, #0
 80077da:	4293      	cmp	r3, r2
 80077dc:	bfc4      	itt	gt
 80077de:	1a9b      	subgt	r3, r3, r2
 80077e0:	18ed      	addgt	r5, r5, r3
 80077e2:	2600      	movs	r6, #0
 80077e4:	341a      	adds	r4, #26
 80077e6:	42b5      	cmp	r5, r6
 80077e8:	d11a      	bne.n	8007820 <_printf_common+0xc8>
 80077ea:	2000      	movs	r0, #0
 80077ec:	e008      	b.n	8007800 <_printf_common+0xa8>
 80077ee:	2301      	movs	r3, #1
 80077f0:	4652      	mov	r2, sl
 80077f2:	4641      	mov	r1, r8
 80077f4:	4638      	mov	r0, r7
 80077f6:	47c8      	blx	r9
 80077f8:	3001      	adds	r0, #1
 80077fa:	d103      	bne.n	8007804 <_printf_common+0xac>
 80077fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007804:	3501      	adds	r5, #1
 8007806:	e7c6      	b.n	8007796 <_printf_common+0x3e>
 8007808:	18e1      	adds	r1, r4, r3
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	2030      	movs	r0, #48	@ 0x30
 800780e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007812:	4422      	add	r2, r4
 8007814:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007818:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800781c:	3302      	adds	r3, #2
 800781e:	e7c7      	b.n	80077b0 <_printf_common+0x58>
 8007820:	2301      	movs	r3, #1
 8007822:	4622      	mov	r2, r4
 8007824:	4641      	mov	r1, r8
 8007826:	4638      	mov	r0, r7
 8007828:	47c8      	blx	r9
 800782a:	3001      	adds	r0, #1
 800782c:	d0e6      	beq.n	80077fc <_printf_common+0xa4>
 800782e:	3601      	adds	r6, #1
 8007830:	e7d9      	b.n	80077e6 <_printf_common+0x8e>
	...

08007834 <_printf_i>:
 8007834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007838:	7e0f      	ldrb	r7, [r1, #24]
 800783a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800783c:	2f78      	cmp	r7, #120	@ 0x78
 800783e:	4691      	mov	r9, r2
 8007840:	4680      	mov	r8, r0
 8007842:	460c      	mov	r4, r1
 8007844:	469a      	mov	sl, r3
 8007846:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800784a:	d807      	bhi.n	800785c <_printf_i+0x28>
 800784c:	2f62      	cmp	r7, #98	@ 0x62
 800784e:	d80a      	bhi.n	8007866 <_printf_i+0x32>
 8007850:	2f00      	cmp	r7, #0
 8007852:	f000 80d1 	beq.w	80079f8 <_printf_i+0x1c4>
 8007856:	2f58      	cmp	r7, #88	@ 0x58
 8007858:	f000 80b8 	beq.w	80079cc <_printf_i+0x198>
 800785c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007860:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007864:	e03a      	b.n	80078dc <_printf_i+0xa8>
 8007866:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800786a:	2b15      	cmp	r3, #21
 800786c:	d8f6      	bhi.n	800785c <_printf_i+0x28>
 800786e:	a101      	add	r1, pc, #4	@ (adr r1, 8007874 <_printf_i+0x40>)
 8007870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007874:	080078cd 	.word	0x080078cd
 8007878:	080078e1 	.word	0x080078e1
 800787c:	0800785d 	.word	0x0800785d
 8007880:	0800785d 	.word	0x0800785d
 8007884:	0800785d 	.word	0x0800785d
 8007888:	0800785d 	.word	0x0800785d
 800788c:	080078e1 	.word	0x080078e1
 8007890:	0800785d 	.word	0x0800785d
 8007894:	0800785d 	.word	0x0800785d
 8007898:	0800785d 	.word	0x0800785d
 800789c:	0800785d 	.word	0x0800785d
 80078a0:	080079df 	.word	0x080079df
 80078a4:	0800790b 	.word	0x0800790b
 80078a8:	08007999 	.word	0x08007999
 80078ac:	0800785d 	.word	0x0800785d
 80078b0:	0800785d 	.word	0x0800785d
 80078b4:	08007a01 	.word	0x08007a01
 80078b8:	0800785d 	.word	0x0800785d
 80078bc:	0800790b 	.word	0x0800790b
 80078c0:	0800785d 	.word	0x0800785d
 80078c4:	0800785d 	.word	0x0800785d
 80078c8:	080079a1 	.word	0x080079a1
 80078cc:	6833      	ldr	r3, [r6, #0]
 80078ce:	1d1a      	adds	r2, r3, #4
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6032      	str	r2, [r6, #0]
 80078d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078dc:	2301      	movs	r3, #1
 80078de:	e09c      	b.n	8007a1a <_printf_i+0x1e6>
 80078e0:	6833      	ldr	r3, [r6, #0]
 80078e2:	6820      	ldr	r0, [r4, #0]
 80078e4:	1d19      	adds	r1, r3, #4
 80078e6:	6031      	str	r1, [r6, #0]
 80078e8:	0606      	lsls	r6, r0, #24
 80078ea:	d501      	bpl.n	80078f0 <_printf_i+0xbc>
 80078ec:	681d      	ldr	r5, [r3, #0]
 80078ee:	e003      	b.n	80078f8 <_printf_i+0xc4>
 80078f0:	0645      	lsls	r5, r0, #25
 80078f2:	d5fb      	bpl.n	80078ec <_printf_i+0xb8>
 80078f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078f8:	2d00      	cmp	r5, #0
 80078fa:	da03      	bge.n	8007904 <_printf_i+0xd0>
 80078fc:	232d      	movs	r3, #45	@ 0x2d
 80078fe:	426d      	negs	r5, r5
 8007900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007904:	4858      	ldr	r0, [pc, #352]	@ (8007a68 <_printf_i+0x234>)
 8007906:	230a      	movs	r3, #10
 8007908:	e011      	b.n	800792e <_printf_i+0xfa>
 800790a:	6821      	ldr	r1, [r4, #0]
 800790c:	6833      	ldr	r3, [r6, #0]
 800790e:	0608      	lsls	r0, r1, #24
 8007910:	f853 5b04 	ldr.w	r5, [r3], #4
 8007914:	d402      	bmi.n	800791c <_printf_i+0xe8>
 8007916:	0649      	lsls	r1, r1, #25
 8007918:	bf48      	it	mi
 800791a:	b2ad      	uxthmi	r5, r5
 800791c:	2f6f      	cmp	r7, #111	@ 0x6f
 800791e:	4852      	ldr	r0, [pc, #328]	@ (8007a68 <_printf_i+0x234>)
 8007920:	6033      	str	r3, [r6, #0]
 8007922:	bf14      	ite	ne
 8007924:	230a      	movne	r3, #10
 8007926:	2308      	moveq	r3, #8
 8007928:	2100      	movs	r1, #0
 800792a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800792e:	6866      	ldr	r6, [r4, #4]
 8007930:	60a6      	str	r6, [r4, #8]
 8007932:	2e00      	cmp	r6, #0
 8007934:	db05      	blt.n	8007942 <_printf_i+0x10e>
 8007936:	6821      	ldr	r1, [r4, #0]
 8007938:	432e      	orrs	r6, r5
 800793a:	f021 0104 	bic.w	r1, r1, #4
 800793e:	6021      	str	r1, [r4, #0]
 8007940:	d04b      	beq.n	80079da <_printf_i+0x1a6>
 8007942:	4616      	mov	r6, r2
 8007944:	fbb5 f1f3 	udiv	r1, r5, r3
 8007948:	fb03 5711 	mls	r7, r3, r1, r5
 800794c:	5dc7      	ldrb	r7, [r0, r7]
 800794e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007952:	462f      	mov	r7, r5
 8007954:	42bb      	cmp	r3, r7
 8007956:	460d      	mov	r5, r1
 8007958:	d9f4      	bls.n	8007944 <_printf_i+0x110>
 800795a:	2b08      	cmp	r3, #8
 800795c:	d10b      	bne.n	8007976 <_printf_i+0x142>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	07df      	lsls	r7, r3, #31
 8007962:	d508      	bpl.n	8007976 <_printf_i+0x142>
 8007964:	6923      	ldr	r3, [r4, #16]
 8007966:	6861      	ldr	r1, [r4, #4]
 8007968:	4299      	cmp	r1, r3
 800796a:	bfde      	ittt	le
 800796c:	2330      	movle	r3, #48	@ 0x30
 800796e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007972:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007976:	1b92      	subs	r2, r2, r6
 8007978:	6122      	str	r2, [r4, #16]
 800797a:	f8cd a000 	str.w	sl, [sp]
 800797e:	464b      	mov	r3, r9
 8007980:	aa03      	add	r2, sp, #12
 8007982:	4621      	mov	r1, r4
 8007984:	4640      	mov	r0, r8
 8007986:	f7ff fee7 	bl	8007758 <_printf_common>
 800798a:	3001      	adds	r0, #1
 800798c:	d14a      	bne.n	8007a24 <_printf_i+0x1f0>
 800798e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007992:	b004      	add	sp, #16
 8007994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	f043 0320 	orr.w	r3, r3, #32
 800799e:	6023      	str	r3, [r4, #0]
 80079a0:	4832      	ldr	r0, [pc, #200]	@ (8007a6c <_printf_i+0x238>)
 80079a2:	2778      	movs	r7, #120	@ 0x78
 80079a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	6831      	ldr	r1, [r6, #0]
 80079ac:	061f      	lsls	r7, r3, #24
 80079ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80079b2:	d402      	bmi.n	80079ba <_printf_i+0x186>
 80079b4:	065f      	lsls	r7, r3, #25
 80079b6:	bf48      	it	mi
 80079b8:	b2ad      	uxthmi	r5, r5
 80079ba:	6031      	str	r1, [r6, #0]
 80079bc:	07d9      	lsls	r1, r3, #31
 80079be:	bf44      	itt	mi
 80079c0:	f043 0320 	orrmi.w	r3, r3, #32
 80079c4:	6023      	strmi	r3, [r4, #0]
 80079c6:	b11d      	cbz	r5, 80079d0 <_printf_i+0x19c>
 80079c8:	2310      	movs	r3, #16
 80079ca:	e7ad      	b.n	8007928 <_printf_i+0xf4>
 80079cc:	4826      	ldr	r0, [pc, #152]	@ (8007a68 <_printf_i+0x234>)
 80079ce:	e7e9      	b.n	80079a4 <_printf_i+0x170>
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	f023 0320 	bic.w	r3, r3, #32
 80079d6:	6023      	str	r3, [r4, #0]
 80079d8:	e7f6      	b.n	80079c8 <_printf_i+0x194>
 80079da:	4616      	mov	r6, r2
 80079dc:	e7bd      	b.n	800795a <_printf_i+0x126>
 80079de:	6833      	ldr	r3, [r6, #0]
 80079e0:	6825      	ldr	r5, [r4, #0]
 80079e2:	6961      	ldr	r1, [r4, #20]
 80079e4:	1d18      	adds	r0, r3, #4
 80079e6:	6030      	str	r0, [r6, #0]
 80079e8:	062e      	lsls	r6, r5, #24
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	d501      	bpl.n	80079f2 <_printf_i+0x1be>
 80079ee:	6019      	str	r1, [r3, #0]
 80079f0:	e002      	b.n	80079f8 <_printf_i+0x1c4>
 80079f2:	0668      	lsls	r0, r5, #25
 80079f4:	d5fb      	bpl.n	80079ee <_printf_i+0x1ba>
 80079f6:	8019      	strh	r1, [r3, #0]
 80079f8:	2300      	movs	r3, #0
 80079fa:	6123      	str	r3, [r4, #16]
 80079fc:	4616      	mov	r6, r2
 80079fe:	e7bc      	b.n	800797a <_printf_i+0x146>
 8007a00:	6833      	ldr	r3, [r6, #0]
 8007a02:	1d1a      	adds	r2, r3, #4
 8007a04:	6032      	str	r2, [r6, #0]
 8007a06:	681e      	ldr	r6, [r3, #0]
 8007a08:	6862      	ldr	r2, [r4, #4]
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f7f8 fbef 	bl	80001f0 <memchr>
 8007a12:	b108      	cbz	r0, 8007a18 <_printf_i+0x1e4>
 8007a14:	1b80      	subs	r0, r0, r6
 8007a16:	6060      	str	r0, [r4, #4]
 8007a18:	6863      	ldr	r3, [r4, #4]
 8007a1a:	6123      	str	r3, [r4, #16]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a22:	e7aa      	b.n	800797a <_printf_i+0x146>
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	4632      	mov	r2, r6
 8007a28:	4649      	mov	r1, r9
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	47d0      	blx	sl
 8007a2e:	3001      	adds	r0, #1
 8007a30:	d0ad      	beq.n	800798e <_printf_i+0x15a>
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	079b      	lsls	r3, r3, #30
 8007a36:	d413      	bmi.n	8007a60 <_printf_i+0x22c>
 8007a38:	68e0      	ldr	r0, [r4, #12]
 8007a3a:	9b03      	ldr	r3, [sp, #12]
 8007a3c:	4298      	cmp	r0, r3
 8007a3e:	bfb8      	it	lt
 8007a40:	4618      	movlt	r0, r3
 8007a42:	e7a6      	b.n	8007992 <_printf_i+0x15e>
 8007a44:	2301      	movs	r3, #1
 8007a46:	4632      	mov	r2, r6
 8007a48:	4649      	mov	r1, r9
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	47d0      	blx	sl
 8007a4e:	3001      	adds	r0, #1
 8007a50:	d09d      	beq.n	800798e <_printf_i+0x15a>
 8007a52:	3501      	adds	r5, #1
 8007a54:	68e3      	ldr	r3, [r4, #12]
 8007a56:	9903      	ldr	r1, [sp, #12]
 8007a58:	1a5b      	subs	r3, r3, r1
 8007a5a:	42ab      	cmp	r3, r5
 8007a5c:	dcf2      	bgt.n	8007a44 <_printf_i+0x210>
 8007a5e:	e7eb      	b.n	8007a38 <_printf_i+0x204>
 8007a60:	2500      	movs	r5, #0
 8007a62:	f104 0619 	add.w	r6, r4, #25
 8007a66:	e7f5      	b.n	8007a54 <_printf_i+0x220>
 8007a68:	08008e0d 	.word	0x08008e0d
 8007a6c:	08008e1e 	.word	0x08008e1e

08007a70 <__malloc_lock>:
 8007a70:	4801      	ldr	r0, [pc, #4]	@ (8007a78 <__malloc_lock+0x8>)
 8007a72:	f7ff bc75 	b.w	8007360 <__retarget_lock_acquire_recursive>
 8007a76:	bf00      	nop
 8007a78:	20025d58 	.word	0x20025d58

08007a7c <__malloc_unlock>:
 8007a7c:	4801      	ldr	r0, [pc, #4]	@ (8007a84 <__malloc_unlock+0x8>)
 8007a7e:	f7ff bc70 	b.w	8007362 <__retarget_lock_release_recursive>
 8007a82:	bf00      	nop
 8007a84:	20025d58 	.word	0x20025d58

08007a88 <_realloc_r>:
 8007a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8c:	4607      	mov	r7, r0
 8007a8e:	4614      	mov	r4, r2
 8007a90:	460d      	mov	r5, r1
 8007a92:	b921      	cbnz	r1, 8007a9e <_realloc_r+0x16>
 8007a94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a98:	4611      	mov	r1, r2
 8007a9a:	f7ff bddd 	b.w	8007658 <_malloc_r>
 8007a9e:	b92a      	cbnz	r2, 8007aac <_realloc_r+0x24>
 8007aa0:	f000 f858 	bl	8007b54 <_free_r>
 8007aa4:	4625      	mov	r5, r4
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aac:	f000 f89c 	bl	8007be8 <_malloc_usable_size_r>
 8007ab0:	4284      	cmp	r4, r0
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	d802      	bhi.n	8007abc <_realloc_r+0x34>
 8007ab6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007aba:	d8f4      	bhi.n	8007aa6 <_realloc_r+0x1e>
 8007abc:	4621      	mov	r1, r4
 8007abe:	4638      	mov	r0, r7
 8007ac0:	f7ff fdca 	bl	8007658 <_malloc_r>
 8007ac4:	4680      	mov	r8, r0
 8007ac6:	b908      	cbnz	r0, 8007acc <_realloc_r+0x44>
 8007ac8:	4645      	mov	r5, r8
 8007aca:	e7ec      	b.n	8007aa6 <_realloc_r+0x1e>
 8007acc:	42b4      	cmp	r4, r6
 8007ace:	4622      	mov	r2, r4
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	bf28      	it	cs
 8007ad4:	4632      	movcs	r2, r6
 8007ad6:	f000 f82f 	bl	8007b38 <memcpy>
 8007ada:	4629      	mov	r1, r5
 8007adc:	4638      	mov	r0, r7
 8007ade:	f000 f839 	bl	8007b54 <_free_r>
 8007ae2:	e7f1      	b.n	8007ac8 <_realloc_r+0x40>

08007ae4 <memmove>:
 8007ae4:	4288      	cmp	r0, r1
 8007ae6:	b510      	push	{r4, lr}
 8007ae8:	eb01 0402 	add.w	r4, r1, r2
 8007aec:	d902      	bls.n	8007af4 <memmove+0x10>
 8007aee:	4284      	cmp	r4, r0
 8007af0:	4623      	mov	r3, r4
 8007af2:	d807      	bhi.n	8007b04 <memmove+0x20>
 8007af4:	1e43      	subs	r3, r0, #1
 8007af6:	42a1      	cmp	r1, r4
 8007af8:	d008      	beq.n	8007b0c <memmove+0x28>
 8007afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007afe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b02:	e7f8      	b.n	8007af6 <memmove+0x12>
 8007b04:	4402      	add	r2, r0
 8007b06:	4601      	mov	r1, r0
 8007b08:	428a      	cmp	r2, r1
 8007b0a:	d100      	bne.n	8007b0e <memmove+0x2a>
 8007b0c:	bd10      	pop	{r4, pc}
 8007b0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b16:	e7f7      	b.n	8007b08 <memmove+0x24>

08007b18 <_sbrk_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4d06      	ldr	r5, [pc, #24]	@ (8007b34 <_sbrk_r+0x1c>)
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	4604      	mov	r4, r0
 8007b20:	4608      	mov	r0, r1
 8007b22:	602b      	str	r3, [r5, #0]
 8007b24:	f7fb fefc 	bl	8003920 <_sbrk>
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	d102      	bne.n	8007b32 <_sbrk_r+0x1a>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	b103      	cbz	r3, 8007b32 <_sbrk_r+0x1a>
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	20025d64 	.word	0x20025d64

08007b38 <memcpy>:
 8007b38:	440a      	add	r2, r1
 8007b3a:	4291      	cmp	r1, r2
 8007b3c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007b40:	d100      	bne.n	8007b44 <memcpy+0xc>
 8007b42:	4770      	bx	lr
 8007b44:	b510      	push	{r4, lr}
 8007b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b4e:	4291      	cmp	r1, r2
 8007b50:	d1f9      	bne.n	8007b46 <memcpy+0xe>
 8007b52:	bd10      	pop	{r4, pc}

08007b54 <_free_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4605      	mov	r5, r0
 8007b58:	2900      	cmp	r1, #0
 8007b5a:	d041      	beq.n	8007be0 <_free_r+0x8c>
 8007b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b60:	1f0c      	subs	r4, r1, #4
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bfb8      	it	lt
 8007b66:	18e4      	addlt	r4, r4, r3
 8007b68:	f7ff ff82 	bl	8007a70 <__malloc_lock>
 8007b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007be4 <_free_r+0x90>)
 8007b6e:	6813      	ldr	r3, [r2, #0]
 8007b70:	b933      	cbnz	r3, 8007b80 <_free_r+0x2c>
 8007b72:	6063      	str	r3, [r4, #4]
 8007b74:	6014      	str	r4, [r2, #0]
 8007b76:	4628      	mov	r0, r5
 8007b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b7c:	f7ff bf7e 	b.w	8007a7c <__malloc_unlock>
 8007b80:	42a3      	cmp	r3, r4
 8007b82:	d908      	bls.n	8007b96 <_free_r+0x42>
 8007b84:	6820      	ldr	r0, [r4, #0]
 8007b86:	1821      	adds	r1, r4, r0
 8007b88:	428b      	cmp	r3, r1
 8007b8a:	bf01      	itttt	eq
 8007b8c:	6819      	ldreq	r1, [r3, #0]
 8007b8e:	685b      	ldreq	r3, [r3, #4]
 8007b90:	1809      	addeq	r1, r1, r0
 8007b92:	6021      	streq	r1, [r4, #0]
 8007b94:	e7ed      	b.n	8007b72 <_free_r+0x1e>
 8007b96:	461a      	mov	r2, r3
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	b10b      	cbz	r3, 8007ba0 <_free_r+0x4c>
 8007b9c:	42a3      	cmp	r3, r4
 8007b9e:	d9fa      	bls.n	8007b96 <_free_r+0x42>
 8007ba0:	6811      	ldr	r1, [r2, #0]
 8007ba2:	1850      	adds	r0, r2, r1
 8007ba4:	42a0      	cmp	r0, r4
 8007ba6:	d10b      	bne.n	8007bc0 <_free_r+0x6c>
 8007ba8:	6820      	ldr	r0, [r4, #0]
 8007baa:	4401      	add	r1, r0
 8007bac:	1850      	adds	r0, r2, r1
 8007bae:	4283      	cmp	r3, r0
 8007bb0:	6011      	str	r1, [r2, #0]
 8007bb2:	d1e0      	bne.n	8007b76 <_free_r+0x22>
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	6053      	str	r3, [r2, #4]
 8007bba:	4408      	add	r0, r1
 8007bbc:	6010      	str	r0, [r2, #0]
 8007bbe:	e7da      	b.n	8007b76 <_free_r+0x22>
 8007bc0:	d902      	bls.n	8007bc8 <_free_r+0x74>
 8007bc2:	230c      	movs	r3, #12
 8007bc4:	602b      	str	r3, [r5, #0]
 8007bc6:	e7d6      	b.n	8007b76 <_free_r+0x22>
 8007bc8:	6820      	ldr	r0, [r4, #0]
 8007bca:	1821      	adds	r1, r4, r0
 8007bcc:	428b      	cmp	r3, r1
 8007bce:	bf04      	itt	eq
 8007bd0:	6819      	ldreq	r1, [r3, #0]
 8007bd2:	685b      	ldreq	r3, [r3, #4]
 8007bd4:	6063      	str	r3, [r4, #4]
 8007bd6:	bf04      	itt	eq
 8007bd8:	1809      	addeq	r1, r1, r0
 8007bda:	6021      	streq	r1, [r4, #0]
 8007bdc:	6054      	str	r4, [r2, #4]
 8007bde:	e7ca      	b.n	8007b76 <_free_r+0x22>
 8007be0:	bd38      	pop	{r3, r4, r5, pc}
 8007be2:	bf00      	nop
 8007be4:	20025d60 	.word	0x20025d60

08007be8 <_malloc_usable_size_r>:
 8007be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bec:	1f18      	subs	r0, r3, #4
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	bfbc      	itt	lt
 8007bf2:	580b      	ldrlt	r3, [r1, r0]
 8007bf4:	18c0      	addlt	r0, r0, r3
 8007bf6:	4770      	bx	lr

08007bf8 <_init>:
 8007bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfa:	bf00      	nop
 8007bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfe:	bc08      	pop	{r3}
 8007c00:	469e      	mov	lr, r3
 8007c02:	4770      	bx	lr

08007c04 <_fini>:
 8007c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c06:	bf00      	nop
 8007c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c0a:	bc08      	pop	{r3}
 8007c0c:	469e      	mov	lr, r3
 8007c0e:	4770      	bx	lr
